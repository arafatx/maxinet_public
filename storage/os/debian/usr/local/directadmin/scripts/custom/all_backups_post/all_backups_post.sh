#!/bin/bash
# ---------------------------------------------------------------
# Directadmin all_backup_post.sh (All Backup Post)
# This is Directadmin custom script to upload backup created by user, admin and reseller to onedrive
# Author: Arafat Ali | Email: webmaster@sofibox.com
# ---------------------------------------------------------------
GLOBAL_START=$(date +%s.%N)
SCRIPT_PATH="$(dirname "$(readlink -f "$0")")"
SCRIPT_NAME=$(basename -- "$0")
MAIL_BIN=$(command -v mail)

REPORT_PATH="${SCRIPT_PATH}/log"
mkdir -p "${SCRIPT_PATH}/log"
REPORT_FILE="${REPORT_PATH}/${SCRIPT_NAME}.log"
ADMIN_EMAIL="webmaster@sofibox.com"
#APP_SPECIFIC_NAME="Maxiwall"
BOX_HOSTNAME=$(hostname)
#31-03-2020_11-56-16
DATE_TIME_NOW="$(date '+%d-%m-%Y_%H-%M-%S')"
#admin_backups-31-03-2020_11-56-16
BACKUP_DIR_DTN="admin_backups_${DATE_TIME_NOW}"
BACKUP_DESTINATION="Earthbox/admin_backups/${BACKUP_DIR_DTN}"
WARN_STATUS="OK"
MARK_UPLOAD_NOTICE="backup_notice.txt"
ENCRYPT_BACKUP="--encrypt"
RET_VAL=0
# This one obtained from DA script
# shellcheck disable=SC2154
BACKUP_ERROR="${error_result}"
# shellcheck disable=SC2154
DA_BACKUP_PATH="${local_path}"
# For GPG Encryption ID
USER_ID=arafat@sofibox.com
# Import RCLONE CONFIG FILE
RCLONE_SECURE_PATH="/usr/local/maxicode/secure/rclone/"
echo "[${SCRIPT_NAME}]: Decrypting rclone config file ..." | tee -a "${REPORT_FILE}"
# Decrypt rclone_pass before continue

RCLONE_CONFIG_PASS=$(gpg --decrypt "${RCLONE_SECURE_PATH}/rclone_pass")
RET_VAL=$?
if [ $RET_VAL = 0 ]; then
        echo "[${SCRIPT_NAME}]: OK, rclone config file decrypted successfully" | tee -a "${REPORT_FILE}"
        export RCLONE_CONFIG_PASS
        # After RCLONE_CONFIG_PASS if decrypted and exported, this ENVIRONMENT variable will be used for the rest of the script
        RCLONE_CONFIG="${RCLONE_SECURE_PATH}/rclone.conf"
        export RCLONE_CONFIG
else
        WARN_STATUS="WARNING"
        echo "[${SCRIPT_NAME}]: Error, rclone config file decrypting failed. Perhaps passphrase is not cached ?" | tee -a "${REPORT_FILE}"
        ${MAIL_BIN} -s "[${SCRIPT_NAME} | ${WARN_STATUS}]: Admin-Level Backup Operation Report @ ${BOX_HOSTNAME}" ${ADMIN_EMAIL} <"${REPORT_FILE}"
        exit 1
fi

# Check if previous backup generated by DA has error
if [ -z "${BACKUP_ERROR}" ]; then
    echo  "[${SCRIPT_NAME}]: OK, no script error reported from Directadmin backup" | tee -a "${REPORT_FILE}"
else
    WARN_STATUS="WARNING"
    echo  "[${SCRIPT_NAME}]: Warning, there was an error reported from Directadmin backup script" | tee -a "${REPORT_FILE}"
    echo  "[${SCRIPT_NAME}]: This script is terminated. Please inspect the backup files" | tee -a "${REPORT_FILE}"
    ${MAIL_BIN} -s "[${SCRIPT_NAME} | ${WARN_STATUS}]: Admin-Level Backup Operation Report" ${ADMIN_EMAIL} < "${REPORT_FILE}"
    exit 1
fi

function check_valid_tar {
    find_file=$(find "${DA_BACKUP_PATH}" -maxdepth 1 -name "*.tar.gz")
    if [ ${#find_file[@]} -gt 0 ]; then
        if [ ${#find_file[@]} == 1 ]; then
            echo  "[${SCRIPT_NAME}]: There is ${#find_file[@]} backup file in [${DA_BACKUP_PATH}]" | tee -a "${REPORT_FILE}"
        else
            echo  "[${SCRIPT_NAME}]: There are ${#find_file[@]} backup files in [${DA_BACKUP_PATH}]" | tee -a "${REPORT_FILE}"
        fi
        all_backup_tar_name_ext="${DA_BACKUP_PATH}/*.tar.gz"
        for f in ${all_backup_tar_name_ext}
        do
            if [ "${f}" != "${all_backup_tar_name_ext}" ]; then
                echo "[${SCRIPT_NAME}]: Checking backup file of [${f}] for corruption ... (this may take some time):" | tee -a "${REPORT_FILE}"
                gzip_status=$(gzip -t "${f}")
                RET_VAL=$?
                if [ ${RET_VAL} = 0 ]; then
                    echo "[${SCRIPT_NAME}]: OK, backup archive file of [${f}] is valid" | tee -a "${REPORT_FILE}"
                    echo "-----" | tee -a "${REPORT_FILE}"
                else
                    WARN_STATUS="WARNING"
                    echo "[${SCRIPT_NAME}]: Warning, found error: [${gzip_status}]" | tee -a "${REPORT_FILE}"
                    rm -f "${f}"
                    echo "[${SCRIPT_NAME}]: Backup file [${f}] has been removed" | tee -a "${REPORT_FILE}"
                fi
            fi
        done
    else
        echo  "[${SCRIPT_NAME}]: OK, there is no backup file in [${DA_BACKUP_PATH}]" | tee -a "${REPORT_FILE}"
    fi
    echo "[${SCRIPT_NAME}]: Finished validating backup archive files" | tee -a "${REPORT_FILE}"
}

function encrypt_backup {
# Using GPG method
if [ "${ENCRYPT_BACKUP}" == "--encrypt" ]; then
        all_unencrypted_file_ext="${DA_BACKUP_PATH}/*.tar.gz"
                echo "[${SCRIPT_NAME}]: OK, backup encryption [is set]. Backup encryption is using [GPG method]" | tee -a "${REPORT_FILE}"
                for f in ${all_unencrypted_file_ext}
                do
                        if [ "$f" != "${all_unencrypted_file_ext}" ]; then
                                echo "[${SCRIPT_NAME}]: Encrypting backup file of [$f] as ${f}.gpg ..." | tee -a "${REPORT_FILE}"
                                echo "----------" | tee -a "${REPORT_FILE}"
                                gpg --recipient $USER_ID --encrypt "${f}"
                                RET_VAL=$?
                                echo "----------" | tee -a "${REPORT_FILE}"
                                if [ "${RET_VAL}" == 0 ]; then
                                                echo  "[${SCRIPT_NAME}]: Successfully encrypted backup file of [$f] as ${f}.gpg" | tee -a "${REPORT_FILE}"
                    if [ -f "${f}.gpg" ]; then
                                                rm -f "$f" #Remove the unencrypted backup
                                                echo  "[${SCRIPT_NAME}]: Unencrypted backup file of [$f] was deleted" | tee -a "${REPORT_FILE}"
                                        else # In case no encrypted file
                                                echo "[${SCRIPT_NAME}]: No encrypted file was created. Something is wrong" | tee -a "${REPORT_FILE}"
                                        fi
                                fi
                                if [[ ${RET_VAL} -ne 0 ]]; then
                                        WARN_STATUS="WARNING"
                                        echo  "[${SCRIPT_NAME}]: Warning, unable to encrypt backup file of [$f]. GPG error code is: ${RET_VAL}" | tee -a "${REPORT_FILE}"
                                        ${MAIL_BIN} -s "[${SCRIPT_NAME} | ${WARN_STATUS}]: Admin-Level Backup Operation Report @ ${BOX_HOSTNAME}" ${ADMIN_EMAIL} < "${REPORT_FILE}"
                                        exit 1
                                fi
                        else
                                echo "[${SCRIPT_NAME}]: Warning, something is wrong. There is no .tar.gz file to encrypt in [$BACKUP_DEST_LOCAL]" | tee -a "${REPORT_FILE}"
                                ${MAIL_BIN} -s "[${SCRIPT_NAME} | ${WARN_STATUS}]: Admin-Level Backup Operation Report @ ${BOX_HOSTNAME}" ${ADMIN_EMAIL} < "${REPORT_FILE}"
                                exit 1
                        fi
                done
        else
                echo "[${SCRIPT_NAME}]: Warning, backup encryption [is not set]" | tee -a "${REPORT_FILE}"
        fi
}

function create_backup_dir {
    echo "[${SCRIPT_NAME}]: Creating new backup directory in [onedrive] as [${BACKUP_DESTINATION}] ..." | tee -a "${REPORT_FILE}"
    bash -o pipefail -c "rclone mkdir onedrive-backup:${BACKUP_DESTINATION} | tee -a ${REPORT_FILE}"
    RET_VAL=$?
    if [ ${RET_VAL} = 0 ]; then
        echo "[${SCRIPT_NAME}]: OK, new backup folder [${BACKUP_DESTINATION}] created at [onedrive]" | tee -a "${REPORT_FILE}"
    else
        WARN_STATUS="WARNING"
        echo "[${SCRIPT_NAME}]: [${RET_VAL}] Warning, something is wrong while creating directory [${BACKUP_DESTINATION}] at [onedrive]" | tee -a "${REPORT_FILE}"
    fi
}

function upload_all_backups {
    if [ "${ENCRYPT_BACKUP}" == "--encrypt" ]; then
        echo "[${SCRIPT_NAME}]: OK, backup encryption is set. Uploading only backup files with .gpg extension into [onedrive]" | tee -a "${REPORT_FILE}"
                #rco="move" # delete file after upload
                all_backup_file_ext="${DA_BACKUP_PATH}/*.tar.gz.gpg"
    else
        echo "[${SCRIPT_NAME}]: Warning, backup encryption is not set. Backup files are going to be uploaded into [onedrive] without encryption" | tee -a "${REPORT_FILE}"
                #rco="copy" # don't delete file after upload. Can be re-used to encrypt
                all_backup_file_ext="${DA_BACKUP_PATH}/*.tar.gz"
    fi
    #echo "The extension is : $backup_file_ext" | tee -a "${REPORT_FILE}"
    rco="move"
    for f in ${all_backup_file_ext} #only upload encrypted gpg file
    do
        if [ "$f" != "$all_backup_file_ext" ]; then
            echo "[${SCRIPT_NAME}]: Uploading the backup file [$f] into [onedrive] ... (this may take some time):" | tee -a "${REPORT_FILE}"
            bash -o pipefail -c "rclone ${rco} ${f} onedrive-backup:${BACKUP_DESTINATION} --log-file=${REPORT_FILE} --log-level INFO --stats-one-line -P --stats 2s"
            RET_VAL=$?
            if [ ${RET_VAL} = 0 ]; then
                echo "This backup folder is empty because it has been uploaded into onedrive" > "${DA_BACKUP_PATH}/${MARK_UPLOAD_NOTICE}"
                echo "[${SCRIPT_NAME}]: Success, backup file of [$f] has been successfully uploaded into [onedrive]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 1 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, syntax or usage error while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 2 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, error not otherwise categorised while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 3 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, directory not found while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 4 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, file not found while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 5 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, temporary error (one that more retires might fix) (Retry errors) while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 6 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, less serious errors (like 461 errors from dropbox) (NoRetry errors) while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 7 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, fatal error (one that more retries won't fix, like account suspended) (Fatal errors) while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 8 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, transfer exceeded - limit set by --max-transfer reached while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            elif [ ${RET_VAL} = 9 ]; then
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, operation successful, but no files transferred while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            else
                WARN_STATUS="WARNING"
                echo "[${SCRIPT_NAME}]: Error, unknown error while performing file upload [$f]" | tee -a "${REPORT_FILE}"
            fi
        else
            WARN_STATUS="WARNING"
            echo "[${SCRIPT_NAME}]: Error, no backup files found in [${DA_BACKUP_PATH}]" | tee -a "${REPORT_FILE}"
        fi
    done
}
# 1) Check valid tar
check_valid_tar
# 2) Encrypt backup
encrypt_backup
# 3) Create backup dir
create_backup_dir
# 4) Upload all backups
upload_all_backups

echo "[${SCRIPT_NAME}]: Backup status: [${WARN_STATUS}]" | tee -a "${REPORT_FILE}"
echo "[${SCRIPT_NAME}]: Report file location: [${REPORT_FILE}]" | tee -a "${REPORT_FILE}"
echo "===================================================================================="
GLOBAL_END=$(date +%s.%N)
dt=$(echo "${GLOBAL_END} - ${GLOBAL_START}" | bc)
dd=$(echo "$dt/86400" | bc)
dt2=$(echo "$dt-86400*$dd" | bc)
dh=$(echo "$dt2/3600" | bc)
dt3=$(echo "$dt2-3600*$dh" | bc)
dm=$(echo "$dt3/60" | bc)
ds=$(echo "$dt3-60*$dm" | bc)

LC_NUMERIC=C printf "[${SCRIPT_NAME}]: Total runtime of [${SCRIPT_NAME}]: [%d:%02d:%02d:%02.4f]\n" "${dd}" "${dh}" "${dm}" "${ds}" | tee -a "${REPORT_FILE}"

${MAIL_BIN} -s "[${SCRIPT_NAME} | ${WARN_STATUS}]: Admin-Level Backup Operation Report" ${ADMIN_EMAIL} < "${REPORT_FILE}"
