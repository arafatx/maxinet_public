#!/bin/bash
# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
# Author: Arafat Ali | Email: webmaster@sofibox.com | Website: sofibox.com
APP_SPECIFIC_NAME="Maxinet"
APP_STATUS="alpha"
# Note some minor versions are not published
APP_VERSION="0.5.2.8-${APP_STATUS}"
COMPANY_ID="${COMPANY_ID}"
# Hello there, this is a powerful script that able initialize one or more server installation from scratch. From configuring the server disk, until you got the full working server with a live website.
# It also includes many security and hardening script.
# Initially this script was designed to work 100% with Directadmin installation but it can be used to install other server stacks such as LEMP, Laravel, Magento, Prestashop and more
# This script is very portable. You can always re-run this script to resume installation if it's halt due to known error or script has performed reboot
# You can also use this script to perform other tasks such as automatically login into SSH and more. Trigger ${script_name} --help for more information
# URL (public): github.com/sofibox/maxinet_public | (private) github.com/sofibox/maxinet (need access token)
# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
# Run installation with log output: ./${script_name} --setup 2>&1 | tee maxinet.log
# Run initialize installation with log output: ./${script_name} --init-server init-all rebuild-iso 2>&1 | tee maxinet.log

# FUNCTION BEGIN HERE
function script_header() {
  # This is script header
  _echo "$(msg red)=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=$(msg end)" --quiet
  _echo "$(msg cyan)Welcome to $(msg red)${APP_SPECIFIC_NAME}$(msg cyan) Automated Script$(msg end)" --quiet
  _echo "$(msg blue)This powerful script is part of Sofibox/MaxiNet scripts$(msg end)" --quiet
  _echo "$(msg green)For script help: $(msg yellow)${SCRIPT_NAME} --help$(msg end)" --quiet
  _echo "$(msg green)Script official URL: $(msg yAellow)http://sofibox.com/maxinet$(msg end)" --quiet
  _echo "$(msg green)Version: $(msg yellow)${SCRIPT_NAME}-${APP_VERSION}$(msg end)" --quiet
  _echo "$(msg green)Distro ID: $(msg yellow)${DISTRO_ID}$(msg end) | $(msg green) Distro Version: $(msg yellow)${DISTRO_VERSION}$(msg end)" --quiet
  _echo "$(msg cyan)$(msg bold)(C) Author: Arafat Ali | Email: arafat@sofibox.com$(msg end)" --quiet
  _echo "$(msg red)=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=$(msg end)" --quiet
  _echo "" --quiet
}
function help() {
  echo "Welcome to help section!"
  echo "------------------------"
  echo "Run initialize installation with log output: ${SCRIPT_NAME} --init-server init-all rebuild-iso 2>&1 | tee maxinet.log"
  echo ""
  echo "To start/resume local installation: "
  echo "eg:"
  echo "${SCRIPT_NAME} --setup"
  echo "OR"
  echo "${SCRIPT_NAME} --setup 2>&1 | tee maxinet.log"
  echo ""
  echo "To start/resume remote installation:"
  echo "Syntax: ${SCRIPT_NAME} --ssh-login <fqdn>:<ssh_port> <user_role>:<user_name> <local_script_to_push_for_installation>"
  echo "eg:"
  echo "${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"root:${ROOT_USERNAME}\" \"${CODE_PATH}/ssh_scripts/maxinet_setup.sh\""
  echo ""
  echo "To unlock LUKS Disk encryption:"
  echo "Syntax: ${SCRIPT_NAME} --ssh-luks-unlock <DROP_BEAR_PORT> \"<LUKS_PASS>\""
  echo "eg:"
  echo "${SCRIPT_NAME} --ssh-luks-unlock ${DROP_BEAR_PORT} \"${LUKS_PASS}\""
  echo ""
  echo "To login as root user: ${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"user:root\""
  echo ""
  echo "To login as SSH user: ${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"root:SSH_USERNAME\""

}

function manual() {
  local manual_name="$1"
  if [ "${manual_name}" == "init_server" ]; then
    local lopt="--init-server"
    echo "----------------------------------------------"
    echo "Help section for ${SCRIPT_NAME}/${manual_name}"
    echo "----------------------------------------------"
    echo "CALL METHOD"
    echo ""
    echo "FOR EXTERNAL CALL: ${SCRIPT_NAME} ${lopt} --help"
    echo "FOR INTERNAL CALL: ${manual_name} --help"
    echo ""
    echo "SYNTAX 1: "
    echo ""
    echo "${SCRIPT_NAME} ${lopt} *<long-option1> +<long-option2> ... +<long-optionN>"
    echo ""
    echo "EXAMPLE SYNTAX 1: "
    echo ""
    echo "${SCRIPT_NAME} ${lopt} --rebuild-iso --backup-ssh-key --backup-iso"
    echo "EXAMPLE SYNTAX 2: "
    echo ""
    echo "${SCRIPT_NAME} ${lopt} --rebuild-all --backup-all"
    echo ""
    echo "DESCRIPTION"
    echo ""
    echo "1) <LONG OPTIONS>"
    echo "--rebuild-iso  -  rebuild server OS ISO image from scratch"
    echo "--rebuild-partition  -  rebuild server disk partition from scratch"
    echo "--rebuild-config - rebuild server config from scratch"
    echo "--rebuild-all  -  rebuild everything from the above"
    echo "--backup-ssh-key - backup server previous ssh key file (both private and public keys)"
    echo "--backup-iso  -  backup server previous OS ISO image file"
    echo "--backup-all  -  backup everything from the above"
    echo ""
    echo "NOTE 1:"
    echo ""
    echo "${SCRIPT_NAME} --init-server --rebuild-iso --rebuild-partition --rebuild-config"
    echo "is equivalent to"
    echo "${SCRIPT_NAME} --rebuild-all"

    echo ""
    echo "NOTE 2:"
    echo ""
    echo "${SCRIPT_NAME} --init-server --backup-ssh-key --backup-iso"
    echo "is equivalent to"
    echo "${SCRIPT_NAME} --backup-all"
    echo ""
    echo "NOTE 3:"
    echo ""
    echo "Can only accept long options that begins with 2 dashes --. eg: --rebuild-iso"
    echo ""
  fi
  if [ "${manual_name}" == "linode_api_admin" ]; then
    local lopt="--linode-api"
    echo "----------------------------------------------"
    echo "Help section for ${SCRIPT_NAME}/${manual_name}"
    echo "----------------------------------------------"
    echo "$(msg yellow)CALL METHOD$(msg end)"
    echo ""
    echo "$(msg yellow)FOR EXTERNAL CALL: ${SCRIPT_NAME} ${lopt} --help"
    echo "$(msg yellow)FOR INTERNAL CALL: ${manual_name} --help"
    echo ""
    echo "$(msg yellow)SYNTAX 1:$(msg end)"
    echo "${SCRIPT_NAME} ${lopt} *<ACTION> +<--verbose/-v> +<--scripting/-s> +<long-option2> ... +<long-optionN>"
    echo ""
    echo "$(msg yellow)EXAMPLE 1:$(msg end)"
    echo "${SCRIPT_NAME} ${lopt} get-domain-id -verbose --domain maxibi.com"
    echo ""
    echo "$(msg yellow)DESCRIPTION$(msg end)"
    echo ""
    echo "1) $(msg yellow)<ACTION>$(msg end)"
    echo ""
    echo "1.1) $(msg cyan)get-linode-id$(msg end)  -  get the linode id for a given label"
    echo "$(msg yellow)SYNTAX 1: $(msg end)"
    echo "${SCRIPT_NAME} ${lopt} get-linode-id --linode-label <linode_label>"
    echo "$(msg yellow)EXAMPLE SYNTAX 1:$(msg end)"
    echo "${SCRIPT_NAME} ${lopt} get-linode-id --linode-label server.test.com"
    echo "$(msg yellow)EXAMPLE OUTPUT 1:$(msg end)"
    echo "12344422"
    echo ""
    echo "1.2) $(msg cyan)get-linode-status$(msg end)  -  get the linode status for a given label"
    echo "$(msg yellow)SYNTAX 1: $(msg end)"
    echo "${SCRIPT_NAME} ${lopt} get-linode-status --linode-label <linode_label>"
    echo "$(msg yellow)EXAMPLE SYNTAX 1:$(msg end)"
    echo "${SCRIPT_NAME} ${lopt} get-linode-status --linode-label server.test.com"
    echo "$(msg yellow)EXAMPLE OUTPUT 1:$(msg end)"
    echo "online"
    echo ""
    echo "1.4) $(msg cyan)get-domain-id$(msg end)  -  get the linode domain id for a given domain"
    echo "$(msg yellow)SYNTAX 1:$(msg end)"
    echo "${SCRIPT_NAME} ${lopt} get-domain-id --domain <domain_name>"
    echo "$(msg yellow)EXAMPLE SYNTAX 1:$(msg end)"
    echo "${SCRIPT_NAME} ${lopt} get-domain-id --domain test.com"
    echo "$(msg yellow)EXAMPLE OUTPUT 1:$(msg end)"
    echo "12322"
    echo ""

  fi
}

# Create dynamic variable
# variable_api <required action> <required VARIABLE --name> <optional --value>
# variable_api create-variable --name myvariable --value hello | this creates variable name with value hello
# variable_api create-variable --name testvariable | this creates a variable name testvariable without value
# variable_api get-variable-value --name testvariable | this will display the variable testvariable value
function variable_api() {
  local action argnum options retval name value
  action="$1"
  argnum="$#"
  if [ ${argnum} -eq 0 ]; then
    echo "Error, no argument is supplied. Use [ ${SCRIPT_NAME} --create-var --help ] to see the valid options"
    exit 1
  fi

  options=$(getopt -o '' --long help,name:,value: -n "${FUNCNAME[0]} in ${SCRIPT_NAME}" -- "$@")
  retval=$?
  if [ ${retval} != 0 ]; then
    echo "Error, invalid parse data. Terminating..." >&2
    exit 1
  fi

  # Must quote this option variable
  eval set -- "${options}"

  name=""
  value=""
  while true; do
    case "$1" in
    --help)
      manual "${FUNCNAME[0]}"
      shift
      exit 0
      ;;
    --name)
      name="$2"
      shift 2
      ;;
    --value)
      value="$2"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
    esac
  done
  if [ "${action}" == "create-variable" ]; then
    if [ -z "${name}" ]; then
      echo "Error, the option --name is required!"
      _exit 1
    fi
    # Put option -g for global variable
    if [ -n "${value}" ]; then
      declare -g "VAR_${name}"="${value}"
    else
      declare -g "VAR_${name}"=""
    fi
  elif [ "${action}" == "get-variable-value" ]; then
    local dv
    if [ -z "${name}" ]; then
      echo "Error, the option --name is required!"
      _exit 1
    fi
    dv="VAR_${name}"
    echo "${!dv}"
  else
    echo "Error, invalid action for variable_api!"
    exit 147
  fi
}

# This function validate all data argument. Eg: check if the domain name provided is FQDN or valid
# is_valid server_record_type <data>
function is_valid() {
  local type data1 data2 retval distro_id
  type="$1"
  data1="$2"
  data2="$3"
  distro_id="${DISTRO_ID}"

  if [ "${distro_id}" == "debian" ]; then
    install_required "apt:ipcalc" "apt:iproute2"
  #elif ["${distro_id}" == "ubuntu" ]; then
  #: Do more distro check here in the future
  fi
  if [[ "${type}" == "integer" ]]; then
    if [[ ${data1} =~ [0-9] ]]; then
      return 0
    else
      return 1
    fi
  elif [[ "${type}" == "domain" ]]; then
    if grep -oP '(?=^.{4,253}$)(^(?:[a-zA-Z0-9](?:(?:[a-zA-Z0-9\-]){0,61}[a-zA-Z0-9])?\.)+([a-zA-Z]{2,}|xn--[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])$)' <<<"${data1}" >/dev/null 2>&1; then
      #if grep -oP '^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+[A-Za-z]{2,6}$' <<< "$1" >/dev/null 2>&1;then
      return 0
      # do another check using host if regex above detected as false and return either true or false
    else
      host "${data1}" >/dev/null 2>&1
      retval=$?
      return "${retval}"
    fi

  elif [[ "${type}" == "domain_type" ]]; then
    # Convert to capital with ^^ and compare with capital letters
    if [[ "${data1^^}" == +(MASTER|SLAVE) ]]; then
      return 0
    else
      return 1
    fi
    # For linode case ttl
    #  record_ttl="300" # 300(5m), 3600(1h), 7200(2h), 14400(4h), 28800(8h), 57600(16h), 0/86400(1d)-Default, 172800(2d), 345600(4d), 691200(8d), 604800(1w), 1209600(2w), 2419200(4w).
  elif [[ "${type}" == "domain_ttl" ]]; then
    if [[ ${data1} -ge 300 && ${data1} -le 2419200 && ${data1} =~ ^[0-9]+$ ]]; then
      return 0
    else
      return 1
    fi
  elif [[ "${type}" == "record_ttl" ]]; then
    if [[ ${data1} -ge 300 && ${data1} -le 2419200 && ${data1} =~ ^[0-9]+$ ]]; then
      return 0
    else
      return 1
    fi
  elif [[ "${type}" == "record_type" ]]; then
    # Convert to capital with ^^ and compare with capital letters
    if [[ "${data1^^}" == +(NS|MX|A|AAAA|TXT|CNAME|SRV|CAA) ]]; then
      return 0
    else
      return 1
    fi
  elif [[ "${type}" == "record_priority" ]]; then
    if [[ ${data1} -ge 0 && ${data1} -le 255 && ${data1} =~ ^[0-9]+$ ]]; then
      return 0
    else
      return 1
    fi
  elif [[ "${type}" == "email" ]]; then
    if [[ "${data1}" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
      return 0
    else
      return 1
    fi
  elif [[ "${type}" == "server_record_valid_character" ]]; then

    if ! [[ ${data1} == *['!'@#\$%^\&*()+]* ]]; then
      return 0
    else
      return 1
    fi
    #Check ipv4
  elif [[ "${type}" == "ipv4" ]]; then
    local ipv4="${data1}" ipv4_pattern='^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$'

    if [[ "${ipv4}" =~ ${ipv4_pattern} ]]; then
      #retval=0
      if command -v ip &>/dev/null; then
        method_bin=$(command -v ip)
        "${method_bin}" route get "${ipv4}" >/dev/null 2>&1
        retval=$?

      else
        #_echo "$(msg yellow)Warning, unable to find suitable binary for checking ipv4 or ipv6 address. $(msg end)" --name --verbose 4
        retval=1
      fi
    else
      retval=1
    fi

    return ${retval}
    # Check ipv6
  elif [[ "${type}" == "ipv6" ]]; then
    local ipv6="${data1}" ipv6_pattern method_bin retval
    ipv6_pattern='^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$'
    if [[ ${ipv6} =~ ${ipv6_pattern} ]]; then
      #retval=0
      if command -v ip &>/dev/null; then
        method_bin=$(command -v ip)
        "${method_bin}" route get "${ipv6}" >/dev/null 2>&1
        retval=$?
      else
        #_echo "$(msg yellow)Warning, unable to find suitable binary for checking ipv4 or ipv6 address. $(msg end)" --name --verbose 4
        retval=1
      fi

    else
      retval=1
    fi

    return ${retval}
    # Check both ipv4 and ipv6
  elif [[ "${type}" == "ipv46" ]]; then
    local ip="${data1}" method_bin retval

    if command -v ip &>/dev/null; then
      method_bin=$(command -v ip)
      ${method_bin} route get "${ip}" >/dev/null 2>&1
      retval=$?
    else
      #_echo "$(msg yellow)Warning, unable to find suitable binary for checking ipv4 or ipv6 address. $(msg end)" --name --verbose 4
      retval=1
    fi
    return ${retval}

  elif [[ "${type}" == "not-empty-string" ]]; then
    if [ -n "${data1}" ]; then
      return 0
    else
      return 1
    fi

  elif [[ "${type}" == "valid-linode-disk-filetype" ]]; then
    if [[ "${data1^^}" == +(RAW|SWAP|EXT3|EXT4|INITRD) ]]; then
      return 0
    else
      return 1
    fi
    # if is_valid sha256sum data1 data2; then
  elif [[ "${type}" == "sha256sum" ]]; then
    local retval
    echo "${data1}" "${data2}" | sha256sum --check &>/dev/null
    retval=$?
    return ${retval}
  fi
}

# This function initialize or deploy server installation from scratch with few options
# See <script_name> --init-server --help or look at manual() section under "init_server" for more information
function init_server() {
  local options retval rebuild_iso rebuild_partition rebuild_config rebuild_all backup
  ARGNUM="$#"
  if [ $ARGNUM -eq 0 ]; then
    echo "Error, no argument is supplied. Use [ ${SCRIPT_NAME} --init-server --help ] to see the valid options"
    exit 1
  fi

  options=$(getopt -o '' --long help,rebuild-iso,rebuild-partition,rebuild-config,rebuild-all,backup -n "${FUNCNAME[0]} in ${SCRIPT_NAME}" -- "$@")
  retval=$?
  if [ ${retval} != 0 ]; then
    echo "Error, invalid parse data. Terminating..." >&2
    exit 1
  fi

  # Must quote this option variable
  eval set -- "${options}"

  rebuild_iso=false
  rebuild_partition=false
  rebuild_config=false
  rebuild_all=false
  backup=false
  while true; do
    case "$1" in
    --help)
      manual "${FUNCNAME[0]}"
      shift
      exit 0
      ;;
    --rebuild-iso)
      rebuild_iso=true
      shift
      ;;
    --rebuild-partition)
      rebuild_partition=true
      shift
      ;;
    --rebuild-config)
      rebuild_config=true
      shift
      ;;
    --rebuild-all)
      rebuild_all=true
      rebuild_iso=true
      rebuild_partition=true
      rebuild_config=true
      shift
      ;;

    --backup)
      backup=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
    esac
  done
  echo "Server Physical Information:"
  echo "Provider: ${DNS_PROVIDER_NAME}"
  echo "IPv4 address: ${IPV4_ADD0}"
  echo "Disk space: "
  echo "Memory/RAM: "
  echo "Checking IP and domain propagation ..."

  if [ ${backup} == "true" ]; then
    _echo "$(msg blue)Notice, the option --backup-all is set. The following backup will events be triggered automatically: $(msg end)" --name --plain
    _echo "$(msg blue)1) Previous iso image will be backed up automatically $(msg end)" --name --plain
    _echo "$(msg blue)2) Previous RSA SSH key will be backed up automatically $(msg end)" --name --plain
  fi

  _echo "$(msg newline)" --plain
  if [ ${rebuild_all} == "true" ]; then
    _echo "$(msg yellow)Warning, --rebuild-all is set. The following options are enabled by default: $(msg end)" --name --verbose 4
    _echo "$(msg yellow)Warning, --rebuild-iso is set. Hence new ISO will be rebuilt $(msg end)" --name --verbose 4
    _echo "$(msg yellow)Warning, --rebuild-partition is set. Hence, all disk partitions will be rebuilt $(msg end)" --name --verbose 4
    _echo "$(msg yellow)Warning, --rebuild-config is set. Hence, all configs will be removed $(msg end)" --name --verbose 4
  else
    if [ ${rebuild_iso} == "true" ]; then
      _echo "$(msg yellow)Warning, --rebuild-iso is set. Hence new ISO will be rebuilt $(msg end)" --name --verbose 4
    fi

    if [ ${rebuild_partition} == "true" ]; then
      _echo "$(msg yellow)Warning, --rebuild-partition is set. Hence, all disk partitions will be rebuilt $(msg end)" --name --verbose 4
    fi

    if [ ${rebuild_config} == "true" ]; then
      _echo "$(msg yellow)Warning, --rebuild-config is set. Hence, all configs will be removed $(msg end)" --name --verbose 4
    fi
  fi
  _pause 5

  if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
    server_main_disk_raw_size="${BOX_MAIN_DISK_RAW_SIZE}"
    server_boot_disk_raw_size="${BOX_BOOT_DISK_RAW_SIZE}"

    ((box_os_disk = server_main_disk_raw_size - server_boot_disk_raw_size))

    _echo "Configuring ${DNS_PROVIDER_NAME} server for ${BOX_HOSTNAME_FQDN} ..." --name --plain
    _echo "" --plain

    # Turn off linode if it's running
    _echo "=== Shutting down linode ====" --plain --name
    linode_api_admin shutdown-linode --linode-label "${BOX_HOSTNAME_FQDN}"
    # Delete all existing disks (if exist)
    echo ""

    # Rebuild linode disks if set (delete and create)

    if [ ${rebuild_partition} == "true" ]; then
      # Note this required linode to be turned off
      # ------ Delete and recreate specific disk from linode ------
      # Delete existing Boot Disk that boot the operating system installer
      #linode_api_admin delete-disk --linode-label "${BOX_HOSTNAME_FQDN}" --linode-disk-label "${LINODE_BOOT_DISK_LABEL}"
      # Delete existing OS Disk that hold the operating system for the server
      #linode_api_admin delete-disk --linode-label "${BOX_HOSTNAME_FQDN}" --linode-disk-label "${LINODE_OS_DISK_LABEL}"
      # ------ To delete all disks from linode (plural with s)------
      _echo "=== Deleting all linode disks ====" --plain --name
      linode_api_admin delete-disks --linode-label "${BOX_HOSTNAME_FQDN}"
      # Create Boot Disk that boot the operating system installer with raw format
      _echo "=== Creating linode Boot_Disk ====" --plain --name

      linode_api_admin create-disk --linode-label "${BOX_HOSTNAME_FQDN}" --linode-disk-label "${LINODE_BOOT_DISK_LABEL}" --linode-disk-filetype "raw" --linode-disk-size "${server_boot_disk_raw_size}"
      # Example to allow duplicate entry as above:
      #linode_api_admin create-disk --linode-label "${BOX_HOSTNAME_FQDN}" --linode-disk-label "${LINODE_BOOT_DISK_LABEL}" --linode-disk-filetype "raw" --linode-disk-size "${server_boot_disk_raw_size}" --allow-duplicate-entry
      # Create OS Disk that hold the operating system for the server
      _echo "=== Creating linode OS_Disk ====" --plain --name
      linode_api_admin create-disk --linode-label "${BOX_HOSTNAME_FQDN}" --linode-disk-label "${LINODE_OS_DISK_LABEL}" --linode-disk-filetype "raw" --linode-disk-size "${box_os_disk}"

    fi

    if [ ${rebuild_config} == "true" ]; then
      #_echo "=== Delete specific config .... ====" --plain --name
      # Delete existing Boot_Config profile
      #linode_api_admin "delete-config" --linode-label "${BOX_HOSTNAME_FQDN}" --linode-config-label "${LINODE_BOOT_CONFIG_LABEL}"
      # Delete existing OS_Config profile
      #linode_api_admin "delete-config" --linode-label "${BOX_HOSTNAME_FQDN}" --linode-config-label "${LINODE_OS_CONFIG_LABEL}"

      _echo "=== Delete all configs .... ====" --plain --name
      linode_api_admin "delete-configs" --linode-label "${BOX_HOSTNAME_FQDN}"

      _echo "=== Creating linode config Boot_Config ====" --plain --name
      linode_api_admin "create-config" --linode-label "${BOX_HOSTNAME_FQDN}" \
        --linode-config-label "${LINODE_BOOT_CONFIG_LABEL}" --linode-config-comments "The installer boot configuration" \
        --linode-config-kernel "linode/direct-disk" --linode-config-rootdev "/dev/sdb" \
        --label-devsda "disk:${LINODE_OS_DISK_LABEL}" --label-devsdb "disk:${LINODE_BOOT_DISK_LABEL}"

      _echo "=== Creating linode config OS_Config ====" --plain --name
      linode_api_admin "create-config" --linode-label "${BOX_HOSTNAME_FQDN}" \
        --linode-config-label "${LINODE_OS_CONFIG_LABEL}" --linode-config-comments "The operating boot configuration" \
        --linode-config-kernel "linode/direct-disk" --linode-config-rootdev "/dev/sda" \
        --label-devsda "disk:${LINODE_OS_DISK_LABEL}"

      echo ""
    fi

    if [ "${rebuild_iso}" == "true" ]; then
      _echo "$(msg yellow)Warning, new ISO will be rebuilt because the option --rebuild-iso is set$(msg end)" --name
      _pause 10
      echo "Creating ISO file"
      # Create ISO type for Hard disk boot, pull from web, upload to dropbox and write an automation script for installation
      if [ "${backup}" == "true" ]; then
        iso_api create-os-iso --iso-type hdd-boot --iso-base web --upload-to-dropbox --write-script --backup
      else
        iso_api create-os-iso --iso-type hdd-boot --iso-base web --upload-to-dropbox --write-script
      fi

    else
      _echo "Notice, linode will install server operating system using existing automated ISO because the option rebuild-iso is not set" --name
    fi

    _echo "$(msg cyan)Booting linode ${BOX_HOSTNAME_FQDN} into Finnix rescue mode ...$(msg end)" --name

    linode_api_admin reboot-to-rescue --linode-label "${BOX_HOSTNAME_FQDN}" --label-devsda "disk:${LINODE_BOOT_DISK_LABEL}" --label-devsdb "disk:${LINODE_OS_DISK_LABEL}"
    echo ""

    _echo "$(msg cyan)Copying RSA key public key for login purpose ...$(msg end)" --name
    ssh_api copy-public-keys --without-prompt
    echo ""
    # Wait 12 seconds for Rescue OS to boot properly
    # Note the method to determine whether Finnix Rescue OS port is available or not will not work because by default Rescue Disk do not have open port
    _echo "$(msg cyan)Giving 12 seconds for ${BOX_HOSTNAME_FQDN} to finish booting into Finnix rescue OS ...$(msg end)" --name
    sleep 12
    _echo "$(msg cyan)Writing OS into ${LINODE_BOOT_DISK_LABEL} Partition via SSH background (this will be completed until linode is turned off automatically) ...$(msg end)" --name
    # ssh -q -o "StrictHostKeyChecking no" -i /root/.ssh/linode_lish.id_rsa -tt "${DNS_PROVIDER_USER}@${DNS_PROVIDER_TERMINAL_SERVER}" "${BOX_HOSTNAME_FQDN}" <"${CODE_PATH}/ssh_scripts/os_write_ag.sh" >/dev/null 2>&1 &
    # This above lish ssh command is equivalent to below using --push-iso-write-script option and other config will be used the default values from config file:
    ssh_api lish-push-script --push-iso-write-script
    # Wait until linode status is offline
    linode_api_admin wait-linode-status --linode-label "${BOX_HOSTNAME_FQDN}" --until-status offline

    # After system shutdown, then we can execute the following
    # Note I can use reboot-linode or boot-linode (boot-linode is used if the linode status is offline, if it's online you cannot use it)
    linode_api_admin boot-linode --linode-label "${BOX_HOSTNAME_FQDN}" --linode-config-label "${LINODE_BOOT_CONFIG_LABEL}"
    _echo "$(msg cyan)Installing operating system automatically using preseed configuration (approx 5 minutes. Server will turned off automatically when finish): $(msg end)" --name
    # Do not over call the API, use sleep 4 minutes (240 seconds). The installation approximate time is 5 + minutes.
    sleep 240
    linode_api_admin wait-linode-status --linode-label "${BOX_HOSTNAME_FQDN}" --until-status offline
    # Remove the Boot_Config, we do not need this anymore
    linode_api_admin delete-config --linode-label "${BOX_HOSTNAME_FQDN}" --linode-config-label "${LINODE_BOOT_CONFIG_LABEL}"
    # Boot into the new OS
    _echo "Booting into operating system (make sure to unlock LUKS)" --name
    linode_api_admin boot-linode --linode-label "${BOX_HOSTNAME_FQDN}" --linode-config-label "${LINODE_OS_CONFIG_LABEL}"
    _echo "$(msg cyan)Checking if dropbear port ${DROP_BEAR_PORT} is open from --server ${BOX_HOSTNAME_FQDN} ...$(msg end)" --name
    count=0
    while :; do
      port_status=$(check_server_port "${BOX_HOSTNAME_FQDN}" "${DROP_BEAR_PORT}")
      sleep 1
      ((count++))
      _echo "$(msg yellow) Waiting for dropbear port ${DROP_BEAR_PORT} to be available ...$(msg end)" --start-spin --name
      if [ "${port_status}" -eq 0 ]; then
        _echo "$(msg green)OK, dropbear port ${DROP_BEAR_PORT} is now available. Unlocking encrypted LUKS disk on boot ...$(msg end)" --stop-spin --name
        # Wait 5 seconds
        sleep 5
        ssh_api unlock-luks --port "${DROP_BEAR_PORT}" --password "${LUKS_PASS}"
        break
      fi
      if [ "${count}" -gt 60 ]; then
        _echo "$(msg red)Error, failed to detect drop bear port ${DROP_BEAR_PORT} because the port is closed. Please inspect this manually (make sure firewall is not blocking this port)!$(msg end)" --name
        _exit 1
      fi
    done

    _echo "$(msg cyan)Copying maxinet and maxinet.conf script into remote server ... $(msg end)" --name
    ssh_api transfer-files --server-port "${BOX_HOSTNAME_FQDN}:${SSH_PORT}" --group-user "root:${ROOT_USERNAME}" --local-files "${SCRIPT_PATH}/maxinet ${SCRIPT_PATH}/maxinet.conf" --remote-path ~/
    sleep 2

    if [ "${PRE_AUTORUN_SETUP}" == "no" ]; then
      _echo "$(msg cyan) Warning, PRE_AUTORUN_SETUP is set to no. Hence, auto installation script is disabled! Please run --setup manually$(msg end)" --name
      linode_api_admin shutdown-linode --linode-label "${BOX_HOSTNAME_FQDN}"
      _exit 0
    fi

    _echo "$(msg cyan)Setup will automatically execute remote maxinet script and start installation of the server ... (it might take some time) ...$(msg end)" -name
    # ssh_api push-script --server ${BOX_HOSTNAME_FQDN} --port ${SSH_PORT} --group root --username ${ROOT_USERNAME} --local-script-path "${CODE_PATH}/ssh_scripts/maxinet_setup.sh"
    ssh_api push-script --server-port "${BOX_HOSTNAME_FQDN}:${SSH_PORT}" --group-user "root:${ROOT_USERNAME}" --local-script-path "${CODE_PATH}/ssh_scripts/maxinet_setup.sh"
    # After installation above, the system must restart once, so we execute next script to reopen LUKS

    # After the above script is executed, now we wait for it to shutdown (executed by the script installation) properly before booting
    linode_api_admin wait-linode-status --linode-label "${BOX_HOSTNAME_FQDN}" --until-status offline

    _echo "$(msg cyan)Booting into operating system (LUKS console might be appeared and unlocked automatically) ...$(msg end)" --name
    linode_api_admin reboot-linode --linode-label "${BOX_HOSTNAME_FQDN}" --linode-config-label "${LINODE_OS_CONFIG_LABEL}"
    # check server and port if available in order to auto unlock it
    _echo "$(msg cyan)Checking if dropbear port ${DROP_BEAR_PORT} is open from --server ${BOX_HOSTNAME_FQDN} ...$(msg end)" --name
    count=0
    while :; do
      port_status=$(check_server_port "${BOX_HOSTNAME_FQDN}" "${DROP_BEAR_PORT}")
      sleep 1
      ((count++))
      _echo "$(msg yellow) Waiting for dropbear port ${DROP_BEAR_PORT} to be available ...$(msg end)" --start-spin --name
      if [ "${port_status}" -eq 0 ]; then
        _echo "$(msg green)OK, dropbear port ${DROP_BEAR_PORT} is now available. Unlocking encrypted LUKS disk on boot ...$(msg end)" --stop-spin --name
        # Wait 5 seconds
        sleep 5
        ssh_api unlock-luks --port "${DROP_BEAR_PORT}" --password "${LUKS_PASS}"
        break
      fi
      if [ "${count}" -gt 60 ]; then
        _echo "$(msg red)Error, failed to detect drop bear port ${DROP_BEAR_PORT} because the port is closed. Please inspect this manually (make sure firewall is not blocking this port)!$(msg end)" --name
        _exit 1
      fi
    done
    if [ "${PRE_AUTORUN_SETUP}" == "no" ]; then
      _echo "$(msg cyan) Notice, PRE_AUTORUN_SETUP is set to no. Hence, auto installation script is disabled! Please run --setup manually$(msg end)" --name
    else
      _echo "$(msg cyan)Resuming server installation installation by executing ${SCRIPT_NAME} script on remote server...$(msg end)" --name
      ssh_api push-script --server-port "${BOX_HOSTNAME_FQDN}:${SSH_PORT}" --group-user "root:${ROOT_USERNAME}" --local-script-path "${CODE_PATH}/ssh_scripts/maxinet_setup.sh"
    fi
    echo ""
    _echo "$(msg green)======================== FINISH ========================$(msg end)" --plain
  elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then
    :
  elif [ "${DNS_PROVIDER_NAME}" == "amazonaws" ]; then
    :
  elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
    :
  fi
}

# This function will check if defined server and port is available (in a listening state)
# Usage: check_server_port <server> <port>
# eg: check_server_port test.sofibox.com 22
# It will return 0 (if available), and other return codes (if listening state for the port is not available)
function check_server_port() {
  local server port result
  server="$1"
  port="$2"
  nc -z -v -w5 "${server}" "${port}" >/dev/null
  result=$?
  echo "${result}"
}
# This function is used to manage SSH key (create, get, copy)
# Usage: ssh_api create-key|create-key-with-putty| copy-pubkeys <group_name> <user> <comment>
# Note 1: create-key will create normal ssh key
# Note 2: create-key-with-putty will create ssh key with putty format
# eg: ssh_api create-key-with-putty --group-name admin --username maxi32 --comment "This is a comment"
# eg: ssh_api get-pubkey --group-name admin --username maxi32
# eg: ssh_api "copy-all-pubkeys"
# eg: ssh_api "clear-known-host"
# group_name = user, admin, root, rescue, backup, os, diradmin ...
function ssh_api() {

  local action argnum options long_opts retval key_path group user comment server_label server port destination rsa_key \
    linode_label local_script_path remote_script_path remote_path push_iso_write_script push_shutdown_script push_reboot_script \
    push_maxinet_setup_script password local_files

  action="$1"

  argnum="$#"
  if [ ${argnum} -eq 0 ]; then
    echo "Error, no argument is supplied. Use [ ${SCRIPT_NAME} --iso --help ] to see the valid options"
    exit 1
  fi
  long_opts="help,key-path:,group:,user:,comment:,server-label:,server:,port:,destination:,without-prompt,rsa-key:,linode-label:, \
  local-script-path:,remote-script-path:,remote-path:,local-files:,push-iso-write-script,push-shutdown-script,push-reboot-script,push-maxinet-setup-script, \
  sp:,server-port:,gu:,group-user:,password:"
  options=$(getopt -o '' --long "${long_opts}" -n "${FUNCNAME[0]} in ${SCRIPT_NAME}" -- "$@")
  retval=$?
  if [ ${retval} != 0 ]; then
    echo "Error, invalid parse data. Terminating..." >&2
    exit 1
  fi

  # Must quote this option variable
  eval set -- "${options}"
  # Can change using --key-path option but this location is best practice
  key_path="${SCRIPT_PATH}/secure/ssh"
  group=""
  user=""
  comment=""
  server_label="${BOX_HOSTNAME_FQDN}" # If not specified, use the default value from config file sun.sofibox.com
  destination="/root/.ssh/"           # If not specified, the default location is /root/.ssh/
  without_prompt=false
  server="${DNS_PROVIDER_TERMINAL_SERVER}" #If not specified default to the lish server from config file eg: singapore-lish.linode.com
  linode_label="${BOX_HOSTNAME_FQDN}"      # If not specified, use the default value from config file sun.sofibox.com
  rsa_key=""
  local_script_path=""
  remote_script_path=""
  remote_path=""
  local_files=""
  push_iso_write_script=false
  push_shutdown_script=false
  push_reboot_script=false
  push_maxinet_setup_script=false
  port="22" #If not specified the default is port 22
  password=""
  while true; do
    case "$1" in
    --help)
      manual "${FUNCNAME[0]}"
      shift
      exit 0
      ;;
    --key-path)
      key_path="$2"
      shift 2
      ;;
    --group)
      group="$2"
      shift 2
      ;;
    --user)
      user="$2"
      shift 2
      ;;
    --comment)
      comment="$2"
      shift 2
      ;;
    --server)
      server="$2"
      # TODO implement check if server is not propagated, we use IP address instead for server
      shift 2
      ;;
    --port)
      port="$2"
      shift 2
      ;;
    --server-label)
      server_label="$2"
      shift 2
      ;;
    --rsa-key)
      rsa_key="$2"
      shift 2
      ;;
    --linode-label)
      linode_label="$2"
      shift 2
      ;;
    --local-script-path)
      local_script_path="$2"
      shift 2
      ;;
    --remote-script-path)
      remote_script_path="$2"
      shift 2
      ;;
    --remote-path)
      remote_path="$2"
      shift 2
      ;;
    --local-files)
      local_files="$2"
      shift 2
      ;;
    # This one we can combine server:port
    --sp | --server-port)
      server_port="$2"
      server=$(echo "${server_port}" | awk -F':' '{ print $1 }')
      port=$(echo "${server_port}" | awk -F':' '{ print $2 }')
      shift 2
      ;;
    # This one we can combine group:user
    --gu | --group-user)
      group_user="$2"
      group=$(echo "${group_user}" | awk -F':' '{ print $1 }')
      user=$(echo "${group_user}" | awk -F':' '{ print $2 }')
      shift 2
      ;;
    --without-prompt)
      without_prompt=true
      shift
      ;;
    --push-iso-write-script)
      push_iso_write_script=true
      if [[ "${push_shutdown_script}" == "true" || "${push_reboot_script}" == "true" || "${push_maxinet_setup_script}" == "true" ]]; then
        _echo "$(msg red)Error, only one push script can be called at one time!$(msg end)" --name --verbose 3
        _exit 147
      fi
      shift
      ;;
    --push-shutdown-script)
      push_shutdown_script=true
      if [[ "${push_iso_write_script}" == "true" || "${push_reboot_script}" == "true" || "${push_maxinet_setup_script}" == "true" ]]; then
        _echo "$(msg red)Error, only one push script can be called at one time!$(msg end)" --name --verbose 3
        _exit 147
      fi
      shift
      ;;
    --push-reboot-script)
      push_reboot_script=true
      if [[ "${push_iso_write_script}" == "true" || "${push_shutdown_script}" == "true" || "${push_maxinet_setup_script}" == "true" ]]; then
        _echo "$(msg red)Error, only one push script can be called at one time!$(msg end)" --name --verbose 3
        _exit 147
      fi
      shift
      ;;
    --push-maxinet-setup-script)
      push_maxinet_setup_script=true
      if [[ "${push_iso_write_script}" == "true" || "${push_shutdown_script}" == "true" || "${push_reboot_script}" == "true" ]]; then
        _echo "$(msg red)Error, only one push script can be called at one time!$(msg end)" --name --verbose 3
        _exit 147
      fi
      shift
      ;;
    --password)
      password="$2"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
    esac
  done
  # ssh_api login --server sun.sofibox.com --port 893 --group root --user root
  # This is equivalent to the above:
  # ssh_api login -sp sun.sofibox.com:893 --gu root:root

  # Special login short form
  # ssh_api login root
  # ssh_api login my_ssh_user
  # ssh_api push-script

  if [[ "${action}" == "transfer-files" || "${action}" == "transfer-file" || "${action}" == "file-transfer" || "${action}" == "files-transfer" ]]; then
    # ssh_api transfer-files/file-transfer/transfer-file --server-port ${BOX_HOSTNAME_FQDN}:${SSH_PORT} --group-user root:${ROOT_USERNAME} --local-files "/tmp/file1 /var/file2" --remote-path ~/
    #ssh_api transfer-files/file-transfer/transfer-file --server ${BOX_HOSTNAME_FQDN} ---port ${SSH_PORT} --group root --user ${ROOT_USERNAME} --local-files "/tmp/file1 /var/file2" --remote-path ~/
    install_required "apt:sshpass"
    local private_key_name private_key_file

    if [ -z "${rsa_key}" ]; then
      private_key_name="${group}_${user}_${server}.id_rsa"
      private_key_file="${key_path}/${private_key_name}"
      rsa_key="${private_key_file}"
    fi

    # Do not quote local_path to enable multiple file transfers
    _echo "$(msg cyan)Transferring file local files(s) [ ${local_files} ] into remote SSH ${remote_path} ...$(msg end)" --name
    scp -o "StrictHostKeyChecking no" -P "${port}" -i "${rsa_key}" ${local_files} "${user}@${server}:${remote_path}" 2> >(grep -v 'Permanently' 1>&2)

    # ssh_api luks-unlock --port 8922 --password 1234
    # or without argument ssh_api luks-unlock (it will get the default values from config file)
    # This function is used to unlock LUKS disk encryption on boot via terminal
    # Usage: ssh_api luks-unlock --port <drop_bear_port> --password <disk_luks_password>
    # Note 1: The drop_bear_port is setup using dropbear-initramfs (This is set in OS preseed-file and config file)
    # Note 2: The disk_luks_password is the OS LUKS encryption password (This is set in OS preseed-file and config file)
    # Note 3: The unlock method required a port and a password. It will use a normal SSH with certificate (Certificate is set in OS preseed-file)
    # Note 4: After it has successfully logged into the system via SSH, we write the disk_luks_password using this code and the OS will automatically unlock it: "echo -ne \"${pass}\" > /lib/cryptsetup/passfifo"
    # eg calling within code: ssh_api luks-unlock --port 8922 --password 1234
    # eg calling outside code: <script_name> --ssh-luks-unlock --port 8922 --password 1234
    # Guide: https://www.arminpech.de/2019/12/23/debian-unlock-luks-root-partition-remotely-by-ssh-using-dropbear/
    # Guide 2: https://www.gandalfk7.it/posts/20200914_02_Debian_9_and_10_boot_luks_unlock/
  elif [[ "${action}" == "luks-unlock" || "${action}" == "ssh-luks-unlock" || "${action}" == "unlock-luks" ]]; then
    option="$2"

    if [ -z "${option}" ]; then
      linode_label="${BOX_HOSTNAME_FQDN}"
      port="${DROP_BEAR_PORT}"
      password="${LUKS_PASS}"
    fi

    if [ -z "${rsa_key}" ]; then
      private_key_name="root_${ROOT_USERNAME}_${linode_label}.id_rsa"
      private_key_file="${key_path}/${private_key_name}"
      rsa_key="${private_key_file}"
    fi

    _echo "$(msg cyan)Unlocking LUKS encrypted disk on boot using port ${port} and password ${password} ... $(msg end)" --name
    if [ -f "${rsa_key}" ]; then
      _echo "$(msg cyan)Connecting to ssh with port ${port} to unlock LUKS encrypted disk on boot ...$(msg end)" --name
      # Do not use -q, need verbose for this connection to debug error
      ssh -o "StrictHostKeyChecking no" -oAddressFamily=inet -p "${port}" -i "${rsa_key}" "${linode_label}" "echo -ne \"${password}\" > /lib/cryptsetup/passfifo" 2> >(grep -v 'Permanently added' 1>&2)
      retval=$?
      if [ ${retval} -eq 0 ]; then
        _echo "$(msg green)Success, LUKS unlocked return ok status$(msg end)" --name
      else
        _echo "$(msg yellow)Warning, LUKS unlocked return with code ${retval}$(msg end)" --name
      fi
    else
      _echo "$(msg red)Error, private key ${rsa_key} does not exist!$(msg end)" --name --verbose 3
      _exit 147
    fi

  elif [ "${action}" == "login" ]; then
    local user ssh_pid private_key_name private_key_file
    user="$2"
    # This is special login based on user from config file (for faster login)
    if [ "${user}" == "${ROOT_USERNAME}" ]; then
      private_key_name="root_${ROOT_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa"
      private_key_file="${key_path}/${private_key_name}"
      rsa_key="${private_key_file}"
      _echo "$(msg cyan)Checking whether ${BOX_HOSTNAME_FQDN}'s port ${SSH_PORT} is online ...$(msg end)" --name
      port_status=$(check_server_port "${BOX_HOSTNAME_FQDN}" "${SSH_PORT}")
      if [ "${port_status}" -ne 0 ]; then
        _echo "$(msg red)Error, the --server-port ${BOX_HOSTNAME_FQDN}:${SSH_PORT} is not available (make sure server is online or port ${SSH_PORT} is available)$(msg end)" --name
        _exit 147
      fi
      _echo "$(msg cyan)Logging into SSH server at ${ROOT_USERNAME}@${BOX_HOSTNAME_FQDN}:${SSH_PORT}... $(msg end)" --name
      ssh -o "StrictHostKeyChecking no" -i "${rsa_key}" -p "${SSH_PORT}" "${ROOT_USERNAME}${BOX_HOSTNAME_FQDN}"
    elif [ "${user}" == "${SSH_USERNAME}" ]; then
      private_key_name="user_${SSH_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa"
      private_key_file="${key_path}/${private_key_name}"
      rsa_key="${private_key_file}"
      _echo "$(msg cyan)Checking whether ${BOX_HOSTNAME_FQDN}'s port ${SSH_PORT} is online ...$(msg end)" --name
      port_status=$(check_server_port "${BOX_HOSTNAME_FQDN}" "${SSH_PORT}")
      if [ "${port_status}" -ne 0 ]; then
        _echo "$(msg red)Error, the --server-port ${BOX_HOSTNAME_FQDN}:${SSH_PORT} is not available (make sure server is online or port ${SSH_PORT} is available)$(msg end)" --name
        _exit 147
      fi
      _echo "$(msg cyan)Logging into SSH server at ${SSH_USERNAME}@${BOX_HOSTNAME_FQDN}:${SSH_PORT}... $(msg end)" --name
      ssh -o "StrictHostKeyChecking no" -i "${rsa_key}" -p "${SSH_PORT}" "${SSH_USERNAME}${BOX_HOSTNAME_FQDN}"
    else
      if [[ -z "${group}" ]]; then
        _echo "$(msg red)Error, the option --group is required to have value$(msg end)" --name
        _exit 147
      elif [[ -z "${user}" ]]; then
        _echo "$(msg red)Error, the option --user is required to have value$(msg end)" --name
        _exit 147
      elif [[ -z "${server}" ]]; then
        _echo "$(msg red)Error, the option --server is required to have value$(msg end)" --name
        _exit 147
      elif [[ -z "${port}" ]]; then
        _echo "$(msg red)Error, the option --port is required to have value$(msg end)" --name
        _exit 147
      fi
      _echo "$(msg cyan)Checking whether ${server}'s port ${port} is online ...$(msg end)" --name
      port_status=$(check_server_port "${server}" "${port}")
      if [ "${port_status}" -ne 0 ]; then
        _echo "$(msg red)Error, the --server-port ${server}:${port} is not available (make sure server is online or port ${port} is not blocked by firewall$(msg end)" --name
        _exit 147
      fi
      if [ -z "${rsa_key}" ]; then
        private_key_name="${group}_${user}_${server}.id_rsa"
        private_key_file="${key_path}/${private_key_name}"
        rsa_key="${private_key_file}"
      fi

      if [ ! -f "${rsa_key}" ]; then
        _echo "$(msg red)Error, invalid public RSA key file at ${rsa_key}. Please make sure the file exist$(msg end)" --name --verbose 3
        _exit 147
      fi

      _echo "$(msg cyan)Logging into SSH server at ${user}@${server}:${port}... $(msg end)" --name
      ssh -o "StrictHostKeyChecking no" -i "${rsa_key}" -p "${port}" "${user}${server}"
      #ssh_pid=$?
      #{ kill -9 ${ssh_pid} && wait ${ssh_pid}; } 2>/dev/null
    fi
  # For linode LISH login
  # ssh_api lish-login --key /root/.ssh/linode_lish.id_rsa --user maxibi --server lish-singapore.linode.com --port 22 --linode-label sun.sofibox.com
  elif [ "${action}" == "lish-login" ]; then
    local ssh_pid
    # This is not a normal SSH (it uses Pseudo-TTY)
    # Normal: ssh_api lish-login
    if [ -z "${rsa_key}" ]; then
      rsa_key="/root/.ssh/linode_lish.id_rsa"
    fi

    if [ -z "${user}" ]; then
      user="${DNS_PROVIDER_USER}"
    fi

    if [ ! -f "${rsa_key}" ]; then
      _echo "$(msg red)Error, invalid RSA key file at ${rsa_key}. Please make sure the file exist$(msg end)" --name --verbose 3
      _exit 147
    fi

    _echo "$(msg cyan)Logging into lish console ${user}@${server}... $(msg end)" --name
    # In Windows WSL linux, there will be error log saying: setsockopt IPV6_TCLASS 16: Operation not permitted: (this message can be ignored)
    # Note 2 linode lish requires to use -t option to login. -t option means pseudo-tty (some suggested to use double -tt)
    ssh -o "StrictHostKeyChecking no" -i "${rsa_key}" -p "${port}" -tt "${user}@${server}" "${linode_label}"
    ssh_pid=$?
    { kill -9 ${ssh_pid} && wait ${ssh_pid}; } 2>/dev/null

  # For SSH push script
  elif [ "${action}" == "push-script" ]; then
    local private_key_name private_key_file ssh_pid
    # ssh_api push-script --server ${BOX_HOSTNAME_FQDN} --port ${SSH_PORT} --group root --user ${ROOT_USERNAME} --local-script-path "${CODE_PATH}/ssh_scripts/maxinet_setup.sh"
    # The above is equivalent to below (shortest form)
    # ssh_api push-script --server-port sun.sofibox.com:893 --group-user root:root --push-maxinet-setup-script

    if [[ -z "${group}" ]]; then
      _echo "$(msg red)Error, the option --group is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${user}" ]]; then
      _echo "$(msg red)Error, the option --user is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${server}" ]]; then
      _echo "$(msg red)Error, the option --server is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${port}" ]]; then
      _echo "$(msg red)Error, the option --port is required to have value$(msg end)" --name
      _exit 147
    fi

    if [ -z "${rsa_key}" ]; then
      private_key_name="${group}_${user}_${server}.id_rsa"
      private_key_file="${key_path}/${private_key_name}"
      rsa_key="${private_key_file}"
    fi

    if [ ! -f "${rsa_key}" ]; then
      _echo "$(msg red)Error, invalid public RSA key file at ${rsa_key}. Please make sure the file exist$(msg end)" --name --verbose 3
      _exit 147
    fi

    # Shortest form
    if [ -z "${local_script_path}" ]; then
      if [ "${push_maxinet_setup_script}" == "true" ]; then
        local_script_path="${CODE_PATH}/ssh_scripts/maxinet_setup.sh"
      elif [ "${push_shutdown_script}" == "true" ]; then
        # This script can be used as normal SSH
        local_script_path="${CODE_PATH}/ssh_scripts/shutdown_command.sh"
      elif [ "${push_reboot_script}" == "true" ]; then
        # This script can be used as normal SSH
        local_script_path="${CODE_PATH}/ssh_scripts/reboot_command.sh"
      else
        _echo "$(msg red)Error. the option --local-script-path requires to have a valid script path to be pushed into SSH server or use predefined push script option such as --push-shutdown-script$(msg end)" --name --verbose 3
      fi
    fi

    _echo "$(msg cyan)Pushing script ${local_script_path} into SSH console ${user}@${server}... $(msg end)" --nam
    ssh -q -o "StrictHostKeyChecking no" -i "${rsa_key}" -p "${port}" "${user}@${server}" <"${local_script_path}" >/dev/null 2>&1 &
    # Test kill after 10 seconds
    #sleep 10
    #ssh_pid=$?
    #{ kill -9 ${ssh_pid} && wait ${ssh_pid}; } 2>/dev/null
    # For linode LISH push script
    # Note that lish-push-script only can be used on recovery mode because in recovery mode, it doesn't have authentication.
  elif [ "${action}" == "lish-push-script" ]; then
    local ssh_pid

    if [ -z "${rsa_key}" ]; then
      rsa_key="${SECURE_PATH}/ssh/linode_lish.id_rsa"
    fi

    if [ -z "${user}" ]; then
      user="${DNS_PROVIDER_USER}"
    fi

    if [ ! -f "${rsa_key}" ]; then
      _echo "$(msg red)Error, invalid RSA key file at ${rsa_key}. Please make sure the file exist$(msg end)" --name --verbose 3
      _exit 147
    fi

    #Shortest form
    # if dont specify local_script_path, i can specify option such as --push-os-write, --push-shutdown, --push-reboot
    if [ -z "${local_script_path}" ]; then
      if [ "${push_iso_write_script}" == "true" ]; then
        # This is dangerous script that can wipe partition
        local_script_path="${CODE_PATH}/ssh_scripts/os_write_ag.sh"
      elif [ "${push_shutdown_script}" == "true" ]; then
        local_script_path="${CODE_PATH}/ssh_scripts/shutdown_command.sh"
      elif [ "${push_reboot_script}" == "true" ]; then
        local_script_path="${CODE_PATH}/ssh_scripts/reboot_command.sh"
      else
        _echo "$(msg red)Error. the option --local-script-path requires to have a valid script path to be pushed into SSH server or use predefined push script option such as --push-shutdown-script$(msg end)" --name --verbose 3
      fi
    fi

    _echo "$(msg cyan)Pushing script ${local_script_path} into lish console ${user}@${server}... $(msg end)" --name
    #ssh -q -o "StrictHostKeyChecking no" -i /root/.ssh/linode_lish.id_rsa -tt "${DNS_PROVIDER_USER}@${DNS_PROVIDER_TERMINAL_SERVER}" "${BOX_HOSTNAME_FQDN}" <"${SCRIPT_PATH}/dns/linode/os_write.sh" >/dev/null 2>&1 &

    # push script: ssh_api lish-push-script --key rsa_key.id.rsa --user maxibi --server member.linode.com --linode-label sun.sofibox.com --local-script-path /tmp/os_write.sh
    ssh -o "StrictHostKeyChecking no" -i "${rsa_key}" -p "${port}" -tt "${user}@${server}" "${linode_label}" <"${local_script_path}" >/dev/null 2>&1 &
    #ssh_pid=$?
    # Test kill after 10 seconds
    #sleep 10

    #{ kill -9 ${ssh_pid} && wait ${ssh_pid}; } 2>/dev/null
  elif [ "${action}" == "create-key" ]; then

    local private_key_name
    mkdir -p "${key_path}"
    if [[ -z "${group}" ]]; then
      _echo "$(msg red)Error, the option --group is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${user}" ]]; then
      _echo "$(msg red)Error, the option --user is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${server_label}" ]]; then
      _echo "$(msg red)Error, the option --server-label is required to have value$(msg end)" --name
      _exit 147
    else
      private_key_name="${group}_${user}_${server_label}.id_rsa"

    fi
    _echo "$(msg cyan)Creating private and public key RSA SSH key authentication at ${key_path}/${private_key_name} ...$(msg end)" --name
    ssh-keygen -f "${key_path}/${private_key_name}" -t rsa -b 4096 -P "" -C "${comment}" <<<y
  elif [ "${action}" == "create-key-with-putty" ]; then
    local private_key_name private_key_putty_name
    mkdir -p "${key_path}"
    if [[ -z "${group}" ]]; then
      _echo "$(msg red)Error, the option --group is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${user}" ]]; then
      _echo "$(msg red)Error, the option --user is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${server_label}" ]]; then
      _echo "$(msg red)Error, the option --server-label is required to have value$(msg end)" --name
      _exit 147
    else
      private_key_name="${group}_${user}_${server_label}.id_rsa"
      private_key_putty_name="${group}_${user}_${server_label}.ppk"
    fi
    _echo "$(msg cyan)Creating private and public key RSA SSH key authentication at ${key_path}/${private_key_name} ...$(msg end)" --name
    ssh-keygen -f "${key_path}/${private_key_name}" -t rsa -b 4096 -P "" -C "${comment}" <<<y
    echo ""
    _echo "$(msg cyan)Creating RSA SSH key authentication for Putty at ${key_path}/${private_key_putty_name} ...$(msg end)" --name
    install_required "apt:putty-tools"
    puttygen "${key_path}/${private_key_name}" -o "${key_path}/${private_key_putty_name}"
  elif [[ "${action}" == "get-pubkey" || "${action}" == "get-public-key" ]]; then
    local public_key_name public_key_file
    if [[ -z "${group}" ]]; then
      _echo "$(msg red)Error, the option --group is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${user}" ]]; then
      _echo "$(msg red)Error, the option --user is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${server_label}" ]]; then
      _echo "$(msg red)Error, the option --server-label is required to have value$(msg end)" --name
      _exit 147
    else
      public_key_name="${group}_${user}_${server_label}.id_rsa.pub"
      public_key_file="${key_path}/${public_key_name}"
    fi

    if [ -f "${public_key_file}" ]; then
      cat "${public_key_file}"
      return 0
    else
      _echo "$(msg red)Error, RSA public key does not exist in ${public_key_file}. Please create it first$(msg end)" --name --verbose 3
      return 147
    fi
  elif [[ "${action}" == "get-prikey" || "${action}" == "get-private-key" ]]; then
    local private_key_name private_key_file
    if [[ -z "${group}" ]]; then
      _echo "$(msg red)Error, the option --group is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${user}" ]]; then
      _echo "$(msg red)Error, the option --user is required to have value$(msg end)" --name
      _exit 147
    elif [[ -z "${server_label}" ]]; then
      _echo "$(msg red)Error, the option --server-label is required to have value$(msg end)" --name
      _exit 147
    else
      private_key_name="${group}_${user}_${server_label}.id_rsa"
      private_key_file="${key_path}/${private_key_name}"
    fi
    if [ -f "${private_key_file}" ]; then
      cat "${private_key_file}"
      return 0
    else
      _echo "$(msg red)Error, RSA private key does not exist in ${private_key_file}. Please create it first$(msg end)" --name --verbose 3
      return 147
    fi

    # Warning this will replace existing key

    # ssh_api copy-public-keys --destination /root/.ssh/
  elif [[ "${action}" == "copy-pubkeys" || "${action}" == "copy-publickeys" || "${action}" == "copy-public-keys" ]]; then
    local response retval
    if [ "${without_prompt}" == "true" ]; then
      _echo "$(msg cyan)Resetting known_hosts and copying all public key to /root/.ssh/* ...$(msg end)" --name
      echo >/root/.ssh/known_hosts
      cp "${key_path}"/*.id_rsa* /root/.ssh/
      chmod -R 600 /root/.ssh/
    else
      read -r -p "This will replace existing public key files (except putty format) from ${key_path} into /root/.ssh/. Are you sure? [Y/n]" response
      response=$(echo "${response}" | tr '[:upper:]' '[:lower:]')
      if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
        _echo "$(msg cyan)Resetting known_hosts and copying all public key to /root/.ssh/* ...$(msg end)" --name
        echo >/root/.ssh/known_hosts
        cp "${key_path}"/*.id_rsa* /root/.ssh/
        chmod -R 600 /root/.ssh/
      else
        _echo "$(msg red)Operation aborted by user!$(msg end)" --name
        _exit 147
      fi
    fi

  elif [[ "${action}" == "clear-known-hosts" || "${action}" == "clear-known-host" ]]; then
    _echo "$(msg cyan)Resetting known_hosts and copying all public key .id_rsa from ${key_path}/ to /root/.ssh/* ...$(msg end)" --name
    echo >/root/.ssh/known_hosts
  else
    _echo "$(msg red)Error, unknown action ${action} argument specified when calling ssh_api function!$(msg end)" --name --verbose 3
    return 147
  fi
}
#maxinet lish-console <options>

#maxinet lish-console kill - kill stuck screen sessions
#maxinet lish-console exit - exit from lish
#maxinet lish-console help - this menu
#maxinet lish-console [return] - connect to console
#maxinet lish-console boot - boot last used (or the only) config profile
#maxinet lish-console boot N - boot the specified config profile. Where N is the profile number assigned as: N) Config Name
#maxinet lish-console reboot - shut down, then boot the last used config profile
#maxinet lish-console reboot N - shut down, then boot the specified config profile. Where N is the profile number assigned as: N) Config Name
#maxinet lish-console sysrq X - send SysRq X to your Linode. Where X is the sysrq code that can be found here: https://en.wikipedia.org/wiki/Magic_SysRq_key#Commands
#maxinet lish-console shutdown - shut down the Linode
#maxinet lish-console destroy - pulls the plug on a running Linode, no fs sync, no warning
#maxinet lish-console jobs - view the job queue for your Linode
#maxinet lish-console version - display running kernel version
#maxinet lish-console configs - view the configuration profiles for your Linode
#maxinet lish-console config N - view configuration profile details for profile N
#maxinet lish-console status - view the status of your Linode
#maxinet lish-console logview - view contents of console log

function lish_console() {
  #exec_time start lish_console
  options="$*"
  # If we do not give value for option, it means we are using the return signal (means connect to console)
  if [ -z "${options}" ]; then
    _echo "$(msg cyan)Executing lish-console command [ RETURN - connect to console] ...$(msg end)" --name
  else
    _echo "$(msg cyan)Executing lish-console command [ ${options} ] ...$(msg end)" --name
  fi
  # Only run this in local machine
  # This will list out the number of lish config profile for OS_Config (currently this has bug in linode because it took longer to list out and has duplicated Rescue Mode entry)
  # Sent question to ticket waiting for answer to speedup this one
  #maxinet --lish configs 2>&1 | grep 'OS_Config' | awk -F')' '{ print $1 }' | xargs
  # I use 2>&1 to hide error output
  ssh -i "${SECURE_PATH}/ssh/linode_lish.id_rsa" -o "StrictHostKeyChecking no" -oAddressFamily=inet -tt "${DNS_PROVIDER_USER}@${DNS_PROVIDER_TERMINAL_SERVER}" "${BOX_HOSTNAME_FQDN}" ${options}
  #exec_time end lish_console
}
# This function is going to be deprecated. It will be combined in ssh_api
# This function is used to login into server (SSH login)
# It can be supplied with script and run in silent/noisy mode
# Usage: ssh_login "<server>:<port>" "<group>:<user>" <silent> optional_script_path>
# eg: ssh_login test.sofibox.com:897 root:root silent/noisy /path_to_script
# eg2: ssh_login test.sofibox.com:897 root:root /path_to_script
# eg3: ssh_login test.sofibox.com:897 root:root
# eg4: ssh_login test.sofibox.com:897 root:root "noisy"
function ssh_login() {
  #exec_time start "${FUNCNAME[0]}"
  if [ -z "$1" ]; then
    _echo def ""
    _echo yellow "Usage: ssh_login sun.sofibox.com:port group:user optional_silent_mode optional_script"
    _echo yellow "eg: ssh_login sun.sofibox.com:897 root:root silent /path_to_script.sh"
    _echo def ""
    _exit 1
  fi
  # For LUKS:  ssh -o "StrictHostKeyChecking no" -q -p 2222 -i "/root/.ssh/root_sun.sofibox.com.id_rsa" "sun.sofibox.com" "echo -ne \"abma892\" > /lib/cryptsetup/passfifo"
  #shift
  install_required "apt:sshpass"
  local server_port group_user script mode hostname_fqdn host_port ssh_group ssh_user
  server_port="$1"
  group_user="$2"
  mode="$3"

  if [[ "${mode}" == "silent" || "${mode}" == "noisy" ]]; then
    script="$4"
  else
    mode="noisy"
    script="$3"
  fi

  hostname_fqdn=$(echo "${server_port}" | awk -F':' '{ print $1 }')
  host_port=$(echo "${server_port}" | awk -F':' '{ print $2 }')
  ssh_group=$(echo "${group_user}" | awk -F':' '{ print $1 }')
  ssh_user=$(echo "${group_user}" | awk -F':' '{ print $2 }')

  # Remove all known hosts (reset)
  echo >/root/.ssh/known_hosts
  # Copying all ssh public keys into /root/.ssh/
  cp "${SCRIPT_PATH}"/secure/ssh/*.id_rsa* /root/.ssh/
  # Make sure they have 600 permission
  chmod -R 600 /root/.ssh/
  if [ "${ssh_user}" == "root" ]; then
    :
  else
    ssh_user_append="${ssh_user}@"
  fi
  _echo def "Connecting to ${hostname_fqdn} using port ${host_port} with private key ${ssh_group}_${ssh_user}_${BOX_HOSTNAME_FQDN}.id_rsa ..."
  if [[ -n "${script}" && "${mode}" == "silent" ]]; then
    #echo "Script given and it's quite mod"
    ssh -q -o "StrictHostKeyChecking no" -p "${host_port}" -i "/root/.ssh/${ssh_group}_${ssh_user}_${BOX_HOSTNAME_FQDN}.id_rsa" "${IPV4_ADD0}" /dev/null <"${script}" 2>&1 &
  elif [[ "${mode}" == "noisy" && -n "${script}" ]]; then
    # echo "script given but not quite mode"
    ssh -o "StrictHostKeyChecking no" -p "${host_port}" -i "/root/.ssh/${ssh_group}_${ssh_user}_${BOX_HOSTNAME_FQDN}.id_rsa" "${IPV4_ADD0}" <"${script}"
  elif [[ "${mode}" == "silent" && -z "${script}" ]]; then
    #echo "Script not given but it's quite mode"
    ssh -q -o "StrictHostKeyChecking no" -p "${host_port}" -i "/root/.ssh/${ssh_group}_${ssh_user}_${BOX_HOSTNAME_FQDN}.id_rsa" "${IPV4_ADD0}"
  elif [[ "${mode}" == "noisy" && -z "${script}" ]]; then
    #echo "Script not given and no quite mod"
    ssh -o "StrictHostKeyChecking no" -p "${host_port}" -i "/root/.ssh/${ssh_group}_${ssh_user}_${BOX_HOSTNAME_FQDN}.id_rsa" "${ssh_user_append}${IPV4_ADD0}"
  fi
  #exec_time end "${FUNCNAME[0]}"
}

# This function will validate if config is valid, if one of the variables missing, it will complain and exit
function validate_config() {
  local count_user total_valid_user this_da_owner_uname
  echo "[${SCRIPT_NAME}]: Checking DA users configuration ... " 2>&1 | tee -a "${REPORT_FILE}"
  total_valid_user=0
  # Owner not support multiple users yet so checking is simple without loop
  typeset -n "this_da_owner_uname"="DA_OWNER_USERNAME1"
  typeset -n "this_da_owner_password"="DA_OWNER_USERPASS1"
  typeset -n "this_da_owner_name"="DA_OWNER_NAME1"
  typeset -n "this_da_owner_system_email"="DA_OWNER_SYSTEM_EMAIL1"
  typeset -n "this_da_owner_security_q"="DA_OWNER_SECURITY_Q1"
  typeset -n "this_da_owner_security_a"="DA_OWNER_SECURITY_A1"

  #if [[ -z "${this_da_owner_uname+x}" ]]; then
  # echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner username is not set. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
  # _exit 1
  if [[ "${#this_da_owner_uname}" -lt 2 ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner username length is ${#this_da_owner_uname} but the minimum should be 2. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ "${#this_da_owner_uname}" -gt ${DA_MAX_UNAME_LENGTH} ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner username length is ${#this_da_owner_uname} but the maximum should be ${DA_MAX_UNAME_LENGTH}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ -z "${this_da_owner_name+x}" ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} doesn't have name set in config file. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ -z "${this_da_owner_password+x}" ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} doesn't have password set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ "${#this_da_owner_password}" -lt 6 ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} has password set length of ${#DA_OWNER_USERPASS1} but the minimum is 6 characters. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ "${#this_da_owner_password}" -gt 64 ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} has password set length of ${#DA_OWNER_USERPASS1} but the maximum is 64 characters. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ "${this_da_owner_password}" =~ ['&+'] ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} has password set with forbidden special character &+ in config file. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ -z "${this_da_owner_system_email+x}" ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} doesn't have system email set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ -z "${this_da_owner_security_q+x}" ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} doesn't have security question set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ -z "${this_da_owner_security_a+x}" ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} doesn't have security answer set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  elif [[ ${#this_da_owner_security_q[@]} -ne ${#this_da_owner_security_a[@]} ]]; then
    echo "[${SCRIPT_NAME}]: [Skipped]: Warning owner ${this_da_owner_uname} has security question and answer defined with different length of array" 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  else
    echo "[${SCRIPT_NAME}]: OK, all variables for owner ${DA_OWNER_USERNAME1} are set." 2>&1 | tee -a "${REPORT_FILE}"
    ((total_valid_user++))
  fi

  # Admin test multiple
  local da_admin_unames da_admin_unames_count this_da_admin_uname this_da_admin_password this_da_admin_name \
    this_da_admin_system_email this_da_admin_security_q this_da_admin_security_a this_da_user_ssl_sub_name

  da_admin_unames="${!DA_ADMIN_USERNAME@}"
  da_admin_unames_count=$(echo "${da_admin_unames}" | wc -w)

  count_user=1
  # Validate admins
  while [[ ${count_user} -le ${da_admin_unames_count} ]]; do
    typeset -n "this_da_admin_uname"="DA_ADMIN_USERNAME${count_user}"
    typeset -n "this_da_admin_password"="DA_ADMIN_USERPASS${count_user}"
    typeset -n "this_da_admin_name"="DA_ADMIN_NAME${count_user}"
    typeset -n "this_da_admin_system_email"="DA_ADMIN_SYSTEM_EMAIL${count_user}"
    typeset -n "this_da_admin_security_q"="DA_ADMIN_SECURITY_Q${count_user}"
    typeset -n "this_da_admin_security_a"="DA_ADMIN_SECURITY_A${count_user}"
    #  if [[ -z "${this_da_admin_uname+x}" ]]; then
    #  echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin username is not set. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
    #  _exit 1
    if [[ "${#this_da_admin_uname}" -lt 2 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin username length is ${#this_da_admin_uname} but the minimum should be 2. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_admin_uname}" -gt ${DA_MAX_UNAME_LENGTH} ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin username length is ${#this_da_admin_uname} but the maximum should be ${DA_MAX_UNAME_LENGTH}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1

    elif [[ -z "${this_da_admin_password+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} doesn't have password set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_admin_password}" -lt 6 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} has password set length of ${#this_da_admin_password} but the minimum is 6 characters. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_admin_password}" -gt 64 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} has password set length of ${#this_da_admin_password} but the maximum is 64 characters. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${this_da_admin_password}" =~ ['&+'] ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} has password set with forbidden special character &+ in config file. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_admin_name+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} doesn't have name set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_admin_system_email+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} doesn't have system email set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_admin_security_q+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} doesn't have security question set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_admin_security_a+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} doesn't have security answer set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ ${#this_da_admin_security_q[@]} -ne ${#this_da_admin_security_a[@]} ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning admin ${this_da_admin_uname} has security question and answer defined with different length of array" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    else
      echo "[${SCRIPT_NAME}]: OK, all variables for admin ${this_da_admin_uname} are set." 2>&1 | tee -a "${REPORT_FILE}"

    fi
    ((count_user++))
    ((total_valid_user++))
  done

  local da_reseller_unames da_reseller_unames_count this_da_reseller_uname this_da_reseller_name this_da_reseller_system_email \
    this_da_reseller_mail_users this_da_reseller_mail_passwords this_da_reseller_domains this_da_reseller_wildcard_domains \
    this_da_reseller_subdomains this_da_reseller_package_name this_da_reseller_enable_domain_ssl this_da_reseller_ssl_sub_name \
    this_da_reseller_security_q this_da_reseller_security_a

  da_reseller_unames="${!DA_RESELLER_USERNAME@}"
  da_reseller_unames_count=$(echo "${da_reseller_unames}" | wc -w)

  count_user=1
  # Validate resellers
  while [[ ${count_user} -le ${da_reseller_unames_count} ]]; do
    typeset -n "this_da_reseller_uname"="DA_RESELLER_USERNAME${count_user}"
    typeset -n "this_da_reseller_password"="DA_RESELLER_USERPASS${count_user}"
    typeset -n "this_da_reseller_name"="DA_RESELLER_NAME${count_user}"
    typeset -n "this_da_reseller_system_email"="DA_RESELLER_SYSTEM_EMAIL${count_user}"
    typeset -n "this_da_reseller_mail_users"="DA_RESELLER_MAIL_USER${count_user}"
    typeset -n "this_da_reseller_mail_passwords"="DA_RESELLER_MAIL_PASSWORD${count_user}"
    typeset -n "this_da_reseller_domains"="DA_RESELLER_DOMAIN${count_user}"
    typeset -n "this_da_reseller_wildcard_domains"="DA_RESELLER_WILDCARD_DOMAIN${count_user}"
    typeset -n "this_da_reseller_subdomains"="DA_RESELLER_SUBDOMAIN${count_user}"
    typeset -n "this_da_reseller_package_name"="DA_RESELLER_PACKAGE_NAME${count_user}"
    typeset -n "this_da_reseller_enable_domain_ssl"="DA_RESELLER_ENABLE_DOMAIN_SSL${count_user}"
    typeset -n "this_da_reseller_ssl_sub_name"="DA_RESELLER_SSL_SUB_NAME${count_user}"
    typeset -n "this_da_reseller_security_q"="DA_RESELLER_SECURITY_Q${count_user}"
    typeset -n "this_da_reseller_security_a"="DA_RESELLER_SECURITY_A${count_user}"
    if [[ "${#this_da_reseller_uname}" -lt 2 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller username length is ${#this_da_reseller_uname} but the minimum should be 2. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_reseller_uname}" -gt ${DA_MAX_UNAME_LENGTH} ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller username length is ${#this_da_reseller_uname} but the maximum should be ${DA_MAX_UNAME_LENGTH}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1

    elif [[ -z "${this_da_reseller_password+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have password set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_reseller_password}" -lt 6 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} has password set length of ${#this_da_reseller_password} but the minimum is 6 characters. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_reseller_password}" -gt 64 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} has password set length of ${#this_da_reseller_password} but the maximum is 64 characters. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${this_da_reseller_password}" =~ ['&+'] ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} has password set with forbidden special character &+ in config file. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_name+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have name set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1

    elif [[ -z "${this_da_reseller_system_email+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have system email set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_mail_users+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have email inbox set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_mail_passwords+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have email password set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
      # Just use a normal variable to check (even it is array)
    elif [[ -z "${this_da_reseller_domains+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have domain set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_wildcard_domains+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have wildcard domain set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_subdomains+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have subdomains set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ $(awk -F':' '{print NF-1}' <<<"${this_da_reseller_subdomains}") -lt 1 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_user_uname} has invalid subdomains format in config file. eg: <domain>:<sub1>+<sub2> ... . Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ $(awk -F':' '{print NF-1}' <<<"${this_da_reseller_subdomains}") -gt 1 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_user_uname} has invalid subdomains format in config file. eg: <domain>:<sub1>+<sub2> ... . Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ ${#this_da_reseller_mail_users[@]} -ne ${#this_da_reseller_mail_passwords[@]} ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} has mail users and mail passwords defined with different length of array" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_package_name+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have package name set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_enable_domain_ssl+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have domain enable ssl set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ $(awk -F':' '{print NF-1}' <<<"${this_da_reseller_ssl_sub_name}") -lt 2 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} has invalid ssl subdomains format in config file. eg: <provider>:<domain>:<sub1>+<sub2> ... . Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ $(awk -F':' '{print NF-1}' <<<"${this_da_reseller_ssl_sub_name}") -gt 2 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} has invalid ssl subdomains format in config file. eg: <provider>:<domain>:<sub1>+<sub2> ... . Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_security_q+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have security question set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_reseller_security_a+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} doesn't have security answer set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ ${#this_da_reseller_security_q[@]} -ne ${#this_da_reseller_security_a[@]} ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning reseller ${this_da_reseller_uname} has security question and answer defined with different length of array" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    else
      echo "[${SCRIPT_NAME}]: OK, all variables for reseller ${this_da_reseller_uname} are set." 2>&1 | tee -a "${REPORT_FILE}"
    fi
    ((count_user++))
    ((total_valid_user++))
  done

  local da_user_unames da_user_count this_da_user_uname this_da_user_password this_da_user_name this_da_user_system_email \
    this_da_user_mail_users this_da_user_mail_passwords this_da_user_domains this_da_user_wildcard_domains this_da_user_subdomains \
    this_da_user_package_name this_da_user_enable_domain_ssl this_da_user_security_q this_da_user_security_a

  da_user_unames="${!DA_USER_USERNAME@}"
  da_user_count=$(echo "${da_user_unames}" | wc -w)

  count_user=1
  # Validate users
  while [[ ${count_user} -le ${da_user_count} ]]; do
    typeset -n "this_da_user_uname"="DA_USER_USERNAME${count_user}"
    typeset -n "this_da_user_password"="DA_USER_USERPASS${count_user}"
    typeset -n "this_da_user_name"="DA_USER_NAME${count_user}"
    typeset -n "this_da_user_system_email"="DA_USER_SYSTEM_EMAIL${count_user}"
    typeset -n "this_da_user_mail_users"="DA_USER_MAIL_USER${count_user}"
    typeset -n "this_da_user_mail_passwords"="DA_USER_MAIL_PASSWORD${count_user}"
    typeset -n "this_da_user_domains"="DA_USER_DOMAIN${count_user}"
    typeset -n "this_da_user_wildcard_domains"="DA_USER_WILDCARD_DOMAIN${count_user}"
    typeset -n "this_da_user_subdomains"="DA_USER_SUBDOMAIN${count_user}"
    typeset -n "this_da_user_package_name"="DA_USER_PACKAGE_NAME${count_user}"
    typeset -n "this_da_user_enable_domain_ssl"="DA_USER_ENABLE_DOMAIN_SSL${count_user}"
    typeset -n "this_da_user_ssl_sub_name"="DA_USER_SSL_SUB_NAME${count_user}"
    typeset -n "this_da_user_security_q"="DA_USER_SECURITY_Q${count_user}"
    typeset -n "this_da_user_security_a"="DA_USER_SECURITY_A${count_user}"
    if [[ "${#this_da_reseller_uname}" -lt 2 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user username length is ${#this_da_user_uname} but the minimum should be 2. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_user_uname}" -gt ${DA_MAX_UNAME_LENGTH} ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user username length is ${#this_da_user_uname} but the maximum should be ${DA_MAX_UNAME_LENGTH}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_password+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have password set in config file. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_user_password}" -lt 6 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has password set length of ${#this_da_user_password} but the minimum is 6 characters. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${#this_da_user_password}" -gt 64 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has password set length of ${#this_da_user_password} but the maximum is 64 characters. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ "${this_da_user_password}" =~ ['&+'] ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has password set with forbidden special character &+ in config file. Please check configuration file" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_name+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have name set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_system_email+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have system email set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_mail_users+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have email inbox set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_mail_passwords+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have email password set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
      # Just use a normal variable to check (even it is array)
    elif [[ -z "${this_da_user_domains+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have domain set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_wildcard_domains+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have wildcard domain set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_subdomains+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have subdomains set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ $(awk -F':' '{print NF-1}' <<<"${this_da_user_subdomains}") -lt 1 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has invalid subdomains format in config file. eg: <domain>:<sub1>+<sub2> ... . Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ $(awk -F':' '{print NF-1}' <<<"${this_da_user_subdomains}") -gt 1 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has invalid subdomains format in config file. eg: <domain>:<sub1>+<sub2> ... . Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ ${#this_da_user_mail_users[@]} -ne ${#this_da_user_mail_passwords[@]} ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has mail users and mail passwords defined with different length of array" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_package_name+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have package name set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_enable_domain_ssl+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have domain enable ssl set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ $(awk -F':' '{print NF-1}' <<<"${this_da_user_ssl_sub_name}") -lt 2 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has invalid ssl subdomains format in config file. eg: <provider>:<domain>:<sub1>+<sub2> ... . Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ $(awk -F':' '{print NF-1}' <<<"${this_da_user_ssl_sub_name}") -gt 2 ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has invalid ssl subdomains format in config file. eg: <provider>:<domain>:<sub1>+<sub2> ... . Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_security_q+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have security question set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ -z "${this_da_user_security_a+x}" ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} doesn't have security answer set in config file. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    elif [[ ${#this_da_user_security_q[@]} -ne ${#this_da_user_security_a[@]} ]]; then
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning user ${this_da_user_uname} has security question and answer defined with different length of array" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 1
    else
      echo "[${SCRIPT_NAME}]: OK, all variables for user ${this_da_user_uname} are set." 2>&1 | tee -a "${REPORT_FILE}"
      ((total_valid_user++))
    fi
    ((count_user++))
  done

  echo "[${SCRIPT_NAME}]: Total user with valid config is: ${total_valid_user}" 2>&1 | tee -a "${REPORT_FILE}"
  #exit 1
}

# This function is used to handle exit trap that can accept multiple trap arguments
# syntax: _traps <trap_clean_function> SIG1 SIG2 SIG3 OTHER_SIG ...
# eg: _traps _trap_cleanup QUIT INT TERM EXIT
function _traps() {
  local clean_func
  clean_func="$1"
  shift
  for sig; do
    # Test each signal from function called
    # shellcheck disable=SC2064
    # include shellcheck disable directive because: https://github.com/koalaman/shellcheck/issues/2131
    trap "${clean_func} ${sig}" "${sig}"
  done
}

# This function is used by _traps function to clean exit
function _trap_cleanup() {
  # The first argument will have the name of the trap signal executed:
  # echo "Trapped: $1"
  ((CTRL_C_COUNT++))
  # Check if the locking directory is exist, if yes, remove it
  if [ -d "${LOCK_DIR}" ]; then
    rm -rf "${LOCK_DIR}"
    echo ""
    echo "[${SCRIPT_NAME}]: OK, locked flag removed from ${LOCK_DIR}"
  fi
  # this if condition will determine that this cleanup function is only called a single time CTRL_C_COUNT=1
  # this function might be called several times because we passed long arguments for trap to call this function
  if [[ ${CTRL_C_COUNT} == 1 ]]; then
    echo ""
    # if the trapped signal is INT (interactive) then we know this is interactive exit executed by a user.
    if [ "$1" == "INT" ]; then
      # so print the current user who terminated this script
      echo "[${SCRIPT_NAME}]: *** Warning, this script has been terminated by user: ${USER}! ***"
    else
      # for other trap signals, we just print out the trap signal
      echo "[${SCRIPT_NAME}]: This script has been terminated with signal: ${1}"
    fi
    echo ""
    echo "-------------------------------END-----------------------------------------"
    echo "Remember you can always resume installation with (--help for more information):"
    echo "For local installation: ${SCRIPT_NAME} --setup"
    echo "For remote installation: ${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"root:${ROOT_USERNAME}\" \"${CODE_PATH}/ssh_scripts/maxinet_setup.sh\""
    echo "To login as root user: ${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"user:root\""
    echo "To login as SSH user: ${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"root:SSH_USERNAME\""
    echo "To unlock LUKS Disk encryption: ${SCRIPT_NAME} --ssh-luks-unlock ${DROP_BEAR_PORT} \"<LUKS_PASS>\""
    script_time
  fi
  # clean exit
  exit 1
}
# This function gets the operating system ID and version number
# syntax: get_linux_os <id|version>
# eg: get_linux_os id | sample output: centos
function get_linux_os() {
  local arg distro_id distro_version
  arg="$1"
  # any new Linux distribution must have this (it is a standard file os checking for linux)
  if [ -e /etc/os-release ]; then
    # get the distro ID from /etc/os-release and make sure it is in lowercase format without any double quotations
    distro_id=$(awk -F= '$1 == "ID" {print $2}' /etc/os-release | LC_ALL=C tr '[:upper:]' '[:lower:]' | tr -d "\"")
    distro_version=$(awk -F= '$1 == "VERSION_ID" {print $2}' /etc/os-release | tr -d "\"")
  # but just in case (a small case) if it doesn't have this then we can use lsb_release command
  elif type lsb_release >/dev/null 2>&1; then
    # get the distro id using lsb_release function.
    # if the ID has uppercase letter, cover it to lowercase
    distro_id=$(lsb_release -si | LC_ALL=C tr '[:upper:]' '[:lower:]')
    distro_version=$(lsb_release -sr)
  # else if that doesn't exist at all, we can use the standard checking version format: "Linux <version>"
  else
    # this will not printout a single distribution ID that we want (it prints out the Generic Linux kernel version)
    # but using this we should terminate this script because we only need single distribution ID (eg: debian)
    distro_id=$(uname -s)
    distro_version=$(uname -r)
  fi
  # return values here with echo
  if [ "${arg}" == "id" ]; then
    echo "${distro_id}"
  elif [ "${arg}" == "version" ]; then
    echo "${distro_version}"
  fi

}

# This will install required component automatically if doesn't exist,
# It will do nothing if the component exist.
# eg: install_required "htop" "vim"

function install_required() {
  local required_cmds missing_count install_success install_failed detect_by distro_id
  required_cmds="$*"
  missing_count=0
  install_success=0
  install_failed=0
  detect_by=""
  # Do not quote the array, we want split elements:
  for install_cmd in ${required_cmds[*]}; do
    #command -v "${required_cmd}" &>/dev/null
    #cmd_status=$?
    required_method=$(echo "${install_cmd}" | awk -F':' '{ print $1 }')
    required_cmd=$(echo "${install_cmd}" | awk -F':' '{ print $2 }')
    #echo "${required_method}"
    #echo "${required_cmd}"
    dpkg_status=$(
      dpkg -s "${required_cmd}" 2>&1 | grep -qF "Status: install ok installed"
      echo $?
    )
    if [[ "${dpkg_status}" -eq 1 ]]; then
      ((missing_count++))

      if [ "${dpkg_status}" -eq 1 ]; then
        detect_by="dpkg_status"
        # elif [ "${cmd_status}" = 1 ]; then
        #   detect_by="cmd_status"
        # elif [[ "${dpkg_status}" == 1 && "${cmd_status}" == 1 ]]; then
        #   detect_by="dpkg_status and cmd_status"
      fi
      echo ""
      echo "Warning, missing ${required_cmd} component detected by ${detect_by}. Installing ${required_cmd} ..."
      if [ "${missing_count}" -eq 1 ]; then
        echo ""
        if [ "${required_method}" == "apt" ]; then

          echo "Running apt-get update for the first missing package ..."
          apt-get -y update
          apt-get -y install "${required_cmd}"
          retval=$?
        elif [ "${required_method}" == "dnf" ]; then
          :
        elif [ "${required_method}" == "make" ]; then
          :
        else
          echo "Invalid required method"
        fi
        echo ""
      fi

      if [[ "${retval}" -eq 0 ]]; then
        ((install_success++))
      else
        ((install_failed++))
      fi
    fi
  done
  if [ "${missing_count}" -gt 0 ]; then
    echo ""
    _echo "$(msg blue)Total missing component: ${missing_count}$(msg end)"
    _echo "$(msg green)Total success component(s) installation: ${install_success}$(msg end)"
    if [ "${install_failed}" -gt 0 ]; then
      _echo "$(msg red)Total failed component(s) installation: ${install_failed}$(msg end)"
    else
      _echo "Total failed component(s) installation: ${install_failed}"
    fi
    echo ""
  fi
}
# This is a random string that will return alphabet character (lower and uppercase)
# syntax: get_rnd_alpha <length>
# eg: get_rnd_alpha 10
function get_rnd_alpha() {
  local length
  length="$1"
  tr -dc A-Za-z </dev/urandom | head -c "${length}"
  echo ''
}
# This function will transform a plain-text password into a hash encrypted password + salt generation which is more secure
# eg: test=$(get_hash_pwd "mypassword")
function get_hash_pwd() {
  local password="$1" sha_pass
  sha_pass=$(mkpasswd -m sha-512 -S "$(pwgen -ns 16 1)" "$1")
  echo "${sha_pass}"
}

# This function will pause the current running terminal
# It will interactively ask to press enter or wait within <duration_in_seconds> to continue the next command
# syntax: _pause <optional_duration>
# eg: _pause | no timeout means we need to press enter to continue
# eg: _pause 10 | wait 10 seconds or press enter to continue
function _pause() {
  echo ""
  local duration=$1
  # If argument is not an integer, we disable read timeout
  # TODO validate this statement again
  if [[ ${duration} =~ ^[0-9]+$ ]]; then
    read -t "${duration}" -r -s -n 1 -p "[${SCRIPT_NAME}]: Press any key or wait within ${duration} second(s) to continue or press (Ctrl+c) to cancel ..." 2>&1 | tee -a "${REPORT_FILE}"
  else
    read -r -s -n 1 -p "[${SCRIPT_NAME}]: Terminal is paused! Press any key to continue or press (Ctrl+c) to cancel ..." 2>&1 | tee -a "${REPORT_FILE}"
  fi
  echo ""
}

# This function will display a confirmation to continue (force continue; no exit function)
function _confirm() {
  # call with a prompt string or use a default
  read -r -p "[${SCRIPT_NAME}]: ${1:-Continue? [y]} " response
  case "$response" in
  [yY][eE][sS] | [yY])
    return 0
    ;;
  *)
    echo "[${SCRIPT_NAME}]: Invalid response to the question!"
    _confirm "$1"
    ;;
  esac
}
# This function is used to terminate a current running script.
# pass the normal exit code
# syntax: _exit <exit_code>
# eg: _exit 3
function _exit() {
  exit "$1"
}

# This function contains string formatting for printing text into terminal (eg: use with echo, printf or my function _echo)
# echo "$(msg -c red)This is red$(msg -c end)"
# echo "$(msg -c red)$(msg -b yellow)This is red with yellow background$(msg end)"
# echo "This is default color but $(msg -c green)this is green$(msg end) and $(msg -m underline)this is underline$(msg end)
# For foreground color and mode, can omit both option -c (color) and -m (mode). For background need to specify -b (background) option
# eg: echo "$(msg bell)$(msg underline)This is $(msg red)$(msg -b yellow)red with yellow background and it is underlined and has bell sound!$(msg end)"
# Adding newline: echo "${msg newline 4}"
# Adding tab: echo "${msg tab 2}"
function msg() {
  local mode="$1"
  shift
  # Set the foreground colour using ANSI escape
  # If first argument is color then use mode as color
  # Enable all cases matching for the following regular expression
  #shopt -s nocasematch
  if [[ "${mode^^}" == +(BLACK|RED|GREEN|YELLOW|BLUE|MAGENTA|CYAN) ]]; then
    if ! [[ ${mode} =~ ^[0-9]$ ]]; then
      case $(echo "${mode}" | tr '[:upper:]' '[:lower:]') in
      black) mode=0 ;;
      red) mode=1 ;;
      green) mode=2 ;;
      yellow) mode=3 ;;
      blue) mode=4 ;;
      magenta) mode=5 ;;
      cyan) mode=6 ;;
      end)
        tput sgr0
        return 0
        ;;
      white | *) mode=7 ;; # white or invalid color
      esac
    fi
    tput setaf ${mode}
    # Turn off all cases matching
    #shopt -u nocasematch
  elif [[ "${mode}" == "newline" || "${mode}" == "line" ]]; then
    local count=$1 str=""
    if [[ -z "${count}" || "${count}" -eq 0 || "${count}" -eq 1 ]]; then
      return 0
    fi
    for ((i = 1; i <= count - 1; i++)); do
      str="${str}\n"
    done
    if [ "$$" -eq "${BASHPID}" ]; then
      for ((i = 1; i <= count - 2; i++)); do
        str="${str}\n"
      done
      echo -e "${str}"
    else
      for ((i = 1; i <= count - 1; i++)); do
        str="${str}\n"
      done
      # Using -e option here will not work if call inside string such as echo.
      echo "${str}"
    fi
  elif [[ "${mode}" == "newtab" || "${mode}" == "tab" ]]; then
    local count=$1 str=""
    if [[ -z "${count}" || "${count}" -eq 0 || "${count}" -eq 1 ]]; then
      return 0
    fi

    if [ "$$" -eq "${BASHPID}" ]; then
      for ((i = 1; i <= count - 2; i++)); do
        str="${str}\t"
      done
      echo -e "${str}"
    else
      for ((i = 1; i <= count - 1; i++)); do
        str="${str}\t"
      done
      # Using -e option here will not work if call inside string such as echo.
      echo "${str}"
    fi
  elif [[ "${mode}" == "-c" || "${mode}" == "-f" || "${mode}" == "--color" || "${mode}" == "--foreground" ]]; then
    local color=$1
    if ! [[ $color =~ ^[0-9]$ ]]; then
      case $(echo "${color}" | tr '[:upper:]' '[:lower:]') in
      black) color=0 ;;
      red) color=1 ;;
      green) color=2 ;;
      yellow) color=3 ;;
      blue) color=4 ;;
      magenta) color=5 ;;
      cyan) color=6 ;;
      end)
        tput sgr0
        return 0
        ;;
      white | *) color=7 ;; # white or invalid color
      esac
    fi
    tput setaf ${color}
  # Set the background colour using ANSI escape
  elif [[ "${mode}" == "-b" || "${mode}" == "--background" ]]; then
    local color=$1
    if ! [[ $color =~ ^[0-9]$ ]]; then

      case $(echo "${color}" | tr '[:upper:]' '[:lower:]') in
      black) color=0 ;;
      red) color=1 ;;
      green) color=2 ;;
      yellow) color=3 ;;
      blue) color=4 ;;
      magenta) color=5 ;;
      cyan) color=6 ;;
      end)
        tput sgr0
        return 0
        ;;
      white | *) color=7 ;; # white or invalid color
      esac
    fi
    tput setab ${color}

  elif [[ ${mode} == +(bold|dim|invi|blink|reverse|uline|underline|xuline|focus|standout|xfocus|bell|alert|clr|end) ]]; then
    case $(echo "${mode}" | tr '[:upper:]' '[:lower:]') in
    bold) mode="bold" ;;
    dim) mode="dim" ;;
    invi) mode="invis" ;;
    blink) mode="blink" ;;
    reverse) mode="rev" ;;
    uline | underline) mode="smul" ;;
    xuline) mode="rmul" ;;
    focus | standout) mode="smso" ;;
    xfocus) mode="rmso" ;;
    bell | alert) mode="bel" ;;
    clr | end) mode="sgr0" ;;
    *)
      echo "Error, invalid argument supplied for mode: ${mode}!"
      exit 1
      ;;
    esac
    tput "${mode}"
    shopt -u nocasematch
  # Note: Not all modes work for every terminal especially, bold, dim, invi, blink
  elif [[ "${mode}" == "-m" || "${mode}" == "--mode" ]]; then
    local mode=$1
    case $(echo "${mode}" | tr '[:upper:]' '[:lower:]') in
    bold) mode="bold" ;;
    dim) mode="dim" ;;
    invi) mode="invis" ;;
    blink) mode="blink" ;;
    reverse) mode="rev" ;;
    uline | underline) mode="smul" ;;
    xuline) mode="rmul" ;;
    focus | standout) mode="smso" ;;
    xfocus) mode="rmso" ;;
    bell | alert) mode="bel" ;;
    clr | end) mode="sgr0" ;;
    *)
      echo "Error, invalid argument supplied for mode: ${mode}!"
      exit 1
      ;;
    esac

    tput "${mode}"
  elif [[ "${mode}" == "-x" || "${mode}" == "x" || "${mode}" == "end" ]]; then
    tput sgr0
  fi
}

# _echo "hello $(msg red)this is red $(msg end)" --report --timestamp --name
# _echo "hello $(msg red)this is red $(msg end) and $(msg underline)$(msg -b yellow)$(msg green)this is underline with yellow background and green color $(msg end)" --report --timestamp --name
# Default value for verbose should be 6, so if we dont' specify verbose value, it will use this
# To turn off echo (but still ...
function _echo() {
  local options retval report timestamp name verbose plain start_spin stop_spin
  declare -A LOG_LEVELS
  options=$(getopt -o vqsprtn --long verbose:,quiet,silent,plain,report,timestamp,name,start-spin,stop-spin -n "${FUNCNAME[0]} ${SCRIPT_NAME}" -- "$@")
  retval=$?
  if [ ${retval} != 0 ]; then
    echo "Error, terminating..." >&2
    exit 1
  fi

  # Must quote this option variable
  eval set -- "${options}"
  LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" [5]="notice" [6]="info" [7]="debug" [8]="expert")
  verbose=6 # Default is 6 if not specified
  report=false
  timestamp=false
  name=false
  plain=false
  start_spin=false
  stop_spin=false
  while true; do
    case "$1" in
    -v | --verbose)
      verbose="$2"
      shift 2
      ;;
    -q | --quiet)
      verbose=-1
      shift
      ;;
    -s | --silent)
      verbose=-1
      shift
      ;;
    # This plain does not care what verbosity level is, it just displays the text normally (useful for writing info label)
    -p | --plain)
      verbose=-1
      plain=true
      shift
      ;;
    -r | --report)
      report=true
      #echo "report is set to true"
      shift
      ;;
    -t | --timestamp)
      timestamp=true
      #echo "timestamp is set to true"
      shift
      ;;
    -n | --name)
      name=true
      #echo "name is set to true"
      shift
      ;;
    --start-spin)
      start_spin=true
      shift
      ;;
    --stop-spin)
      stop_spin=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
    esac
  done

  if [[ ${start_spin} == "true" && ${stop_spin} == "true" ]]; then
    echo "Warning the option --start-spin and --stop-spin cannot appear at the same time!"
    exit 1
  fi
  msg="$*"
  # Specifying name automatically use report file
  if [[ ${report} == "true" || ${name} == "true" ]]; then
    report_path="${REPORT_FILE}"
  else
    report_path=/dev/null
  fi

  if [[ ${timestamp} == "true" && ${name} == "true" ]]; then
    msg="[${SCRIPT_NAME}|$(date +'%d-%m-%Y %H:%M:%S')]: ${msg}"
  elif [[ ${timestamp} == "true" && ${name} == "false" ]]; then
    msg="[$(date +'%d-%m-%Y %H:%M:%S')]: ${msg}"
  elif [[ ${timestamp} == "false" && ${name} == "true" ]]; then
    msg="[${SCRIPT_NAME}]: ${msg}"
  fi

  if [[ ${start_spin} == "true" ]]; then
    echo -ne "\r\e[0K${msg} [${SPIN_PROGRESS:SPIN_COUNT++:1}]"
    ((SPIN_COUNT == ${#SPIN_PROGRESS})) && SPIN_COUNT=0
    tput civis # hide cursor
  elif [[ ${stop_spin} == "true" ]]; then
    echo -ne "\r\e[0K${msg}\n"
    tput cnorm # restore cursor
  elif [[ "${plain}" == "true" ]]; then
    echo -e "${msg}" 2>&1 | tee -a ${report_path}

  elif [[ "${LOG_VERBOSITY_LEVEL}" -ge "${verbose}" && "${verbose}" -ne -1 ]]; then
    echo -e "[${LOG_LEVELS[${verbose}]}]""${msg}" 2>&1 | tee -a ${report_path}
  else # Meaning this is quiet but still we write report in file
    if [ ${report} == "true" ]; then
      echo -e "[${LOG_LEVELS[${verbose}]}]" "${msg}" >>${report_path} 2>&1
    fi
  fi

}

# Deprecated function, use _echo with improved version instead
#  This function is used to print log file with timestamp
# syntax: _log <color> <message> <optional_log_file_path>
# _log red "hello wassup" "${REPORT_FILE}"
# Without color: _log "default" "hello there"
function _log() {
  local color info log_file
  color=$1
  info=$2
  log_file=$3

  if [[ $# -eq 3 ]]; then
    if [ -f "${log_file}" ]; then
      _echo "${color}" "[${SCRIPT_NAME}|$(date +'%d-%m-%Y %H:%M:%S')]: ${info}" | tee "${log_file}"
    else
      _echo yellow "[${SCRIPT_NAME}|$(date +'%d-%m-%Y %H:%M:%S')]: Warning log file [${log_file}] does not exist! Creating the log file [${log_file}] for the first time ..."
      touch "${log_file}"
      chmod 644 "${log_file}"
      #_exit 1
    fi
  elif [[ $# -eq 2 ]]; then
    if [ -f "${log_file}" ]; then
      :
    else
      _echo "${color}" "[${SCRIPT_NAME}|$(date +'%d-%m-%Y %H:%M:%S')]: ${info}"
    fi
  else
    _echo "red" "[${SCRIPT_NAME}|$(date +'%d-%m-%Y %H:%M:%S')]: Invalid number of argument in _log() function call"
    # log_file="${REPORT_FILE}"
  fi
  #_echo "${color}" "[${SCRIPT_NAME}|$(date +'%d-%m-%Y %H:%M:%S')]: ${info}" | tee "${log_file}"
}

# This function is used to reboot the system using force reboot -r now without any arguments
# syntax _reboot
function _reboot() {
  # an exit ASCII symbol invented by MaXi32
  echo "[${SCRIPT_NAME}]: Rebooting system ..." 2>&1 | tee -a "${REPORT_FILE}"
  echo "--<]--"
  shutdown -r now
}

# This function is used to shutdown the system using force shutdown -h now without any arguments
# syntax _shutdown
function _shutdown() {
  # a shutdown ASCII symbol invented by MaXi32
  echo "[${SCRIPT_NAME}]: Shutting down system ..." 2>&1 | tee -a "${REPORT_FILE}"
  echo "--[]--"
  shutdown -h now
}

# This function display the current time spent for running this script.
# It uses the built-in bash SECONDS to get the real execution statement
function script_time() {
  local spent_secs hrs mins secs
  spent_secs=${SECONDS}
  hrs=$((spent_secs / 3600))
  mins=$(((spent_secs - hrs * 3600) / 60))
  secs=$((spent_secs - hrs * 3600 - mins * 60))
  printf "[${SCRIPT_NAME}]: Time spent for total script execution: %02d H:%02d M :%02d S\n" ${hrs} ${mins} ${secs} 2>&1 | tee -a "${REPORT_FILE}"
}
# This function display the execution time for a script individually
# Syntax exec_time <start/total> <optional_unique_variable>
# To start tracking use: exec_time start "da_installation"
# To get the global current total runtime from the start: exec_time total or exec_time end
# To get the total runtime for specific variable use: exec_time() total "da_installation"
# To reset total running time, run again exec_time start <optional_unique_variable>
# Note: When this script runs for the first time, the global variable EXEC_START is calculated as current timestamp. So, no need to call exec_time start for the first time
function exec_time() {
  local option runtime days hours minutes seconds title
  install_required "apt:bc"
  option=$1
  title=$2
  if [ "${option}" == "start" ]; then
    # Reset starting execution time as the current date
    if [ -n "${title}" ]; then
      # Use verbose 7 (debug) because this time tracking only useful during debugging
      _echo "Tracking execution time for $(msg red)[${title}]$(msg end) ..." --name --verbose 7
      variable_api create-variable --name "${title}" --value "$(date +%s.%N)"
    else
      EXEC_START=$(date +%s.%N)
      _echo "Tracking global execution time ..." --name --verbose 7
    fi
  elif [[ "${option}" == "total" || "${option}" == "end" ]]; then
    if [ -n "${title}" ]; then
      runtime=$(echo "$(date +%s.%N) - $(variable_api get-variable-value --name "${title}")" | bc -l)
    else
      runtime=$(echo "$(date +%s.%N) - ${EXEC_START}" | bc -l)
    fi
    # Test runtime
    #runtime=$(date --date='Sun Jun 20 17:07:39 2021' +"%s")
    #end=$(date +%s.%N)
    #runtime=$(echo "$end - $start" | bc)
    days=$(echo "${runtime}/86400" | bc)
    #rt2=$(echo "${runtime}-86400*${days}" | bc)
    hours=$(echo "$(echo "${runtime}-86400*${days}" | bc)/3600" | bc)
    #rt3=$(echo "$(echo "${runtime}-86400*${days}" | bc)-3600*$hours" | bc)
    minutes=$(echo "$(echo "$(echo "${runtime}-86400*${days}" | bc)-3600*${hours}" | bc)/60" | bc)
    seconds=$(echo "$(echo "$(echo "${runtime}-86400*${days}" | bc)-3600*${hours}" | bc)-60*${minutes}" | bc)
    #_echo blue "Total execution time: ${runtime} seconds"
    if [ -n "${title}" ]; then
      #_echo blue "Total runtime executed for ${title} was: "
      _echo "$(printf "Total runtime executed for $(msg red)[%s]$(msg end) was: %dd:%02dh:%02dm:%02.4fs\n" "${title}" "${days}" "${hours}" "${minutes}" "${seconds}")" --name --verbose 7
    else
      #_echo blue "Total runtime executed was: "
      _echo "$(printf "Total global runtime executed was: %dd:%02dh:%02dm:%02.4fs\n" "${days}" "${hours}" "${minutes}" "${seconds}")" --name --verbose 7
    fi
    #_echo blue "$(printf "Total runtime executed for %s was: %dd:%02dh:%02dm:%02.4fs\n" "${title}" "${days}" "${hours}" "${minutes}" "${seconds}")"

  else
    _echo "Warning, invalid option specified for exec_time() function!" --name --verbose 4
    return 1
  fi
}
# This function will shift the current directory into another directory specified in argument
# it will terminate with return error code 1 if the specified path in argument given is not valid
# Usage: cd_to_path <valid_path>
# or : cd_to_path "pre" - to return to previous path after executing the previous cd_to_path <valid_path>
function cd_to_path() {
  local to_path="$1"
  # PREPATH holds a previous path (see global variable of PREPATH in this script)
  if [[ "${to_path}" == "pre" || "${to_path}" == "previous" || "${to_path}" == "prepath" || "${to_path}" == "PREPATH" || "${to_path}" == "back" || "${to_path}" == "oldpath" || "${to_path}" == "oldpwd" || "${to_path}" == "OLDPWD" ]]; then
    to_path="${PREPATH}"
  else
    PREPATH="${PWD}"
  fi
  echo "[${SCRIPT_NAME}]: Entering directory ${to_path} ..." 2>&1 | tee -a "${REPORT_FILE}"
  cd "${to_path}" || {
    echo "Failed to enter into directory" 2>&1 | tee -a "${REPORT_FILE}"
    _exit 1
  }
}

# Store long file text creation in function to avoid duplication
# create_file "ssh-push-scripts"
# create_file <create_action> <optional_path>
function create_file() {
  local create_actions path
  # Enable multiple create call. For eg: create_action "create1 create2 create3"
  create_actions="$1"
  path="$2"
  #create_file setup-readme

  for create_action in ${create_actions}; do
    if [[ "${create_action}" == "setup-readme" ]]; then
      {
        echo "# ==============================================="
        echo "# This readme file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# ==============================================="
        echo "# This is the remote setup readme file:"
        echo "Run installation with log output: ./${SCRIPT_NAME} --setup 2>&1 | tee ${SCRIPT_NAME}.log"
        echo "Run installation with log output: ./${SCRIPT_NAME} --setup --installation-type directadmin 2>&1 | tee ${SCRIPT_NAME}.log"
      } >"${SCRIPT_PATH}/readme.txt"
    # Remember all push scripts need to have return 0 at the end so that we can terminate the SSH from local call
    elif [[ ${create_action} == "ssh-push-scripts" ]]; then
      ssh_scripts_path="${CODE_PATH}/ssh_scripts"
      mkdir -p "${ssh_scripts_path}"

      #test_script.sh
      {
        echo "#!/bin/bash"
        echo "# ==============================================="
        echo "# This script file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# ==============================================="
        echo "# This is just a test script"
        echo "touch test_file"
        echo "# Put 2 times exit below to safely exit the script if the first exit is not executed"
        echo "exit"
        echo "exit"
      } >"${ssh_scripts_path}/test_script.sh"

      # reboot_command.sh
      {
        echo "#!/bin/bash"
        echo "# ==============================================="
        echo "# This script file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# ==============================================="
        echo "# Using --force to ignore any prompts when rebooting. Such as the prompt to eject DISK and waiting for user input"
        echo "reboot --force"
        echo "# Put 2 times exit below to safely exit the script if the first exit is not executed"
        echo "exit"
        echo "exit"
      } >"${ssh_scripts_path}/reboot_command.sh"

      # shutdown_command.sh
      {
        echo "#!/bin/bash"
        echo "# ==============================================="
        echo "# This script file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# ==============================================="
        echo "# Using --force to ignore any prompts when shutting down. Such as the prompt to eject DISK and waiting for user input"
        echo "reboot --poweroff --force"
        echo "# Put 2 times exit below to safely exit the script if the first exit is not executed"
        echo "exit"
        echo "exit"
      } >"${ssh_scripts_path}/shutdown_command.sh"

      #maxinet_setup.sh
      {
        echo "#!/bin/bash"
        echo "# ==============================================="
        echo "# This script file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# ==============================================="
        echo "# Using --setup will trigger setup script from ${SCRIPT_NAME}"
        echo "cd /root || exit 1"
        echo "chmod +x maxinet"
        echo "touch maxinet.log"
        echo "./maxinet --setup 2>&1 | tee maxinet.log"
        echo "# Put 2 times exit below to safely exit the script if the first exit is not executed"
        echo "exit"
        echo "exit"
      } >"${ssh_scripts_path}/maxinet_setup.sh"

    elif [[ ${create_action} == "debian-preseed" ]]; then

      install_required "apt:whois" "apt:pwgen"
      {
        # 1 Good reading: https://serverfault.com/questions/893483/what-means-3-numbers-in-manual-partitioning-of-hdd-in-preseed-for-ubuntu
        # 2 Useful setting for SSH: https://github.com/coreprocess/linux-unattended-installation/blob/master/ubuntu/20.04/custom/preseed.cfg
        # 3 This one contains setting for CD rom not in new documentation: https://images.validation.linaro.org/kvm/debian-8.3.0-cd1-preseed.cfg
        echo "# ==============================================="
        echo "# This configuration file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# Warning, this preseed configuration file contains sensitive information about a server. Do not share this file to public"
        echo "# ==============================================="
        echo "#### Preseed preconfiguration file (for Debian buster)"
        echo "### Partman early command"

        #echo "d-i partman/early_command \\"
        #echo "string sed -i.bak 's/-f \$id\/skip_erase/-d \$id/g' /lib/partman/lib/crypto-base.sh"

        echo "### Kernal parameter"
        echo "d-i debian-installer/add-kernel-opts string net.ifnames=0 biosdevname=0 console=ttyS0,19200n8"
        echo "### Localization"
        #echo "Test: Fixing no common CDROM on linode:"
        #=============================================
        #https://lists.debian.org/debian-boot/2011/01/msg00169.html
        #https://github.com/uweplonus/adia-install/blob/master/initrd/preseed.cfg#L3
        #https://serverfault.com/questions/685302/unattended-installation-of-ubuntu-from-usb-drive-not-mounted-correctly
        #echo "d-i partman/early_command string mount /dev/sdb /cdrom"
        #echo "d-i preseed/early_command string mount /dev/sdb /cdrom"
        #echo "d-i cdrom-detect/cdrom_device string /dev/sdb"
        #echo "d-i preseed/early_command string \\"
        #echo "umount /cdrom; \\"1
        #echo "mkdir -p /cdrom; \\"
        #echo "mount -t vfat /dev/sdb /cdrom;"
        # All above fixes are not working (left it as reference) because this ISO installer doesn't support booting from hard drive. Need to follow this:
        # https://www.debian.org/releases/buster/amd64/ch04s04.en.html (BOOTING WITH GRUB OR LILO)
        #================================================
        echo "d-i debian-installer/locale string ${BOX_LOCALE}"
        echo "d-i debian-installer/language string ${BOX_LANGUAGE_CODE}"
        echo "d-i debian-installer/country string ${BOX_COUNTRY_CODE}"
        echo ""
        echo "### Keyboard selection"
        echo "d-i keyboard-configuration/xkb-keymap select ${BOX_KEYBOARD}"
        echo ""
        echo "###  Network configuration"
        # This one has many bug reported in Debian forum, need to put in kernel parameter: netcfg/choose_interface eth0 (if not working)
        echo "d-i netcfg/choose_interface select eth0"
        echo "d-i netcfg/use_dhcp string false"
        # If I disable autoconfig, I will get mirror error if network is not configured correctly
        # Actually no need to set IP4 and IPv6 because I use late command is better.
        echo "d-i netcfg/disable_autoconfig boolean true"
        echo "d-i netcfg/dhcp_failed note"
        echo "d-i netcfg/dhcp_options select Configure network manually"
        echo "# IPv4 Static network configuration"
        echo "d-i netcfg/get_ipaddress string ${IPV4_ADD0}"
        echo "d-i netcfg/get_netmask string ${IPV4_NETMASK_IP0}"
        echo "d-i netcfg/get_gateway string ${IPV4_DEF_GATEWAY0}"
        echo "d-i netcfg/get_nameservers string ${NAME_SERVER1}"
        echo "d-i netcfg/confirm_static boolean true"
        echo ""
        # IPv6 will be set using late command below
        #echo "# IPv6 Static network configuration"
        #echo "d-i netcfg/get_ipaddress string ${IPV6_ADD0}"
        #echo "d-i netcfg/get_netmask string ${IPV6_NETMASK0}"
        #echo "d-i netcfg/get_gateway string ${IPV6_DEF_GATEWAY0}"
        #echo "d-i netcfg/get_nameservers string ${NAME_SERVER1}"
        #echo "d-i netcfg/confirm_static boolean true"
        #echo ""
        echo "# Set a hostname"
        echo "d-i netcfg/get_hostname string ${BOX_HOSTNAME}"
        echo "d-i netcfg/get_domain string ${BOX_DOMAIN}"
        echo "# Force a hostname"
        echo "d-i netcfg/hostname string ${BOX_HOSTNAME_FQDN}"
        echo "# Disable that annoying WEP key dialog"
        echo "d-i netcfg/wireless_wep string"
        echo ""
        echo "### Mirror settings"
        echo "d-i mirror/country string manual"
        echo "d-i mirror/http/hostname string deb.debian.org"
        echo "d-i mirror/http/directory string /debian"
        echo "d-i mirror/http/proxy string"
        echo ""
        echo "### Account setup"
        echo "# Skip creation of a normal user account"
        echo "d-i passwd/make-user boolean false"

        echo "# Set root password"
        #echo "d-i passwd/root-password password ${ROOT_USERPASS_INITIAL}"
        #echo "d-i passwd/root-password-again password ${ROOT_USERPASS_INITIAL}"
        echo "# or encrypted using a crypt(3)  hash."
        # Using the secured get_hash_pwd to encrypt root password
        echo "d-i passwd/root-password-crypted password $(get_hash_pwd "${ROOT_USERPASS_INITIAL}")"
        echo ""
        echo "### Clock and time zone setup"
        echo "# Set hardware clock to UTC"
        echo "d-i clock-setup/utc boolean true"
        echo "# Set timezone"
        echo "d-i time/zone string ${BOX_TIMEZONE}"
        echo "# Use NTP clock during installation"
        echo "d-i clock-setup/ntp boolean true"
        echo ""
        echo "### Partitioning"
        # This is for normal disk method (not LUKS)
        # Good reading :https://gist.github.com/chuckn246/ca24d26c048b3cc4ffa8188708f5dccf
        # Another good one: https://www.linuxjournal.com/content/preseeding-full-disk-encryption (it has a way to disable wipe disk)
        # Very nice info: https://secopsmonkey.com/custom-partioning-using-preseed.html
        # Useful maybe https://github.com/uweplonus/adia-install/blob/master/initrd/preseed.cfg#L3
        # Updated very nice: https://gist.github.com/chuckn246/ca24d26c048b3cc4ffa8188708f5dccf

        #echo "# Normal method"
        #echo "d-i partman-auto/disk string ${BOX_MAIN_DISK}"
        #echo "d-i partman-auto/method string lvm"
        #echo "d-i partman-auto-lvm/guided_size string max"
        #echo "d-i partman-lvm/device_remove_lvm boolean true"
        #echo "d-i partman-md/device_remove_md boolean true"
        #echo "d-i partman-lvm/confirm boolean true"
        #echo "d-i partman-lvm/confirm_nooverwrite boolean true"
        #echo "d-i partman-auto/choose_recipe select atomic"
        #echo "d-i partman-partitioning/confirm_write_new_label boolean true"
        #echo "d-i partman/choose_partition select finish"
        #echo "d-i partman/confirm boolean true"
        #echo "d-i partman/confirm_nooverwrite boolean true"
        #echo "d-i partman-md/confirm boolean true"
        #echo "d-i partman-partitioning/confirm_write_new_label boolean true"
        #echo "d-i partman/choose_partition select finish"
        #echo "d-i partman/confirm boolean true"
        #echo "d-i partman/confirm_nooverwrite boolean true"

        # This is the section to create a custom LUKS partition here
        echo "# LVM LUKS method"

        #echo "# method to use: regular, lvm or crypto"
        echo "d-i partman-auto/method string crypto"

        #echo "# remove existing LVM"
        echo "d-i partman-lvm/device_remove_lvm boolean true"
        #echo "# remove existing RAID"
        echo "d-i partman-md/device_remove_md boolean true"

        #echo "# Confirm to write LVM partition"
        echo "d-i partman-lvm/confirm boolean true"
        #echo "# amount space to use with LVM"
        echo "d-i partman-auto-lvm/guided_size string max"
        echo "d-i partman-auto-lvm/new_vg_name string ${LVM_VOLUME_GROUP}"
        #echo "#select root disk to use"
        echo "d-i partman-auto/disk string ${BOX_MAIN_DISK}"

        echo "d-i partman-auto/choose_recipe select boot-crypto"
        echo "d-i partman-lvm/confirm_nooverwrite boolean true"

        echo "d-i partman-crypto/passphrase string ${LUKS_PASS}"
        echo "d-i partman-crypto/passphrase-again string ${LUKS_PASS}"
        echo "d-i partman-crypto/weak_passphrase boolean true"
        echo "d-i partman-crypto/confirm boolean true"
        echo "# When disk encryption is enabled, skip wiping the partitions beforehand."
        echo "d-i partman-auto-crypto/erase_disks boolean false"

        echo "d-i partman-auto/expert_recipe string \\"
        echo "boot-crypto :: \\"
        echo "  ${BOX_BOOT_SIZE} ${BOX_BOOT_SIZE} ${BOX_BOOT_SIZE} ext4 \\"
        echo "          \$primary{ } \$bootable{ } \\"
        echo "          method{ format } format{ } \\"
        echo "          use_filesystem{ } filesystem{ ext4 } \\"
        echo "          mountpoint{ /boot } \\"
        echo "          label{ boot } \\"
        echo "  . \\"
        echo "  ${BOX_ROOT_SIZE} ${BOX_ROOT_SIZE} ${BOX_ROOT_SIZE}  ext4 \\"
        echo "          \$lvmok{ } lv_name{ root } \\"
        echo "          in_vg { ${LVM_VOLUME_GROUP} } \\"
        #echo "          \$primary{ } \\"
        echo "          method{ format } format{ } \\"
        echo "          use_filesystem{ } filesystem{ ext4 } \\"
        echo "          mountpoint{ / } \\"
        echo "          label{ root } \\"
        echo "  . \\"
        echo "  ${BOX_TMP_SIZE} ${BOX_TMP_SIZE} ${BOX_TMP_SIZE} ext4 \\"
        echo "          \$lvmok{ } lv_name{ tmp } \\"
        echo "          in_vg { ${LVM_VOLUME_GROUP} } \\"
        #echo "          \$primary{ } \\"
        echo "          method{ format } format{ } \\"
        echo "          use_filesystem{ } filesystem{ ext4 } \\"
        echo "          mountpoint{ /tmp } \\"
        echo "          options/nosuid{ nosuid } \\"
        echo "          options/noexec{ noexec } \\"
        echo "          label{ tmp } \\"
        echo "  . \\"
        echo "  ${BOX_SWAP_SIZE} ${BOX_SWAP_SIZE} ${BOX_SWAP_SIZE} linux-swap \\"
        echo "          \$lvmok{ } lv_name{ swap } \\"
        echo "          in_vg { ${LVM_VOLUME_GROUP} } \\"
        #echo "          \$primary{ } \\"
        echo "          method{ swap } format{ } \\"
        echo "          label{ swap } \\"
        echo "  . \\"
        # The rest of the space
        echo "  40960 61440 ${BOX_HOME_SIZE} ext4 \\"
        echo "          \$lvmok{ } lv_name{ home } \\"
        echo "          in_vg { ${LVM_VOLUME_GROUP} } \\"
        #echo "          \$primary{ } \\"
        echo "          method{ format } format{ } \\"
        echo "          use_filesystem{ } filesystem{ ext4 } \\"
        echo "          mountpoint{ /home } \\"
        echo "          options/nosuid{ nosuid } \\"
        echo "          label{ home } \\"
        echo "  ."

        echo "d-i partman-basicfilesystems/no_mount_point boolean false"
        echo "d-i partman-partitioning/confirm_write_new_label boolean true"
        echo "d-i partman/choose_partition select finish"
        echo "d-i partman/confirm boolean true"
        echo "d-i partman/confirm_nooverwrite boolean true"

        echo ""
        echo "### Apt setup"
        # Disable mirror will cause problem with software selection
        #echo "#d-i apt-setup/use_mirror boolean false"
        echo "d-i apt-setup/cdrom/set-first boolean false"
        echo "d-i apt-setup/cdrom/set-next boolean false"
        echo "d-i apt-setup/cdrom/set-failed boolean false"
        echo "d-i apt-setup/services-select multiselect security, updates"
        echo "d-i apt-setup/security_host string security.debian.org"
        #echo ""
        echo "### Package selection"
        echo "tasksel tasksel/first multiselect standard"
        echo "# Individual additional packages to install"
        echo "d-i pkgsel/include string openssh-server"
        echo "popularity-contest popularity-contest/participate boolean false"
        echo ""
        echo "### Boot loader installation"
        echo "# Grub location"
        echo "d-i grub-installer/only_debian boolean true"
        echo "d-i grub-installer/with_other_os boolean true"
        echo "d-i grub-installer/bootdev string ${BOX_MAIN_DISK}"
        echo ""
        echo "# Grub password"
        echo "#d-i grub-installer/password password r00tme"
        echo "#d-i grub-installer/password-again password r00tme"
        echo "# or encrypted using an MD5 hash, see grub-md5-crypt(8)."
        echo "#d-i grub-installer/password-crypted password [MD5 hash]"
        echo ""
        echo "### Finishing up the installation"
        echo "# Avoid that last message about the install being complete."
        echo "# This will skip the dialog box after installation finished"
        echo "d-i finish-install/reboot_in_progress note"
        echo "# This will shutdown after install"
        # Make sure to disable linode shutdown watchdog to turn off linode after installed else it will auto boot:
        echo "d-i debian-installer/exit/poweroff boolean true"
        # At this point, I can use API to determine if the system s shut down, then it means installation is finished.
        # Then if the port 893 is available I can use that port to login.
        # Good reading for executing script or store: https://github.com/uweplonus/adia-install/blob/master/initrd/preseed.cfg#L3
        echo "### Execute final scripts "
        # To install other package using late_command
        # new line separated by \
        echo "d-i preseed/late_command string \\"
        echo "in-target apt-get -y install htop wget git dropbear-initramfs; \\"
        # Allow root login
        # For encryption https://stackoverflow.com/questions/33113363/debian-preseed-late-command-not-executed
        # Another tip: https://askubuntu.com/questions/364051/how-do-you-preseed-an-ssh-key
        # UNLOCK LUKS doc here: https://www.cyberciti.biz/security/how-to-unlock-luks-using-dropbear-ssh-keys-remotely-in-linux/
        #echo "in-target cp /cdrom/configure_box.sh /usr/local/bin/ ;\\"
        #echo "in-target chmod +x /usr/local/bin/configure.sh ;\\"
        #echo "in-target /usr/local/bin/configure_box.sh; \\"
        echo "mkdir -p /target/root/.ssh; \\"
        #echo "cat ${rsa_private_key} > /target/root/.ssh/authorized_keys; \\"
        echo "cp /cdrom/root_${ROOT_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub /target/root/.ssh/authorized_keys; \\"
        echo "cp /cdrom/user_${SSH_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub /target/root/user_${SSH_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub; \\"
        echo "chmod -R go-rwx /target/root/.ssh; \\"
        echo "sed -i 's/^#PermitRootLogin.*/PermitRootLogin prohibit-password/g' /target/etc/ssh/sshd_config; \\"
        echo "sed -i 's/^#PubkeyAuthentication.*/PubkeyAuthentication yes/g' /target/etc/ssh/sshd_config; \\"
        echo "sed -i \"s/^#Port 22/Port ${SSH_PORT}/\" /target/etc/ssh/sshd_config; \\"
        # This will disable the interface name convention (just put in kernel line)
        #echo "in-target sed -i 's/GRUB_CMDLINE_LINUX=\"[^\"]*/&net.ifnames=0 biosdevname=0/' /etc/default/grub; \\"
        echo "echo "\"GRUB_TERMINAL=serial\""  >> /target/etc/default/grub; \\"
        echo "echo "\"GRUB_SERIAL_COMMAND=\\"\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\\\"\"" \>\> /target/etc/default/grub\; \\""
        echo "in-target update-grub; \\"
        # This will write a new static IP and use the default interface eth0
        echo "echo "\"source /target/etc/network/interfaces.d/*\"" > /target/etc/network/interfaces; \\"
        echo "echo "\"auto lo\"" >> /target/etc/network/interfaces; \\"
        echo "echo "\"iface lo inet loopback\"" >> /target/etc/network/interfaces; \\"
        echo "echo "\"auto ${NIC_INTERFACE_NAME}\"" >> /target/etc/network/interfaces; \\"
        echo "echo "\"iface ${NIC_INTERFACE_NAME} inet static\"" >> /target/etc/network/interfaces; \\"
        echo "echo "\"address ${IPV4_ADD0}${IPV4_NETMASK0}\"" >> /target/etc/network/interfaces; \\"
        echo "echo "\"gateway ${IPV4_DEF_GATEWAY0}\"" >> /target/etc/network/interfaces; \\"
        echo "echo "\"iface ${NIC_INTERFACE_NAME} inet6 static\"" >> /target/etc/network/interfaces; \\"
        echo "echo "\"address ${IPV6_ADD0}${IPV6_NETMASK0}\"" >> /target/etc/network/interfaces; \\"
        echo "echo "\"address ${IPV6_DEF_GATEWAY0}\"" >> /target/etc/network/interfaces; \\"
        # This will write a new resolve at /etc/resolv.conf
        echo "echo "\"search ${BOX_DOMAIN}\"" > /target/etc/resolv.conf; \\"
        echo "echo "\"domains ${BOX_HOSTNAME_FQDN}\"" >> /target/etc/resolv.conf; \\"
        echo "echo "\"options rotate\"" > /target/etc/resolv.conf; \\"
        echo "echo "\"nameserver ${NAME_SERVER1}\"" >> /target/etc/resolv.conf; \\"
        echo "echo "\"nameserver ${NAME_SERVER2}\"" >> /target/etc/resolv.conf; \\"
        echo "echo "\"nameserver ${NAME_SERVER3}\"" >> /target/etc/resolv.conf; \\"
        # For LUKS auto login
        echo "sed -i 's/^#DROPBEAR_OPTIONS=/DROPBEAR_OPTIONS=\"-I 180 -j -k -p ${DROP_BEAR_PORT} -s\"/' /target/etc/dropbear-initramfs/config; \\"
        echo "echo "\"IP=${IPV4_ADD0}::${IPV4_DEF_GATEWAY0}:${IPV4_NETMASK_IP0}:${BOX_HOSTNAME}:${NIC_INTERFACE_NAME}:off\"" >> /target/etc/initramfs-tools/initramfs.conf; \\"
        echo "cp /cdrom/root_${ROOT_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub /target/etc/dropbear-initramfs/authorized_keys; \\"
        echo "in-target update-initramfs -u;"

        # Installing some packages

      } >"${path}"
    fi
  done
}
# This functions create ISO file, and upload into dropbox

# --dropbox-api upload --source /mnt/file.txt --destination /files
# --dropbox-api get-link --destination /files --filename /test/test.txt
# Note filename will only get the basename as dropbox only require this name /test/test2/test.txt = test.txt
# Use --scripting option to suppress message (useful for scripting)
function dropbox_api() {

  local action options retval argnum scripting source destination filename dbx_cli file_direct_link
  action="$1"
  # TODO make sure to configure dropbox authentication first before running script. Will make this automatic
  dbx_cli="${SCRIPT_PATH}/storage/os/debian/usr/local/maxicode/maxicloud/dropbox/dbx"
  argnum="$#"
  if [ ${argnum} -eq 0 ]; then
    echo "Error, no argument is supplied. Use [ ${SCRIPT_NAME} --upload-to-dropbox --help ] to see the valid options"
    exit 1
  fi

  options=$(getopt -o '' --long help,scripting,source:,destination:,filename: -n "${FUNCNAME[0]} in ${SCRIPT_NAME}" -- "$@")
  retval=$?
  if [ ${retval} != 0 ]; then
    echo "Error, invalid parse data. Terminating..." >&2
    exit 1
  fi

  # Must quote this option variable
  eval set -- "${options}"

  scripting=false
  source=""
  destination=""
  filename=""
  while true; do
    case "$1" in
    --help)
      manual "${FUNCNAME[0]}"
      shift
      exit 0
      ;;
    --scripting)
      scripting=true
      shift
      ;;
    --source)
      source="$2"
      shift 2
      ;;
    --destination)
      destination="$2"
      shift 2
      ;;
    --filename)
      filename="$(basename -- "$2")"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
    esac
  done

  if [[ "${action}" == "upload" ]]; then
    [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Uploading file ${source} into ${destination} ...$(msg end)" --name
    # TODO check if source file is exist and destination source is exist before upload
    if [[ ${scripting} == "false" ]]; then
      ${dbx_cli} upload "${source}" "${destination}"
    else
      ${dbx_cli} -q upload "${source}" "${destination}"
    fi
  elif [[ "${action}" == "get-link" ]]; then
    # TODO check if destination exist
    [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Generating download link ...$(msg end)" --name
    file_direct_link=$(${dbx_cli} share "/${destination}/${filename}" | awk '{ print $4}' | sed 's/0$/1/g')
    [[ ${scripting} == "false" ]] && _echo "$(msg green)File direct link is: $(msg end)"
    echo "${file_direct_link}"
  else
    echo "Unknown action"
  fi

}
# iso_api <action> <required --iso-type> <required --iso-base> <optional --upload-to-dropbox> <optional --write-script> <optional --backup>
# iso_api create-os-iso --iso-type hdd-boot --iso-base local --upload-to-dropbox --write-script --backup
# Trigger --help for more information
function iso_api() {

  local action argnum options retval iso_type iso_base upload_to_dropbox write_script backup
  action="$1"
  argnum="$#"
  if [ ${argnum} -eq 0 ]; then
    echo "Error, no argument is supplied. Use [ ${SCRIPT_NAME} --iso --help ] to see the valid options"
    exit 1
  fi

  options=$(getopt -o '' --long help,iso-type:,iso-base:,upload-to-dropbox,write-script,backup -n "${FUNCNAME[0]} in ${SCRIPT_NAME}" -- "$@")
  retval=$?
  if [ ${retval} != 0 ]; then
    echo "Error, invalid parse data. Terminating..." >&2
    exit 1
  fi

  # Must quote this option variable
  eval set -- "${options}"

  iso_type=""
  iso_base=""
  upload_to_dropbox=false
  write_script=false
  backup=false
  while true; do
    case "$1" in
    --help)
      manual "${FUNCNAME[0]}"
      shift
      exit 0
      ;;
    --iso-type)
      iso_type="$2"
      shift 2
      ;;
    --iso-base)
      iso_base="$2"
      shift 2
      ;;
    --upload-to-dropbox)
      upload_to_dropbox=true
      shift
      ;;
    --write-script)
      write_script=true
      shift
      ;;
    --backup)
      backup=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
    esac
  done

  if [[ "${action}" == "create-os-iso" ]]; then

    local iso_os date_time_random root_temp_path isomount_location isodir_write isodir_write_tmp preseed_file source_file \
      rsa_private_key rsa_private_key_ppk rsa_public_key

    iso_os="${BOX_ISO_OS_TYPE}"
    date_time_random="$(${DATE_BIN} '+%d_%m_%Y_%H_%M_%S').${RANDOM}"
    root_temp_path="/root/tmp_iso/${iso_os}"
    isomount_location="/mnt/mount_iso"
    isodir_write="${root_temp_path}/iso-rw"
    isodir_write_tmp="${root_temp_path}/iso-rw-tmp"
    preseed_file="${root_temp_path}/preseed.txt"
    source_file="${root_temp_path}/sources.list"

    if [ "${iso_os}" == "debian" ]; then
      local debian_name debian_release debian_select_version debian_latest_version debian_select_platform debian_image_type \
        debian_iso_installation_type debian_iso_url debian_initrd_gz_url debian_vmlinuz_url debian_isofile debian_isofile_final \
        debian_isofile_final_base_name

      debian_name="debian"
      debian_release="buster"
      debian_select_version="10.10.0"
      debian_latest_version=$(curl -s 'http://cdimage.debian.org/cdimage/release/current/amd64/iso-cd/' | grep -oP 'href="debian-\K[0-9]+\.[0-9]+\.[0-9]+' | sort -t. -rn -k1,1 -k2,2 -k3,3 | head -1)
      debian_select_platform="amd64"
      debian_image_type="iso-cd"
      debian_iso_installation_type="netinst"
      #checksum_selection="debian-${debian_select_version}-${debian_select_platform}-${debian_iso_installation_type}.iso"
      if [ "${USE_LATEST_ISO}" == "yes" ]; then
        debian_select_version="${debian_latest_version}"
      else
        if [ "${debian_select_version}" == "${debian_latest_version}" ]; then
          _echo "$(msg green)The Latest version of Debian is up-to-date with the selected version of Debian: v${debian_select_version}! $(msg end)" --name
        else
          _echo "$(msg yellow)Warning, the Latest version of Debian detected as ${debian_latest_version} but the selected version is ${debian_select_version}!$(msg end)" --name
          _pause 10
        fi
      fi

      debian_iso_url="http://cdimage.debian.org/cdimage/release/current/${debian_select_platform}/${debian_image_type}/${debian_name}-${debian_select_version}-${debian_select_platform}-${debian_iso_installation_type}.iso"
      debian_initrd_gz_url="http://ftp.debian.org/debian/dists/buster/main/installer-amd64/current/images/hd-media/initrd.gz"
      debian_vmlinuz_url="http://ftp.debian.org/debian/dists/buster/main/installer-amd64/current/images/hd-media/vmlinuz"

      debian_base_iso_256sum_online_value=$(curl -s https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA256SUMS | grep "debian-${debian_select_version}-${debian_select_platform}-${debian_iso_installation_type}.iso" | awk '{ print $1 }')

      debian_isofile="${root_temp_path}/${iso_os}_${debian_select_version}.iso"
      debian_isofile_final="${root_temp_path}/${iso_os}_${debian_select_version}_final.iso"
      debian_isofile_final_base_name="$(basename -- "${debian_isofile_final}")"
      # Modify this to have the output name as different name (This file is just a backup file of debian_isofile_final)

      debian_iso_complete_file="${ISO_PATH}/os/debian/${debian_name}_${debian_select_version}_complete.iso"

      rm -rf "${debian_isofile_final}"
      rm -rf "${isodir_write}"
      rm -rf "${isodir_write_tmp}"
      rm -rf "${preseed_file}"
      rm -rf "${source_file}"

      mkdir -p "${root_temp_path}"
      mkdir -p "${isomount_location}"
      mkdir -p "${isodir_write}"
      mkdir -p "${isodir_write_tmp}"
      mkdir -p "$(dirname "${debian_iso_complete_file}")"
      echo ""

      if [ "${backup}" == "true" ]; then
        if [ -f "${debian_iso_complete_file}" ]; then
          _echo "$(msg green)OK, previous ISO file ${debian_iso_complete_file} exist$(msg end)" --name
          echo ""
          _echo "$(msg cyan)Checking if the ISO file ${debian_iso_complete_file} is valid (bootable) ..." --name
          ${ISOINFO_BIN} -d -i "${debian_iso_complete_file}" 2>/dev/null | grep -q "bootable"
          retval=$?
          if [ ${retval} -eq 0 ]; then
            local backup_dir iso_backup_dir ssh_backup_dir
            _echo "$(msg green)OK, previous ISO file ${debian_iso_complete_file} is valid (bootable). Backing up ISO files and SSH keys ...$(msg end)" --name
            backup_dir="${ISO_PATH}/backup/iso_backup_${date_time_random}"
            iso_backup_dir="${backup_dir}/iso"
            ssh_backup_dir="${backup_dir}/ssh"

            mkdir -p "${iso_backup_dir}"
            mkdir -p "${ssh_backup_dir}"
            cp -p "${debian_iso_complete_file}" "${iso_backup_dir}"
            cp -Rp "${SECURE_PATH}/ssh/" "${ssh_backup_dir}"
            echo "Backup location is at: ${iso_backup_dir}"
            echo ""
          else
            _echo "$(msg red)Error, the previous ISO file might be corrupted because it does not contain bootable record.$(msg end)" --name --verbose 3
            _exit 147
          fi
        else
          _echo "$(msg red)Error, backup failed because previous ISO file ${debian_iso_complete_file} was not found. Please inspect the location of the file$(msg end)" --name --verbose 3
          _echo "$(msg red)If you want to continue without backup, omit the option --backup$(msg end)" --name --verbose 3
          _exit 147
        fi
      fi

      if [ "${iso_base}" == "web" ]; then
        _echo "The Latest version of Debian detected is ${debian_latest_version} (selected version is ${debian_select_version})" --name
        _echo "Setup will download the most recent version of Debian regardless of the selected version because USE_LATEST_ISO is set to yes from the config file!" --name
        _pause 5
        _echo "$(msg cyan)Downloading ISO file from ${debian_iso_url} ...$(msg end)" --name
        rm -rf "${debian_isofile}"
        wget -nc -O "${debian_isofile}" "${debian_iso_url}" || true
      elif [ "${iso_base}" == "local" ]; then
        _echo "$(msg cyan)Setup will use the local ISO file downloaded previously! Checking existing ISO file ${debian_isofile} ... $(msg end)" --name
        # use the local ISO
        if [ -f "${debian_isofile}" ]; then
          # echo "ISO file exist"
          # Check here if ISO is corrupt based on online checksum
          if is_valid sha256sum "${debian_base_iso_256sum_online_value}" "${debian_isofile}"; then
            _echo "$(msg green)OK, the base ISO file content is valid sha256sum. Setup will create ISO file using existing ISO file$(msg end)" --name
          else
            _echo "$(msg red)Error, the base ISO file content is corrupted (not valid sha256sum). Please download a new one with an option [ --iso-base web ]$(msg end)" --name
            _exit 147
          fi

        else
          _echo "$(msg error) Error, the base ISO file ${debian_isofile} does not exist. You may need to use the option [ --iso-base web ] to automatically download new ISO file from web$(msg end)" --name
          _exit 147
        fi
      else
        _echo "$(msg red)Error, unknown ISO base type$(msg end)" --name
        _exit 147
      fi

      # For hard disk booting
      if [[ "${iso_type}" == "hdd-iso" || "${iso_type}" == "hdd-boot" || "${iso_type}" == "hdd" || "${iso_type}" == "isolinux" ]]; then
        install_required "apt:debconf" "apt:isolinux" "apt:syslinux-utils" "apt:xorriso" "apt:wget"

        _echo "$(msg cyan)Creating new RSA Key for root ...$(msg end)" --name
        # This will create 2 files one is private and another one with the extension .pub
        # For root
        ssh_api create-key-with-putty --group root --user "${ROOT_USERNAME}" --comment "${BOX_HOSTNAME_FQDN}_secure_auth"
        echo ""

        _echo "$(msg cyan)Creating new RSA Key for sudo [user] ...$(msg end)" --name
        ssh_api create-key-with-putty --group user --user "${SSH_USERNAME}" --comment "${BOX_HOSTNAME_FQDN}_secure_auth"

        echo ""

        _echo "$(msg cyan)Building a custom ${iso_os} image file for server using HDD Booting method ...$(msg end)" --name
        echo ""
        # Fixing
        cd_to_path "${SCRIPT_PATH}"

        _echo "$(msg cyan)Writing new preseed file config ...$(msg end)" --name
        # Writing new preseed.cfg
        create_file "debian-preseed" "${preseed_file}"
        echo ""
        _echo "$(msg cyan)Checking preseed syntax file ${preseed_file} ...$(msg end)" --name
        if ! debconf-set-selections -c "${preseed_file}"; then
          _echo "$(msg red)Error, there there was a syntax error in the preseed.cfg. Check the syntax of the preconfiguration file.$(msg end)" --name
          _exit 1
        else
          _echo "$(msg green)OK, the preseed file ${preseed_file} syntax is ok$(msg end)" --name
        fi
        # exit 1
        echo ""
        _echo "$(msg cyan)Extracting the ISO file ${debian_isofile}'s contents into a temporary writeable directory at ${isodir_write_tmp} ...$(msg end)" --name
        xorriso -osirrox on -indev "${debian_isofile}" -extract / ${isodir_write_tmp}/
        echo ""

        # Do not remove existing ISO file because we want to reuse this without downloading new ISO using the option --iso-base=local
        #_echo "$(msg cyan)Removing existing ISO file ...$(msg end)" --name
        #rm -rf "${debian_isofile}"

        #echo "Editing isolinux/isolinux.cfg to disable setup menu (straight to the first menu on startup) ..."
        #sed -i "s/timeout 0/timeout 1/" ${ISODIR_WRITE_TMP}/isolinux/isolinux.cfg
        echo ""
        _echo "$(msg cyan)Copying raw preseed file from ${preseed_file} into ${isodir_write_tmp}/preseed.cfg ...$(msg end)" --name
        cp "${preseed_file}" "${isodir_write_tmp}/preseed.cfg"
        #chmod 555 ${ISODIR_WRITE}/preseed.cfg
        echo ""

        _echo "$(msg cyan)Writing rsa public key (root) file into ${isodir_write_tmp}/root_${ROOT_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub ...$(msg end)" --name
        ssh_api get-public-key --group root --user "${ROOT_USERNAME}" --server "${BOX_HOSTNAME_FQDN}" >"${isodir_write_tmp}/root_${ROOT_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub"
        echo ""
        _echo "$(msg cyan)Writing rsa public key (user) file into ${isodir_write_tmp}/user_${SSH_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub ...$(msg end)" --name
        ssh_api get-public-key --group user --user "${SSH_USERNAME}" --server "${BOX_HOSTNAME_FQDN}" >"${isodir_write_tmp}/user_${SSH_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub"
        echo ""

        _echo "$(msg cyan)Changing permission of ${isodir_write_tmp}/preseed.cfg to own by root:root ...$(msg end)" --name
        chown root:root "${isodir_write_tmp}/preseed.cfg"
        echo ""
        _echo "$(msg cyan)Lowering the files permission from ${isodir_write_tmp}/install.amd to +w ...$(msg end)" --name
        chmod +w -R "${isodir_write_tmp}/install.amd"
        retval=$?
        if [ ${retval} -ne 0 ]; then
          _echo warning "Something is wrong when trying to lower the file permission for ${isodir_write_tmp}/install.amd to +w"
          _exit 1
        fi
        echo ""
        _echo "$(msg cyan)Extracting initrd.gz ...$(msg end)" --name
        gunzip "${isodir_write_tmp}/install.amd/initrd.gz"
        echo ""
        _echo "$(msg cyan)Writing preseed.cfg file into initrd ...$(msg end)" --name
        echo "${isodir_write_tmp}/preseed.cfg" | cpio -H newc -o -A -F "${isodir_write_tmp}/install.amd/initrd"
        echo ""
        ##exit 1
        _echo "$(msg cyan)Compressing initrd as initrd.gz ...$(msg end)" --name
        gzip "${isodir_write_tmp}/install.amd/initrd"
        echo ""
        _echo "$(msg cyan)Changing the folder permission of ${isodir_write_tmp}/install.amd/ to -w ...$(msg end)" --name
        chmod -w -R "${isodir_write_tmp}/install.amd/"
        echo ""

        _echo "$(msg cyan)Writing and fixing md5sum checksum in ${isodir_write} ...$(msg end)" --name
        cd_to_path "${isodir_write_tmp}"

        # Alternative method:
        #pushd ${ISODIR_WRITE}
        #  md5sum $(find -type f) > md5sum.txt
        #popd

        # A warning will be issued because ./debian is a symlink to . :
        # find: File system loop detected; ‘./debian’ is part of the same file system loop as ‘.’ :
        chmod +w md5sum.txt
        #find -follow -type f ! -name md5sum.txt -print0 | xargs -0 md5sum >md5sum.txt
        find . -follow -type f ! -name md5sum.txt -print0 | xargs -0 md5sum >tmpfile && mv tmpfile md5sum.txt
        chmod -w md5sum.txt
        echo ""

        _echo "$(msg cyan)Creating standalone ISO installation inside ${isodir_write}/${debian_isofile_final} ...$(msg end)" --name
        xorriso -as mkisofs \
          -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
          -c isolinux/boot.cat \
          -b isolinux/isolinux.bin \
          -no-emul-boot \
          -boot-load-size 4 \
          -boot-info-table \
          -eltorito-alt-boot \
          -e boot/grub/efi.img \
          -no-emul-boot \
          -isohybrid-gpt-basdat \
          -o "${isodir_write}/${debian_name}-${debian_release}-${debian_iso_installation_type}.iso" \
          "${isodir_write_tmp}"
        echo ""

        _echo "$(msg cyan)Copying ${isodir_write_tmp}/boot into ${isodir_write} ...$(msg end)" --name
        cp -rp "${isodir_write_tmp}/boot" "${isodir_write}"
        echo ""
        _echo "$(msg cyan)Creating new boot installation directory at ${isodir_write}/boot/os ...$(msg end)" --name
        mkdir -p "${isodir_write}/boot/os"
        echo ""
        cd_to_path "${isodir_write}/boot/os"
        echo ""
        _echo "$(msg cyan)Downloading initrd.gz file into ${isodir_write}/boot/os ...$(msg end)" --name
        wget -O initrd.gz ${debian_initrd_gz_url}
        echo ""
        _echo "$(msg cyan)Downloading vmlinuz file into ${isodir_write}/boot/os ...$(msg end)" --name
        wget -O vmlinuz ${debian_vmlinuz_url}
        echo ""
        _echo "$(msg cyan)Copying ${isodir_write_tmp}/isolinux into ${isodir_write} ...$(msg end)" --name
        cp -rp "${isodir_write_tmp}/isolinux" "${isodir_write}"
        echo ""

        _echo "$(msg cyan)Backing up isolinux.cfg file at ${isodir_write}/isolinux/isolinux.cfg as ${isodir_write}/isolinux/original_isolinux.cfg ...$(msg end)" --name
        mv "${isodir_write}/isolinux/isolinux.cfg" "${isodir_write}/isolinux/original_isolinux.cfg"
        echo ""

        _echo "$(msg cyan)Modifying isolinux.cfg to create new operating system boot menu ...$(msg end)" --name
        {

          ## Config reference: https://www.alteeve.com/an-repo/files/isolinux.cfg
          # Use high-color menu
          echo "UI vesamenu.c32"
          # Timeout unit is 1/10s, 100 means 10 seconds
          echo "TIMEOUT 100"
          echo "PROMPT 0"

          echo "DEFAULT Debian - Auto Installation"
          echo "# Console Prompt"
          echo "say **********************************************************************"
          echo "say Sofibox Cloud Sdn Bhd."
          echo "say TOSP, Cyberjaya Malaysia."
          echo "say sofibox.com, tosp.sofibox.com"
          echo "say OPERATING SYSTEM INSTALLER"
          echo "Copyright (C) Arafat Ali"
          echo "say Automatically booting: Debian - Auto Installation in 10 seconds ..."
          echo "say **********************************************************************"

          echo "# Allow client to edit the boot parameters"
          echo "ALLOWOPTIONS 1"

          # If don't set default would be 640x480
          #MENU RESOLUTION 1024 768

          # The background image
          #MENU BACKGROUND pxe_splash_1024_768.jpg

          echo "# Menu Title"
          echo "MENU TITLE Sofibox - Maxinet Rescue Mode"

          echo "MENU AUTOBOOT Will boot the next device as configured in your BIOS in # second{,s}."
          echo "MENU TABMSG   Press the <tab> key to edit the boot parameters of the highlighted option."
          echo "MENU NOTABMSG Editing of this option is disabled."

          #The color
          echo "# Format is: MENU COLOR <Item> <ANSI Seq.> <foreground> <background> <shadow type>"
          echo "MENU COLOR screen      0  #80ffffff #00000000 std      # background colour not covered by the splash image"
          echo "MENU COLOR border      0  #ffffffff #ee000000 std      # The wire-frame border"
          echo "MENU COLOR title       0  #ffff3f7f #ee000000 std      # Menu title text"
          echo "MENU COLOR sel         0  #ff00dfdf #ee000000 std      # Selected menu option"
          echo "MENU COLOR hotsel      0  #ff7f7fff #ee000000 std      # The selected hotkey (set with ^ in MENU LABEL)"
          echo "MENU COLOR unsel       0  #ffffffff #ee000000 std      # Unselected menu options"
          echo "MENU COLOR hotkey      0  #ff7f7fff #ee000000 std      # Unselected hotkeys (set with ^ in MENU LABEL)"
          echo "MENU COLOR tabmsg      0  #c07f7fff #00000000 std      # Tab text"
          echo "MENU COLOR timeout_msg 0  #8000dfdf #00000000 std      # Timout text"
          echo "MENU COLOR timeout     0  #c0ff3f7f #00000000 std      # Timout counter"
          echo "MENU COLOR disabled    0  #807f7f7f #ee000000 std      # Disabled menu options, including SEPARATORs"
          echo "MENU COLOR cmdmark     0  #c000ffff #ee000000 std      # Command line marker - The '> ' on the left when editing an option"
          echo "MENU COLOR cmdline     0  #c0ffffff #ee000000 std      # Command line - The text being edited"
          echo "# Options below haven't been tested, descriptions may be lacking."
          echo "MENU COLOR scrollbar   0  #40000000 #00000000 std      # Scroll bar"
          echo "MENU COLOR pwdborder   0  #80ffffff #20ffffff std      # Password box wire-frame border"
          echo "MENU COLOR pwdheader   0  #80ff8080 #20ffffff std      # Password box header"
          echo "MENU COLOR pwdentry    0  #80ffffff #20ffffff std      # Password entry field"
          echo "MENU COLOR help        0  #c0ffffff #00000000 std      # Help text, if set via 'TEXT HELP ... ENDTEXT'"

          echo "LABEL Debian - Auto Installation"
          echo "    MENU LABEL ^1) Auto install Debian"
          echo "    MENU DEFAULT"
          echo "    KERNEL /boot/os/vmlinuz"
          #important, preseed file location need to be cdrom/preseed.cfg"
          echo "    APPEND initrd=/boot/os/initrd.gz preseed/file=/cdrom/preseed.cfg locale=${BOX_LOCALE} keymap=${BOX_KEYBOARD} language=${BOX_LANGUAGE_CODE} country=${BOX_COUNTRY_CODE} --"
          echo "    TEXT HELP"
          echo "    * This is an auto installation"
          echo "    * WARNING: ALL DATA ON DISKS WILL BE OVERWRITTEN WITHOUT ANY QUESTIONS"
          echo "    ENDTEXT"
          echo "LABEL Debian - Manual installation"
          echo "   MENU LABEL ^2) Manual Debian Installation"
          echo "   KERNEL  /boot/os/vmlinuz"
          echo "   APPEND initrd=/boot/os/initrd.gz --"
          echo "    TEXT HELP"
          echo "    * This is a manual installation"
          echo "    * NOTE: USE THIS MENU IF YOU WANT TO INSTALL DEBIAN INTERACTIVELY"
          echo "    ENDTEXT"
          # Warning this System Backup menu is beta and will not do anything. Will update in the future for backup function
          echo "LABEL Debian - System Backup"
          echo "MENU LABEL ^3) Debian Full System Backup"
          echo "   KERNEL  /boot/os/vmlinuz"
          echo "   APPEND initrd=/boot/os/initrd.gz --"
          echo "    TEXT HELP"
          echo "    * This is an operating system full backup mode"
          echo "    * NOTE: USE THIS MENU IF YOU WANT TO MAKE FULL BACKUP (TESTING)"
          echo "    ENDTEXT"

        } >"${isodir_write}/isolinux/isolinux.cfg"

        _echo "$(msg cyan)Writing and fixing md5sum checksum in ${isodir_write} ...$(msg end)" --name
        cp -p "${isodir_write_tmp}/md5sum.txt" "${isodir_write}"
        rm -rf "${isodir_write_tmp}"
        cd_to_path "${isodir_write}"

        chmod +w md5sum.txt
        find . -follow -type f ! -name md5sum.txt -print0 | xargs -0 md5sum >tmpfile && mv tmpfile md5sum.txt
        chmod -w md5sum.txt
        echo ""

        _echo "$(msg cyan)Creating the final ISO file ...$(msg end)" --name
        xorriso -as mkisofs \
          -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
          -c isolinux/boot.cat \
          -b isolinux/isolinux.bin \
          -no-emul-boot \
          -boot-load-size 4 \
          -boot-info-table \
          -eltorito-alt-boot \
          -e boot/grub/efi.img \
          -no-emul-boot \
          -isohybrid-gpt-basdat \
          -o "${debian_isofile_final}" \
          "${isodir_write}"
        echo ""

        # Copying to shared folder
        _echo "$(msg cyan)Creating a copy of ISO file from ${debian_isofile_final} as ${debian_iso_complete_file} ...$(msg end)" --name
        cp "${debian_isofile_final}" "${debian_iso_complete_file}"

        if [[ "${upload_to_dropbox}" == "true" ]]; then
          # Uploading to dropbox and generating link
          _echo "$(msg cyan)Uploading local file ${debian_isofile_final} into dropbox remote location /files/${debian_isofile_final_base_name} ...$(msg end)" --name

          dropbox_api upload --source "${debian_isofile_final}" --destination "/files"
          echo ""
          _echo "$(msg cyan)Generating uploaded file link of ${debian_isofile_final} ...$(msg end)" --name
          file_direct_link=$(dropbox_api get-link --destination "/files" --filename "${debian_isofile_final}" --scripting)
          echo "file_direct_link is ${file_direct_link}"
          _echo "$(msg newline)" --plain

          _echo "$(msg cyan)Creating automation script for installing operating system remotely into ${CODE_PATH}/ssh_scripts/os_write_ag.sh ...$(msg end)" --name
          {
            echo "#!/bin/bash"
            echo "# ==============================================="
            echo "# This script file was generated by ${SCRIPT_NAME}"
            echo "# This script is used to write OS into /dev/sda"
            echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
            echo "# ==============================================="
            echo "wget -O mini.iso ${file_direct_link}"
            echo "dd if=mini.iso of=/dev/sda"
            # This is needed to force reboot especially for rescue mode.
            echo "reboot -f"
            echo "# Put 2 times exit below to safely exit the script if the first exit is not executed"
            echo "exit"
            echo "exit"
          } >"${CODE_PATH}/ssh_scripts/os_write_ag.sh"

          _echo "$(msg cyan)Generating rescue disk command for manual installation ...$(msg end)" --name

          {
            echo "# ==============================================="
            echo "# This manual file was generated by ${SCRIPT_NAME}"
            echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
            echo "# ==============================================="
            echo "# Download link available at:"
            echo "wget -O mini.iso \"${file_direct_link}\""
            echo "# Operating system installation script available at:"
            echo "${CODE_PATH}/ssh_scripts/os_write_ag.sh"
            echo "dd if=mini.iso of=/dev/sda"
          } >"$(dirname "${debian_iso_complete_file}")/install.txt"
          echo ""
          _echo "$(msg cyan)ISO direct link is: ${file_direct_link}$(msg end)" --name
          if [ ${write_script} == "true" ]; then

            _echo "$(msg red)==================================$(msg end)" --plain
            _echo "$(msg newline)" --plain
            _echo "$(msg green)wget -O mini.iso \"${file_direct_link}\"$(msg end)" --plain
            _echo "$(msg green)dd if=mini.iso of=/dev/sda$(msg end)" --plain
            _echo "$(msg green)mkdir /mnt/iso$(msg end)" --plain
            _echo "$(msg green)mount mini.iso /mnt/iso$(msg end)" --plain
            _echo "$(msg green)echo \"\"$(msg end)" --plain
            _echo "$(msg newline)" --plain
            _echo "$(msg red)==================================$(msg end)" --plain
            _echo "$(msg newline)" --plain
          fi
          echo ""
        fi

        _echo "$(msg cyan)Removing current working directories ...$(msg end)" --name
        rm -rf "${isodir_write}"
        echo ""
        _echo "$(msg cyan)Removing current preseed configuration file ...$(msg end)" --name
        rm -rf "${preseed_file}"

        # My custom method
      else
        _echo "$(msg red)Error, unknown type or method for creating ISO file ${iso_type}!$(msg end)" --name --verbose 3
        _exit 147
      fi
    #elif iso is ubuntu

    fi
  elif [[ "${action}" == "create-rescue-iso" ]]; then

    # TODO this is hardcoded, fix later.
    :
    exit 1

    install_required "apt:genisoimage" "apt:wget" "apt:pwgen" "apt:whois" "apt:xorriso" "apt:debconf" "apt:isolinux" "apt:syslinux-utils" "apt:squashfs-tools" "apt:putty-tools"
    dbx_cli="${SCRIPT_PATH}/storage/os/debian/usr/local/maxicode/maxicloud/dropbox/dbx"
    if [[ "${HOST_MAX_PROCESSOR}" -lt 2 ]]; then
      _echo 'red' "Warning, this process will run slower when using compression tool because HOST_MAX_PROCESSOR is set less than 2"
      echo ""
    fi
    echo "Creating a new RSA Key for rescue root login ..."
    ssh_api "create-key-with-putty" "rescue" "root" "${BOX_HOSTNAME_FQDN}_secure_auth"

    # Good guide : https://www.dotpointer.ga/?section=notes&view=note&id_notes=164
    # Good guide 2: https://rmprepusb.com/tutorials/011-make-an-image-recovery-usb-drive-using-finnix/
    local action="$1"
    local retval=0
    local method="$1"
    local option="$2"
    local root_temp_path isofile isofile_final isomount_location finnix_select_version isodir_write iso_url isofile_final_base_name file_direct_link

    if [ $# -gt 3 ]; then
      echo "Argument shouldn't be more than 3 for now. See --help for more information"
      _exit 1
    fi
    root_temp_path="/root/tmp_iso/debian"
    isofile="${root_temp_path}/finnix-122.iso"
    isofile_final="${root_temp_path}/finnix_mod.iso"
    isofile_final_base_name="$(basename -- ${isofile_final})"
    iso_output_path="/mnt/c/Users/Maxibi/IdeaProjects/maxinet/storage/os/debian/finnixmod.iso"
    isomount_location="/mnt/mount_riso"
    isodir_write="${root_temp_path}/riso-rw"

    #https://www.finnix.org/releases/122/finnix-122.iso
    finnix_select_version="122"

    iso_url="https://www.finnix.org/releases/${finnix_select_version}/finnix-${finnix_select_version}.iso"

    _echo "$(msg cyan)Removing previous file ${isofile_final} ...$(msg end)" --name
    rm -rf "${isofile_final}"

    echo ""
    echo "$(msg cyan)Removing previous file ${isodir_write} ...$(msg end)" --name
    rm -rf "${isodir_write}"

    mkdir -p "${root_temp_path}"
    mkdir -p "${isomount_location}"
    mkdir -p "${isodir_write}"
    echo ""

    echo "Creating a custom Finnix rescue disk for hard disk booting ..."
    echo ""
    if [[ "${option}" == "--update-iso" || -z "${option}" ]]; then
      if [ -f "${isofile}" ]; then
        rm -rf "${isofile}"
        echo "Re-downloading system image ..."
      else
        echo "Downloading new system image ..."
      fi

      wget -nc -O "${isofile}" "${iso_url}" || true
    elif [[ "${option}" == "--no-update-iso" ]]; then
      if [ -f "${isofile}" ]; then
        echo "Using the existing ISO file ..."
      else
        echo "Warning, existing ISO file is missing! Use --update-iso option to download new file"
        _exit 1
      fi
      # Do nothing
    else
      echo "Invalid option supplied: ${option} on ${FUNCNAME[0]}"
      echo "${SCRIPT_NAME} ${action} --update-iso , to download the new ISO file where --update-iso is a default command if not specified"
      echo "${SCRIPT_NAME} ${action} --no-update-iso , to use existing ISO file"
      _exit 1
    fi
    echo ""
    echo "Copying ISO file content into writeable directory ${isodir_write} ..."
    xorriso -osirrox on -indev ${isofile} -extract / ${isodir_write}/
    echo ""
    echo "Removing initial ISO file ..."
    rm -rf "${isofile}"
    echo ""
    echo "Disabling startup timer menu (straight boot to the default menu) ..."
    sed -i "s/timeout .*/timeout 1/" ${isodir_write}/isolinux/isolinux.cfg
    echo ""
    #echo "Adding noeject and noprompt boot parameter at grub.cfg ..."
    #{
    #  echo "source /boot/grub/config.cfg"
    #  echo "# Live boot"
    #  echo "menuentry \"Live system\" --hotkey=l {"
    #  echo "    linux	/live/vmlinuz-5.10.0-3-amd64 quiet"
    #  echo "    initrd	/live/initrd.img-5.10.0-3-amd64"
    #  echo "}"
    #} >${isodir_write}/boot/grub/grub.cfg
    echo ""
    echo "Creating startup script on startup ..."
    #Guide here: https://www.finnix.org/Overlays (Startup shell scripts)
    mkdir -p "${isodir_write}/finnix/arch/indep/rc"
    echo "#!/bin/bash" >"${isodir_write}/finnix/arch/indep/rc/initial.sh"
    echo "#any startup script here" >>"${isodir_write}/finnix/arch/indep/rc/initial.sh"
    chmod +x "${isodir_write}/finnix/arch/indep/rc/initial.sh"
    echo ""
    echo "Creating working directory ${isodir_write}/live/workdir"
    mkdir -p "${isodir_write}/live/workdir"
    echo ""
    echo "Moving ${isodir_write}/live/filesystem.squashfs into ${isodir_write}/live/workdir ..."
    mv "${isodir_write}/live/filesystem.squashfs" "${isodir_write}/live/workdir"
    echo ""
    cd_to_path "${isodir_write}/live/workdir"
    echo "Extracting squashfs file filesystem.squashfs ..."
    unsquashfs -processors "${HOST_MAX_PROCESSOR}" filesystem.squashfs
    echo ""
    echo "Removing the old filesystem.squashfs file ..."
    rm -rf filesystem.squashfs
    echo ""
    #exit 1
    # Now we have all file in here: isodir_write/live/workdir/squashfs-root/*
    echo "Creating .ssh directory in ${isodir_write}/live/workdir/squashfs-root/root/.ssh ..."
    mkdir -p "${isodir_write}/live/workdir/squashfs-root/root/.ssh"
    echo ""
    echo "Copying RSA certificate in ${isodir_write}/live/workdir/squashfs-root/root/.ssh/authorized_keys ..."

    #cp "${SCRIPT_PATH}/secure/rescue_root_${BOX_HOSTNAME_FQDN}.id_rsa.pub" "${isodir_write}/live/workdir/squashfs-root/root/.ssh/authorized_keys"
    ssh_api "get-pubkey" "rescue" "root" >"${isodir_write}/live/workdir/squashfs-root/root/.ssh/authorized_keys"

    echo ""
    echo "Raising permission of .ssh folder ..."
    chmod -R go-rwx "${isodir_write}/live/workdir/squashfs-root/root/.ssh"
    echo ""
    echo "Disabling SSH root login in sshd_config ..."
    sed -i 's/^.*PermitRootLogin.*/PermitRootLogin no/g' "${isodir_write}/live/workdir/squashfs-root/etc/ssh/sshd_config"
    echo ""

    echo "Changing SSH login port to ${RESCUE_SSH_PORT} ..."
    sed -i "s/#Port 22/Port ${RESCUE_SSH_PORT}/" "${isodir_write}/live/workdir/squashfs-root/etc/ssh/sshd_config"
    echo ""

    echo "Creating startup script at .profile to restart ssh on startup ..."
    echo "systemctl restart ssh" >>"${isodir_write}/live/workdir/squashfs-root/root/.profile"
    #chmod +x "${isodir_write}/live/workdir/squashfs-root/etc/rc.local"
    echo ""

    echo "Recreating the squashfs	filesystem from filesystem.squashfs ..."
    mksquashfs squashfs-root filesystem.squashfs -b 1024k -comp xz -Xbcj x86 -e boot -processors "${HOST_MAX_PROCESSOR}"
    echo ""

    echo "Moving filesystem.squashfs into ${isodir_write}/live/filesystem.squashfs ..."
    mv filesystem.squashfs ${isodir_write}/live/filesystem.squashfs
    echo ""
    echo "Removing working directory ..."
    rm -rf ${isodir_write}/live/workdir
    echo ""
    cd_to_path "${isodir_write}"
    echo "Creating new sha256sum checksum for sha256sum.txt ..."
    chmod +w sha256sum.txt
    find "${isodir_write}" -follow -type f ! -name sha256sum.txt -print0 | xargs -0 sha256sum >sha256sum_tmp.txt
    mv -f sha256sum_tmp.txt sha256sum.txt
    chmod -w sha256sum.txt
    echo ""
    echo "Creating standalone ISO installation inside ${isofile_final} ..."
    xorriso -as mkisofs \
      -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
      -c isolinux/boot.cat \
      -b isolinux/isolinux.bin \
      -no-emul-boot \
      -boot-load-size 4 \
      -boot-info-table \
      -eltorito-alt-boot \
      -isohybrid-gpt-basdat \
      -o ${isofile_final} \
      ${isodir_write}

    # Do not quote the path. If quote it will become redundant path: '/root/tmp_iso/debian/riso-rw/~/tmp_iso/debian/riso-rw'
    echo ""

    # Copying to shared folder
    echo "Creating installation disk at ${iso_output_path} ..."
    cp "${isofile_final}" "${iso_output_path}"
    echo ""
    echo "Copying RSA private (with putty) keys inside ISO output ..."
    cp "${rsa_private_key}" "$(dirname "${iso_output_path}")/"
    cp "${rsa_private_key_ppk}" "$(dirname "${iso_output_path}")/"
    # Uploading to dropbox
    echo ""
    echo "Uploading ${isofile_final} into dropbox /files/${isofile_final_base_name} ..."
    ${dbx_cli} upload "${isofile_final}" "/files"

    echo "Creating download link ..."
    file_direct_link=$(${dbx_cli} share "/files/${isofile_final_base_name}" | awk '{ print $4}' | sed 's/0$/1/g')
    echo "File direct link is: ${file_direct_link}"
    echo ""
    echo "Creating rescue disk script ..."
    _echo 'red' "=================================="
    echo ""
    echo "wget -O mini.iso \"${file_direct_link}\"" >"$(dirname "${iso_output_path}")/install.txt"
    echo "dd if=mini.iso of=/dev/sda" >>"$(dirname "${iso_output_path}")/install.txt"
    _echo 'green' "wget -O mini.iso \"${file_direct_link}\""
    _echo 'green' "dd if=mini.iso of=/dev/sda"
    _echo 'green' "mkdir /mnt/iso"
    _echo 'green' "mount mini.iso /mnt/iso"
    _echo 'green' "echo \"\""
    echo ""
    _echo 'red' "=================================="
    echo ""

    echo "Copying script into linode script ${SCRIPT_PATH}/dns/linode... "
    {
      echo "#!/bin/bash"
      echo "wget -O mini.iso ${file_direct_link}"
      echo "dd if=mini.iso of=/dev/sda"
      # Need this option to reboot when reboot check
      echo "reboot -f"
      echo "exit 0"
    } >"${SCRIPT_PATH}/dns/linode/rescue_write.sh"

    echo "Removing working directory ..."
    rm -rf "${isodir_write}"

  else

    _echo "$(msg red)Error, unknown action passed for iso_api ${action}$(msg end)" --name --verbose 3
    _exit 147
  fi

}

# This function allows Directadmin to restart quickly but we don't take priority on other pending tasks.
# Better to restart DA with task.queue (this is what most documentation do) because DA needs to respect task.queue process
function restart_da() {
  echo "" 2>&1 | tee -a "${REPORT_FILE}"
  local wait_duration task_queue_file
  wait_duration=10
  # Directadmin recommends 60 seconds (or 1 minute). Longer than this something wrong with the task.queue
  max_wait=240
  task_queue_file="/usr/local/directadmin/data/task.queue"
  if [ -s ${task_queue_file} ]; then
    echo "[${SCRIPT_NAME}]: Warning, Directadmin task.queue still has pending task(s) to be executed with the following contents:" 2>&1 | tee -a "${REPORT_FILE}"
    echo ""
    echo "--"
    cat "${task_queue_file}"
    echo "--"
    echo "Waiting ${wait_duration} seconds to finish the pending task(s) ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep ${wait_duration}
    ((HOLD_SECONDS = HOLD_SECONDS + wait_duration))
    echo "Total sleep time in second: ${HOLD_SECONDS}"
    if [ "${HOLD_SECONDS}" -gt ${max_wait} ]; then
      # Force restart if waiting time is longer than 1 minute because task.queue maximum execution time is only 1 minute based on DA documentation
      # https://docs.directadmin.com/directadmin/general-usage/task-queue-processor/
      echo "[${SCRIPT_NAME}]: Warning, task.queue has not finished executing task(s) for more than ${max_wait} seconds. Forcing restart ..."
      echo "[${SCRIPT_NAME}]: Restarting Directadmin ..." 2>&1 | tee -a "${REPORT_FILE}"
      echo "action=directadmin&value=restart" >>/usr/local/directadmin/data/task.queue
      /usr/local/directadmin/dataskq d2000
    else
      # recursive function call again to recheck the task.queue content until condition satisfied and Directadmin will restart in clean mode
      restart_da
    fi
  else
    echo "[${SCRIPT_NAME}]: Restarting Directadmin ..." 2>&1 | tee -a "${REPORT_FILE}"
    # Writing restart query in task.queue
    echo "action=directadmin&value=restart" >>/usr/local/directadmin/data/task.queue
    # Force restart with debugging level d2000
    # this is optional because we knew no other pending tasks will be running at this condition
    /usr/local/directadmin/dataskq d2000
  fi
  echo "" 2>&1 | tee -a "${REPORT_FILE}"
}
# This is a linode API admin function used to manage linode server
# Use <script_name> --linode-api --help for more information
function linode_api_admin() {
  # local variables
  local action retval argnum
  local temp verbose log_level scripting default allow_duplicate_entry \
    linode_label domain domain_type domain_email domain_ttl \
    record_type record_name record_value record_ttl record_priority \
    label_devsda label_devsdb label_devsdc label_devsdd label_devsde label_devsdf label_devsdg label_devsdh \
    until_status linode_config_label linode_disk_label linode_disk_filetype linode_disk_size linode_config_comments \
    linode_config_virtual_mode linode_config_kernel linode_config_runlevel linode_config_memory_limit linode_config_rootdev \
    linode_config_enable_distro_helper linode_config_disable_update_db linode_config_enable_dep_helper linode_config_automount_devtmpfs \
    linode_config_autoconf_network recovery_mode_shutdown
  action="$1"
  argnum="$#"
  # This variable linode_max_page is important, when using linode-cli to obtain data, we need to assign limit for it.
  # If we don't, we might not be able to get the correct output. Depends on the record, mine maximum page for record would be 2,
  # if you have long record increase this value (increasing this value affects performance when query)
  linode_max_page=2

  if [ ${argnum} -eq 0 ]; then
    echo "Error, no argument is supplied. Use [ ${SCRIPT_NAME} --linode-api --help ] to see the valid options"
    exit 1
  fi
  # do not use --type, it is a reserved keyword
  long_opts="help,verbose:,log-level:,quiet,scripting,default,allow-duplicate-entry,linode-label:,domain:,domain-type:,domain-email:, \
  domain-ttl:,record-type:,record-name:,record-value:,record-ttl:,record-priority:,label-devsda:,label-devsdb:,label-devsdc:,label-devsdd:,label-devsde:, \
  label-devsdf:,label-devsdg:,label-devsdh:,until-status:,linode-config-label:,linode-disk-label:,linode-disk-filetype:,linode-disk-size:,linode-config-comments:, \
  linode-config-virtual-mode:,linode-config-kernel:,linode-config-runlevel:,linode-config-memory-limit:,linode-config-rootdev:,linode-config-enable-distro-helper, \
  linode-config-disable-update-db, linode-config-enable-dep-helper, linode-config-automount-devtmpfs,linode-config-autoconf-network,recovery-mode-shutdown"

  options=$(getopt -o hvlqsd --long "${long_opts}" -n "${FUNCNAME[0]}@${action} in ${SCRIPT_NAME}" -- "$@")
  retval=$?
  if [ ${retval} != 0 ]; then
    echo "Error, invalid parsed data. Terminating..." >&2
    exit 1
  fi

  # Must quote this option variable
  eval set -- "${options}"
  verbose=6 # default value=6
  log_level="${LOG_VERBOSITY_LEVEL}}"
  scripting=false
  default=false
  allow_duplicate_entry=false
  linode_label=""                            # server.test.com, myserver, mybigserver (recommend to use server domain in fqdn format eg: server.test.com).
  domain=""                                  # test.com
  domain_type=""                             # master, slave
  domain_email=""                            # user@test.com
  domain_ttl=""                              # 300(5m), 3600(1h), 7200(2h), 14400(4h), 28800(8h), 57600(16h), 0/86400(1d)-Default, 172800(2d), 345600(4d), 691200(8d), 604800(1w), 1209600(2w), 2419200(4w).
  record_type=""                             # a, aaaa, txt, ns, mx, cname, srv, caa
  record_name=""                             # _key.test.com
  record_value=""                            # 2(,@s*passWok
  record_ttl=""                              # 300(5m), 3600(1h), 7200(2h), 14400(4h), 28800(8h), 57600(16h), 0/86400(1d)-Default, 172800(2d), 345600(4d), 691200(8d), 604800(1w), 1209600(2w), 2419200(4w).
  record_priority=""                         # 0-255 - 10 is mostly default value
  label_devsda=""                            # OS_Disk, Backup_Volume, Anything
  label_devsdb=""                            # OS_Disk, Backup_Volume, Anything
  label_devsdc=""                            # OS_Disk, Backup_Volume, Anything
  label_devsdd=""                            # OS_Disk, Backup_Volume, Anything
  label_devsde=""                            # OS_Disk, Backup_Volume, Anything
  label_devsdf=""                            # OS_Disk, Backup_Volume, Anything
  label_devsdg=""                            # OS_Disk, Backup_Volume, Anything
  label_devsdh=""                            # OS_Disk, Backup_Volume, Anything
  until_status=""                            # OS_Disk, Backup_Volume, Anything
  linode_config_label=""                     # Boot_Config, OS_Config, Anything
  linode_disk_label=""                       # OS_Disk, My_Disk, Anything
  linode_disk_filetype=""                    # raw, swap, ext3, ext4, initrd
  linode_disk_size=""                        # 1MB 2GB 3TB (Minimum supporting unit is MB - same as linode, Max supporting unit is TB), if no unit specified by default is MB
  linode_config_comments=""                  # This is a config profile ABC
  linode_config_virtual_mode="paravirt"      # paravirt, fullvirt. The default value is paravirt if not set
  linode_config_kernel="linode/latest-64bit" # linode/direct-disk (this is and example of the ID for direct disk kernel). Default if not specified is linode/latest-64bit. To get more kernel ID, run linode-cli kernels list
  linode_config_runlevel="default"           # default, single, binbash. The default value if not specified is default
  linode_config_memory_limit=""              # maximum RAM is default to RAM SIZE of the system from Config File
  linode_config_rootdev="/dev/sda"           # /dev/sda, /dev/sdb, /custom_path. If not specified default value is /dev/sda
  linode_config_enable_distro_helper=false   # default value in linode is true but here i should make it false
  linode_config_disable_update_db=false      # default value in linode is true but here i should make it false
  linode_config_enable_dep_helper=false      # default value in linode is true but here i should make it false
  linode_config_automount_devtmpfs=false     # default value in linode is true but here i should make it false
  linode_config_autoconf_network=false       # default value in linode is true but here i should make it false
  recovery_mode_shutdown=false
  while true; do
    case "$1" in
    -h | --help)
      manual "${FUNCNAME[0]}"
      shift
      exit 0
      ;;
    -v | --verbose)
      verbose="$2"
      shift 2
      ;;
    -l | --log-level)
      log_level="$2"
      LOG_VERBOSITY_LEVEL="${log_level}"
      [[ ${LOG_VERBOSITY_LEVEL} == "8" ]] && set -x
      shift 2
      ;;
    -q | --quiet)
      verbose=-1
      set +x
      shift
      ;;
    -s | --scripting)
      verbose=-1
      set +x
      scripting=true
      shift
      ;;
    -d | --default)
      default=true
      shift
      ;;
    --allow-duplicate-entry)
      allow_duplicate_entry=true
      shift
      ;;
    --domain)
      domain="$2"
      shift 2
      ;;
    --domain-type)
      domain_type="$2"
      shift 2
      ;;
    --domain-email)
      domain_email="$2"
      shift 2
      ;;
    --domain-ttl)
      domain_ttl="$2"
      shift 2
      ;;
    --record-type)
      record_type="$2"
      record_type="${record_type^^}"
      shift 2
      ;;
    --record-name)
      record_name="$2"
      shift 2
      ;;
    --record-value)
      record_value="$2"
      shift 2
      ;;
    --record-ttl)
      record_ttl="$2"
      shift 2
      ;;
    --record-priority)
      record_priority="$2"
      shift 2
      ;;
    --linode-label)
      linode_label="$2"
      shift 2
      ;;
    --label-devsda)
      label_devsda="$2"
      shift 2
      ;;
    --label-devsdb)
      label_devsdb="$2"
      shift 2
      ;;
    --label-devsdc)
      label_devsdc="$2"
      shift 2
      ;;
    --label-devsdd)
      label_devsdd="$2"
      shift 2
      ;;
    --label_devsde)
      label_devsde="$2"
      shift 2
      ;;
    --label-devsdf)
      label_devsdf="$2"
      shift 2
      ;;
    --label-devsdg)
      label_devsdg="$2"
      shift 2
      ;;
    --label-devsdh)
      label_devsdh="$2"
      shift 2
      ;;
    --until-status)
      until_status="$2"
      shift 2
      ;;
    --linode-config-label)
      linode_config_label="$2"
      shift 2
      ;;
    --linode-disk-label)
      linode_disk_label="$2"
      shift 2
      ;;
    --linode-disk-filetype)
      linode_disk_filetype="$2"
      shift 2
      ;;
    --linode-disk-size)
      linode_disk_size="$2"
      temp="${linode_disk_size}"
      # can be 10MB 10 MB or MB10 or MB 10
      # If mistaken input this 10 MB s = 10 s (invalid)
      # If mistaken input this 10 MB GB = 10 GB (valid), it will ignore the first unit
      linode_disk_size=$(echo "${temp}" | grep -Eo '[0-9]+' | tail -n1)
      linode_disk_unit=$(echo "${temp}" | grep -Eo '[[:alpha:]]+' | tail -n1)

      if [ -z "${linode_disk_unit}" ]; then
        linode_disk_unit="MB"
      fi
      if [[ "${linode_disk_unit^^}" == +(MB) ]]; then
        :
      elif [[ "${linode_disk_unit^^}" == +(GB) ]]; then
        ((linode_disk_size = linode_disk_size * 1000))
      elif [[ "${linode_disk_unit^^}" == +(TB) ]]; then
        ((linode_disk_size = linode_disk_size * 1000000))
      fi
      shift 2
      ;;
    --linode-config-comments)
      linode_config_comments="$2"
      shift 2
      ;;
    --linode-config-virtual-mode)
      linode_config_virtual_mode="$2"
      # TODO Validate this in ifelse only 2 values can be use
      shift 2
      ;;
    --linode-config-kernel)
      linode_config_kernel="$2"
      shift 2
      ;;
    --linode-config-runlevel)
      linode_config_runlevel="$2"
      shift 2
      ;;
    --linode-config-memory-limit)
      linode_config_memory_limit="$2"
      shift 2
      ;;
    --linode-config-rootdev)
      linode_config_rootdev="$2"
      shift 2
      ;;
    --linode-config-enable-distro-helper)
      linode_config_enable_distro_helper=true
      shift
      ;;
    --linode-config-disable-update-db)
      linode_config_disable_update_db=true
      shift
      ;;
    --linode-config-enable-dep-helper)
      linode_config_enable_dep_helper=true
      shift
      ;;
    --linode-config-automount-devtmpfs)
      linode_config_automount_devtmpfs=true
      shift
      ;;
    --linode-config-autoconf-network)
      linode_config_autoconf_network=true
      shift
      ;;
    --recovery-mode-shutdown)
      recovery_mode_shutdown=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
    esac
  done
  [[ ${scripting} == "false" ]] && exec_time start "linode_api_admin"
  # Package requirement installation for using linode:
  # python3-pip is for running pip3 command
  # autoconf is used to install make package (we want to install this https://github.com/vyos/ipaddrcheck)
  install_required "apt:bind9-host" "apt:python3-pip" "apt:jq" "apt:autoconf"
  if ! command -v linode-cli &>/dev/null; then
    [[ ${scripting} == "false" ]] && _echo "Warning, missing linode-cli component. Installing linode-cli ..." --name --verbose 4
    [[ ${scripting} == "false" ]] && _echo "$(pip3 install linode-cli --upgrade)" --name --verbose 5
    PIP_ALWAYS_UPDATE="no"
  else
    if [ "${PIP_ALWAYS_UPDATE}" == "yes" ]; then
      # We do this on silent mode
      [[ ${scripting} == "false" ]] && _echo "Updating linode-cli to use new API version ..." --name --verbose 7
      # This will resolve this common issue: https://www.linode.com/community/questions/18361/linode-cli-version-mismatch
      [[ ${scripting} == "false" ]] && _echo "$(pip3 install linode-cli --upgrade)" --name --verbose 7 #--quiet
      PIP_ALWAYS_UPDATE="no"
      [[ ${scripting} == "false" ]] && _echo "" --plain

    fi
  fi
  if [ ! -s /root/.config/linode-cli ]; then
    [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, linode-cli API config is missing. Writing linode-cli API config at /root/.config/linode-cli ...$(msg end)" --name --verbose 4
    mkdir -p /root/.config
    touch /root/.config/linode-cli
    {
      echo "[DEFAULT]"
      echo "default-user = ${DNS_PROVIDER_USER}"
      echo "[${DNS_PROVIDER_USER}]"
      echo "token = ${DNS_PROVIDER_API_KEY}"
    } >/root/.config/linode-cli
  fi
  # Important: The command linode-cli -v needs linode-cli config completely configured. That means, /root/.config/linode-cli must exist:
  # linode-cli -v
  # Do another check for linode-cli and assign a variable for it. We will use this variable to run linode-cli
  if command -v linode-cli &>/dev/null; then
    LINODE_CLI_BIN=$(command -v linode-cli)
  else
    _echo "$(msg yellow)Warning, unable to find [ linode-cli ] binary. Please manually inspect why$(msg end)" --name --verbose 4
    _exit 1
  fi
  # Do another check for jq for the second time and assign a variable for it. We will use this variable to run jq
  if command -v jq &>/dev/null; then
    JQ_BIN=$(command -v jq)
  else
    _echo "$(msg yellow)Warning, unable to find [ jq ] binary. Please manually inspect why$(msg end)" --name --verbose 4
    _exit 1
  fi
  # Example: maxinet --linode-api get-linode-id --linode-label server.test.com
  # For more info use maxinet --linode-api --help
  # return code 2 = empty result
  if [[ "${action}" == "get-linode-id" ]]; then
    # This scope is completed
    local return_label
    # ===== VALIDATION =====
    # Validate linode label (linode label should renamed as FQDN), it will just give warning as suggestion (not exit)

    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi
    if [ -z "${linode_label}" ]; then
      _echo "$(msg red)Error, --linode-label is empty. Please, provide --linode-label (eg: --linode-label test.domain.com)!$(msg end)" --name --verbose 3
      # Show total running time before exit this scope
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi
    [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Getting linode ID for ${linode_label} ...$(msg end)" --name --verbose 7
    return_label=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -n "${return_label}" ]; then
      echo "${return_label}"
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 0
    else
      _echo "$(msg red)Error, no linode label found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      # Show total running time before exit this scope
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi
    [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
    # maxinet --linode-api get-linode-status test.server.com
    # return status: 1=online, 2=rebooting, 3=offline
  elif [[ "${action}" == "get-linode-status" ]]; then
    # This scope is completed
    local linode_status
    # ===== VALIDATION =====
    # Validate linode label (linode label should renamed as FQDN), it will just give warning as suggestion (not exit)
    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi
    if [ -z "${linode_label}" ]; then
      _echo "$(msg red)Error, --linode-label is empty. Please, provide --linode-label (eg: --linode-label test.domain.com)!$(msg end)" --name --verbose 3
      # Show total running time before exit this scope
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi
    [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Getting linode status for ${linode_label} ...$(msg end)" --name --verbose 7
    linode_status=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes list | ${JQ_BIN} -r ".[] | select(.label == \"${linode_label}\") | .status")
    if [ -n "${linode_status}" ]; then
      # Here is the result for linode status:

      echo "${linode_status}"
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      # Special return code
      if [ "${linode_status}" == "online" ]; then
        return 1
      elif [ "${linode_status}" == "rebooting" ]; then
        return 2
      elif [ "${linode_status}" == "offline" ]; then
        return 3
      else
        # Unknown code
        return 129
      fi
    else
      _echo "$(msg red)Error, no linode status found for --linode-label $(msg yellow)${linode_label}$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi
    # maxinet --linode-api get-domain-id server.com
    # return code 147 = error, return code 0 = success
  elif [[ "${action}" == "get-domain-id" ]]; then
    # This scope is completed and has perfect conditional for returning values
    local domain_id
    # Data validation
    # 1) Domain validation
    if is_valid domain "${domain}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --domain $(msg red)${domain}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      _echo "$(msg yellow)Warning, the given --domain $(msg red)${domain}$(msg green) is not FQDN$(msg end)" --name --verbose 4
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi
    domain_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains list | ${JQ_BIN} ".[] | select(.domain == \"${domain}\") | .id")
    if [ -n "${domain_id}" ]; then
      # Here is the result for domain ID:
      echo "${domain_id}"
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 0
    else
      _echo "$(msg red)Error, no domain ID is found for --domain $(msg red)${domain}$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi
  elif [[ ${action} == "create-domain" ]]; then
    local retval=1
    # Default values (if --default options is enabled)
    if [[ ${default} == true ]]; then
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)The option --default is set. The following options will have default values as follow: $(msg end)" --name
      if [ -z "${domain_type}" ]; then
        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)--domain-type=master$(msg end)" --name
        domain_type="master"
      fi
      if [ -z "${domain_email}" ]; then
        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)--domain-email=webmaster@${domain}$(msg end)" --name
        domain_email="webmaster@${domain}"
      fi

      if [ -z "${domain_ttl}" ]; then
        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)--domain-ttl=300$(msg end)" --name
        domain_ttl="300"
      fi
    fi

    # Data validation
    # 1) Validate domain name

    if is_valid domain "${domain}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --domain $(msg red)${domain}$(msg green) is FQDN$(msg end)" --name --verbose 7
    else
      _echo "$(msg yellow)Warning, the given --domain $(msg red)${domain}$(msg green) is not FQDN$(msg end)" --name --verbose 4
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    #2) Validate domain type
    if is_valid "domain_type" "${domain_type}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --domain-type $(msg red)${domain_type}$(msg green) is valid$(msg end)" --name --verbose 7
    else
      _echo "$(msg yellow)Warning, the given --domain-type $(msg red)${domain_type}$(msg green) is not valid$(msg end)" --name
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    #3 ) Validate domain email
    if is_valid "email" "${domain_email}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --domain-email $(msg red)${domain_email}$(msg green) is valid$(msg end)" --name --verbose 7
    else
      _echo "$(msg yellow)Warning, the given --domain-email $(msg red)${domain_email}$(msg green) is not valid$(msg end)" --name
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    #4) Validate domain ttl
    if is_valid "domain_ttl" "${domain_ttl}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --domain-ttl $(msg red)${domain_ttl}$(msg green) is valid$(msg end)" --name --verbose 7
    else
      _echo "$(msg yellow)Warning, the given --domain-ttl $(msg red)${domain_ttl}$(msg green) is not valid$(msg end)" --name
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi
    [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Creating domain $(msg red)${domain}$(msg end) $(msg cyan)...$(msg end)" --name
    if [[ ${scripting} == "false" ]]; then
      ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains create --domain "${domain}" --type "${domain_type}" --soa_email "${domain_email}" --ttl_sec "${domain_ttl}"
      retval=$?
    else
      ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains create --domain "${domain}" --type "${domain_type}" --soa_email "${domain_email}" &>/dev/null
      retval=$?
    fi

    if [ "${retval}" -eq 0 ]; then
      echo "success"
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 0
    else
      _echo "$(msg red)[${retval}] Error, something wrong when creating domain $(msg red)${domain}!$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return ${retval}
    fi

  elif [[ "${action}" == "create-domain-record" || "${action}" == "add-domain-record" ]]; then
    local domain_id retval=1
    #linode_api_admin "add-dns-record" "maxibi.com" "TXT" "x._domainkey" "*i..2uiu1KJM@#9IU@J()!@IJI92" "5"
    # For mx record, linode_api_admin "add-dns-record" "maxibi.com" "MX" "mail" "sofibox.com." "5"
    #shift
    #local   retval add_dns_record
    # Data validation
    # 1) Validate domain name

    [[ ${scripting} == "false" ]] && _echo "Getting required domain ID for --domain ${domain} ..." --name --verbose 7
    domain_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains list | ${JQ_BIN} ".[] | select(.domain == \"${domain}\") | .id")

    if [ -z "${domain_id}" ]; then
      _echo "$(msg red)Error, no domain ID found for --domain ${domain}$(msg end)"
      return 147
    else
      # This validation argument required for all (put here to not redundant the codes)
      if is_valid domain "${domain}"; then
        [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --domain $(msg red)${domain}$(msg green) is FQDN$(msg end)" --name --verbose 7
      else
        _echo "$(msg yellow)Warning, the given --domain $(msg red)${domain}$(msg green) is not FQDN$(msg end)" --name --verbose 4
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      fi

      if is_valid record_type "${record_type}"; then
        [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-type $(msg red)${record_type}$(msg green) is valid$(msg end)" --name --verbose 7
      else
        _echo "$(msg yellow)Warning, the given --record-type $(msg red)${record_type}$(msg green) is not valid$(msg end)" --name --verbose 4
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      fi

      if is_valid "record_ttl" "${record_ttl}"; then
        [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-ttl $(msg red)${record_ttl}$(msg green) is valid$(msg end)" --name --verbose 7
      else
        _echo "$(msg yellow)Warning, the given --record-ttl $(msg red)${record_ttl}$(msg green) is not valid$(msg end)" --name
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      fi

      # For adding linode TXT record, record name is considered as hostname whereas record value is considered as record value
      # record name and record value can be empty
      # If we specify the value for record name, it must not contains invalid character
      if [ "${record_type}" == "TXT" ]; then
        # Scope completed v1
        if is_valid server_record_valid_character "${record_name}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-name $(msg red)${record_name}$(msg green) is valid character$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-name $(msg red)${record_name}$(msg green) is not valid character$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi
        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Creating TXT record name $(msg red)[${record_name}]$(msg end) $(msg cyan)...$(msg end)" --name

        if [[ ${scripting} == "false" ]]; then
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --ttl_sec "${record_ttl}"
          retval=$?
        else
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --ttl_sec "${record_ttl}" &>/dev/null
          retval=$?
        fi

      elif [ "${record_type}" == "MX" ]; then
        # Scope completed v1
        if is_valid server_record_valid_character "${record_name}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-name $(msg red)${record_name}$(msg green) (for name server) is valid character$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-name $(msg red)${record_name}$(msg green) (for name server) is not valid character$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi

        if is_valid domain "${record_value}" && is_valid server_record_valid_character "${record_value}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-value $(msg red)${record_value}$(msg green) (for subdomain) is FQDN and valid character$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-value $(msg red)${record_value}$(msg green) (for subdomain) is not FQDN or valid character$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi

        if is_valid "record_priority" "${record_priority}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-priority $(msg red)${record_priority}$(msg green) is valid$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-priority $(msg red)${record_priority}$(msg green) is not valid$(msg end)" --name
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi

        #linode-cli domains records-create ${sofibox_id} --type MX --name mail --target sofibox.com. --priority 10 --ttl_sec 1
        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Creating MX record name $(msg red)[${record_name}]$(msg end) $(msg cyan)...$(msg end)" --name

        if [[ ${scripting} == "false" ]]; then
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --priority "${record_priority}" --ttl_sec "${record_ttl}"
          retval=$?
        else
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --priority "${record_priority}" --ttl_sec "${record_ttl}" &>/dev/null
          retval=$?
        fi
      # In linode, record name is considered as subdomain where as record value is considered as name server
      # the record name (subdomain) is optional but if specified must be valid character for the record.
      # the record value (name server) is required and must be valid FQDN and valid character
      elif [ "${record_type}" == "NS" ]; then
        #Scope completed v1

        # subdomain can be anything except weird character.
        if is_valid server_record_valid_character "${record_name}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-name $(msg red)${record_name}$(msg green) (for subdomain) is valid character$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-name $(msg red)${record_name}$(msg green) (for subdomain) is not valid character$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi
        # This is special we for NS record we check that the record name is FQDN
        if is_valid domain "${record_value}" && is_valid server_record_valid_character "${record_value}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-value $(msg red)${record_value}$(msg green) (for name server) is FQDN and valid character$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-value $(msg red)${record_value}$(msg green) (for name server) is not FQDN or valid character$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi

        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Creating NS record name $(msg red)[${record_name}]$(msg end) $(msg cyan)...$(msg end)" --name

        if [[ ${scripting} == "false" ]]; then
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --ttl_sec "${record_ttl}"
          retval=$?
        else
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --ttl_sec "${record_ttl}" &>/dev/null
          retval=$?
        fi
        # Linode use the same entry for A and AAAA
      elif [[ "${record_type}" == "A" ]]; then
        if is_valid server_record_valid_character "${record_name}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-name $(msg red)${record_name}$(msg green) (for hostname) is valid character$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-name $(msg red)${record_name}$(msg green) (for hostname) is not valid character$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi

        if is_valid ipv4 "${record_value}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-value $(msg red)${record_value}$(msg green) (for IPv4 address) is valid$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-value $(msg red)${record_value}$(msg green) (for IPv4 address) is not valid$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi

        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Creating A record name $(msg red)[${record_name}]$(msg end) $(msg cyan)...$(msg end)" --name

        if [[ ${scripting} == "false" ]]; then
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --ttl_sec "${record_ttl}"
          retval=$?
        else
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --ttl_sec "${record_ttl}" &>/dev/null
          retval=$?
        fi

      elif [[ "${record_type}" == "AAAA" ]]; then
        if is_valid server_record_valid_character "${record_name}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-name $(msg red)${record_name}$(msg green) (for hostname) is valid character$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-name $(msg red)${record_name}$(msg green) (for hostname) is not valid character$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi

        if is_valid ipv6 "${record_value}"; then
          [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --record-value $(msg red)${record_value}$(msg green) (for IPv6 address) is valid$(msg end)" --name --verbose 7
        else
          _echo "$(msg yellow)Warning, the given --record-value $(msg red)${record_value}$(msg green) (for IPv6 address) is not valid$(msg end)" --name --verbose 4
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi

        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Creating A record name $(msg red)[${record_name}]$(msg end) $(msg cyan)...$(msg end)" --name

        if [[ ${scripting} == "false" ]]; then
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --ttl_sec "${record_ttl}"
          retval=$?
        else
          ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-create "${domain_id}" --type "${record_type}" --name "${record_name}" \
            --target "${record_value}" --ttl_sec "${record_ttl}" &>/dev/null
          retval=$?
        fi

      elif [ "${record_type}" == "CNAME" ]; then
        :
      elif [ "${record_type}" == "SRV" ]; then
        :
      elif [ "${record_type}" == "CAA" ]; then
        :
      fi

      if [ ${retval} = 0 ]; then
        echo "success"
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 0
      else
        _echo "$(msg red)[${retval}], something is wrong when executing DNS record into linode DNS management$(msg end)" --name --verbose 3
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return ${retval}
      fi

    fi

    # This action is used to check linode status until a specified condition and then it will break
    # Current accepted condition is running or offline passed via --until-status option
    # Usage:
    #linode_api_admin wait-linode-status --linode-label test.server.com --until-status running
  elif [[ "${action}" == "wait-linode-status" ]]; then
    local linode_id linode_status
    # Wait 2 seconds for the status to be new
    linode_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -z "${linode_id}" ]; then
      echo "Linode ID not found!"
      return 147
    fi
    sleep 2
    if [ "${until_status^^}" == "RUNNING" ]; then
      _echo "$(msg cyan)Waiting for linode ${linode_label} to have running status ...$(msg end)" --name
      linode_status=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
      if [[ "${linode_status}" == "running" ]]; then
        # test uncomment below later if not working
        _echo "$(msg yellow)Warning linode ${linode_label} is already in running mode$(msg end)" --name --verbose 3
        return 0
      else
        while :; do
          linode_status=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
          if [[ "${linode_status}" == "running" ]]; then
            _echo "$(msg green)Success, linode ${linode_label} is online.$(msg end)" --stop-spin
            break
          elif [[ "${linode_status}" == "offline" ]]; then
            # Force shutdown using lish_console command
            # Don't do this, this function does not execute command, just checking status
            #lish_console shutdown
            :
          else
            _echo "$(msg yellow)Linode status is ${linode_status}. Waiting for running status ...$(msg end)" --start-spin
          fi
        done
      fi
    elif [[ "${until_status^^}" == "OFFLINE" ]]; then
      _echo "$(msg cyan)Waiting for linode ${linode_label} to have offline status ...$(msg end)" --name
      linode_status=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
      if [[ "${linode_status}" == "offline" ]]; then
        _echo "$(msg yellow)Warning linode ${linode_label} is already in offline mode$(msg end)" --name --verbose 3
        return 0
      else
        while :; do
          linode_status=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
          if [[ "${linode_status}" == "offline" ]]; then
            _echo "$(msg green)Success, linode ${linode_label} is offline.$(msg end)" --stop-spin --name
            break
          else
            _echo "$(msg yellow)Linode status is ${linode_status}. Waiting for offline status ...$(msg end)" --start-spin --name
          fi
        done
      fi

    fi

  #linode_api_admin reboot-to-rescue --linode-label test.server.com --dev-sda "disk:Boot_Disk" --dev-sdb "disk:OS_Disk" --dev-sdc "volume:Volume_Disk"
  elif [[ "${action^^}" == +(REBOOT-TO-RESCUE|RESCUE-REBOOT|REBOOT-RESCUE|BOOT-TO-RESCUE|RESCUE-MODE) ]]; then
    # scope finish 0.1 --- see validation ...
    local linode_id retval=1 config_disk_vol

    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi

    [[ ${scripting} == "false" ]] && _echo "Getting required linode ID for --linode-label ${linode_label} ..." --name --verbose 7
    linode_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${linode_label}\") | .id")
    #echo "Linode ID : ${linode_id}"
    if [ -z "${linode_id}" ]; then
      _echo "$(msg red)Error, no linode label found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      return 147
    else
      # maximum letter is g because h is assigned for default Finnix Rescue Disk
      local disk_letters="a b c d e f g" label_type label_name label_disk_vol config_disk_vol disk_vol_id
      for letter in ${disk_letters}; do
        typeset -n "label_disk_vol"="label_devsd${letter}"

        label_type=$(echo "${label_disk_vol}" | awk -F: '{ print $1 }')
        label_name=$(echo "${label_disk_vol}" | awk -F: '{ print $2 }')
        #echo "label_type: ${label_type}"
        #echo "label name: ${label_name}"
        if [ "${label_type}" == "disk" ]; then
          disk_vol_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} ".[] | select(.label == \"${label_name}\") | .id")
        elif [ "${label_type}" == "volume" ]; then
          disk_vol_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings volumes list | ${JQ_BIN} ".[] | select(.label == \"${label_name}\") | .id")
        else
          continue
        fi
        if [ -z "${disk_vol_id}" ]; then
          _echo "$(msg red)Error, the ${label_type} label [${label_name}] does not exist. Please, make sure that the ${label_type} was created in linode$(msg end)" --name --verbose 3
          _exit 1
        fi
        config_disk_vol="${config_disk_vol} --devices.sd${letter}.${label_type}_id ${disk_vol_id}"
      done
      #echo "OPTIONS: ${config_disk_vol}"
      if [[ -z "${config_disk_vol}" ]]; then
        _echo "Config disk option is blank. Linode will boot into rescue mode without mounting any disks or volumes" --name --verbose 4
      else
        _echo "Notice, Linode will boot into rescue mode and mount the following options"
        echo ""
        _echo "OPTIONS: ${config_disk_vol}" --plain
        echo ""
      fi

      ${LINODE_CLI_BIN} linodes rescue --suppress-warnings "${linode_id}" ${config_disk_vol}

      #wait_until_linode_status_is running

      _echo "$(msg cyan)Putting linode ${linode_label} into rescue mode ...$(msg end)" --name
      while :; do
        linode_status=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
        if [[ "${linode_status}" == "running" ]]; then
          _echo "$(msg green)Success, linode ${linode_label} has been successfully booted into rescue mode.$(msg end)" --stop-spin --name
          break
        else
          _echo "$(msg cyan)Linode status is ${linode_status}. Waiting for running status ...$(msg end)" --start-spin --name
        fi
      done

    fi
  # linode_api_admin restart-linode --linode-label test.server.com --linode-config-label OS_Config
  elif [[ "${action^^}" == +(RESTART-LINODE|REBOOT-LINODE) ]]; then
    option="$2"
    local linode_id linode_config_id linode_api_exec
    # Required linode_id and linode_config_id

    # This is for faster server reboot syntax. For example to reboot, we do not need to specify many arguments.
    # maxinet --linode-api reboot-linode os (this will reboot using OS_Config), also works the same without 'os' argument
    # maxinet --linode-api reboot-linode boot (this will reboot using Boot_Config)
    if [[ -z "${option}" || "${option}" == "os" ]]; then
      linode_label="${BOX_HOSTNAME_FQDN}"
      linode_config_label="${LINODE_OS_CONFIG_LABEL}"
    elif [[ "${option}" == "boot" ]]; then
      linode_label="${BOX_HOSTNAME_FQDN}"
      linode_config_label="${LINODE_BOOT_CONFIG_LABEL}"
    elif [[ "${option}" == "rescue" ]]; then
      linode_label="${BOX_HOSTNAME_FQDN}"
      linode_config_label="${LINODE_RESCUE_CONFIG_LABEL}"
    fi
    echo "linode_label: ${linode_label}"
    echo "linode_config_label: ${linode_config_label}"

    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi

    [[ ${scripting} == "false" ]] && _echo "Getting required linode ID for --linode-label ${linode_label} ..." --name --verbose 7
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -z "${linode_id}" ]; then
      _echo "$(msg red)Error, no linode label ID found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      return 147
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
    fi
    [[ ${scripting} == "false" ]] && _echo "Getting required linode config ID for --linode-config-label ${linode_config_label} ..." --name --verbose 7
    linode_config_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes configs-list "${linode_id}" | ${JQ_BIN} ".[] | select(.label == \"${linode_config_label}\") | .id")
    if [ -z "${linode_config_id}" ]; then
      _echo "$(msg red)Error, no linode label config ID found for $(msg red)--linode-config-label ${linode_config_label}$(msg end)" --name --verbose 3
      return 147
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
    fi
    [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Rebooting linode ${linode_label} using config ${linode_config_label} ...$(msg end)" --name
    linode_api_exec=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes reboot "${linode_id}" --config_id "${linode_config_id}" 2> >(grep 'Linode busy'))
    if [ -n "${linode_api_exec}" ]; then
      _echo "$(msg yellow)Warning, Linode is busy. Re-executing linodes reboot in 10 seconds ...$(msg end)" --name --verbose 4
      sleep 10
      linode_api_exec=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes reboot "${linode_id}" --config_id "${linode_config_id}" 2> >(grep 'Linode busy'))
      if [ -n "${linode_api_exec}" ]; then
        _echo "$(msg yellow)Warning, Linode is busy. Re-executing linodes reboot in 10 seconds ...$(msg end)" --name --verbose 4
        sleep 10
        linode_api_exec=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes reboot "${linode_id}" --config_id "${linode_config_id}" 2> >(grep 'Linode busy'))
        if [ -n "${linode_api_exec}" ]; then
          _echo "$(msg red)Error, Linode is stuck with busy status for more than 20 seconds. Please inspect why.$(msg end)" --name --verbose 4
          exit 147
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        fi
      fi

    fi

    while :; do
      linode_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
      if [[ "${linode_status}" == "running" ]]; then
        _echo "$(msg green)Success, linode ${linode_label} has been successfully rebooted.$(msg end)" --stop-spin --name
        return 0
        #break
      else
        _echo "$(msg cyan)Linode ${linode_label}'s status is ${linode_status}. Waiting for running status ...$(msg end)" --start-spin --name
      fi
    done

  elif [[ "${action^^}" == +(SHUTDOWN-LINODE|POWEROFF-LINODE|TURNOFF-LINODE) ]]; then
    # This scope is completed v1
    local linode_id linode_api_exec ssh_pid
    # Required only linode_id
    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi

    [[ ${scripting} == "false" ]] && _echo "Getting required linode ID for --linode-label ${linode_label} ..." --name --verbose 7
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -z "${linode_id}" ]; then
      _echo "$(msg red)Error, no linode label ID found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    linode_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")

    if [[ "${linode_status}" == "offline" ]]; then
      _echo "$(msg yellow)Notice, linode ${linode_label} status is already offline!$(msg end)" --name
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 0
    else
      [[ ${scripting} == "false" ]] && _echo "Notice, linode ${linode_label} status is ${linode_status}" --name
      if [ "${recovery_mode_shutdown}" == "true" ]; then
        # This solved the workaround here: https://www.linode.com/community/questions/21319/please-remove-the-disk-eject-question-on-finnix-rescue-disk
        # Force shutting down linode using script (fix delay reboot due to Finnix recovery need to press enter to eject CDROM even no CDROM is present.)
        # Note when using this method, it will not show the status "shutting_down", only offline or online.
        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Shutting down linode ${linode_label} using SSH push script (if server is in recovery mode) ...$(msg end)" --name
        ssh -o "StrictHostKeyChecking no" -i /root/.ssh/linode_lish.id_rsa -tt "${DNS_PROVIDER_USER}@${DNS_PROVIDER_TERMINAL_SERVER}" "${BOX_HOSTNAME_FQDN}" <"${SCRIPT_PATH}/dns/linode/shutdown_command.sh" >/dev/null 2>&1 &
        ssh_pid=$!
        sleep 10
      else
        [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Shutting down linode using linode API ${linode_label} ...$(msg end)" --name
        linode_api_exec=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes shutdown "${linode_id}" 2> >(grep 'Linode busy'))
      fi
      if [ -n "${linode_api_exec}" ]; then
        _echo "$(msg yellow)Warning, Linode is busy. Re-executing linodes shutdown in 10 seconds ...$(msg end)" --name --verbose 4
        sleep 10
        linode_api_exec=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes shutdown "${linode_id}" 2> >(grep 'Linode busy'))
        if [ -n "${linode_api_exec}" ]; then
          _echo "$(msg yellow)Warning, Linode is busy. Re-executing linodes shutdown in 10 seconds ...$(msg end)" --name --verbose 4
          sleep 10
          linode_api_exec=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes shutdown "${linode_id}" 2> >(grep 'Linode busy'))
          if [ -n "${linode_api_exec}" ]; then
            _echo "$(msg red)Error, Linode is stuck with busy status for more than 20 seconds. Please inspect why.$(msg end)" --name --verbose 4
            [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
            return 147
          fi
        fi

      fi

      [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Shutting down linode ${linode_label} ...$(msg end)" --name
      while :; do
        linode_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
        if [ "${linode_status}" == "running" ]; then
          _echo "$(msg yellow)Notice, linode ${linode_label} is running. Waiting for offline status ...$(msg end)" --start-spin --name
        elif [[ "${linode_status}" == "offline" ]]; then
          _echo "$(msg green)Success, linode ${linode_label} is offline.$(msg end)" --stop-spin --name
          # Linode status is shutting down, so the push script shutdown_command is triggered successfully, we can kill running ssh for safety.
          { kill -9 ${ssh_pid} && wait ${ssh_pid}; } 2>/dev/null
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 0
          #break
        elif [[ "${linode_status}" == "shutting_down" ]]; then
          _echo "$(msg yellow)Notice, linode ${linode_label} is shutting down. Waiting for offline status$(msg end)" --start-spin --name

        else
          _echo "$(msg cyan)Linode ${linode_label}'s status is ${linode_status}. Waiting for offline status ...$(msg end)" --start-spin --name
        fi
      done

    fi
    # linode_api_admin create-disk sun.sofibox.com <disk_label> <disk_filetype> <disk_size_in_MB>
    # linode_api_admin create-disk --linode-label test.server.com --linode-disk-label Boot_Disk --linode-disk-filetype raw --linode-disk-size 10
  elif [[ "${action}" == "create-disk" || "${action}" == "add-disk" ]]; then
    # Required linode_id, disk_id, disk_type, disk_size

    local linode_id disk_label_created disk_status linode_status linode_api_exec
    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi

    if is_valid not-empty-string "${linode_disk_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-disk-label $(msg red)${linode_disk_label}$(msg green) is valid (not empty string)$(msg end)" --name --verbose 7
    else
      [[ ${scripting} == "false" ]] && _echo "$(msg red)Error, the given --linode-disk-label $(msg red)${linode_disk_label}$(msg green) is not valid (empty string)$(msg end)" --name --verbose 4
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    if is_valid valid-linode-disk-filetype "${linode_disk_filetype}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-disk-filetype $(msg red)${linode_disk_label}$(msg green) is valid linode filetype$(msg end)" --name --verbose 7
    else
      [[ ${scripting} == "false" ]] && _echo "$(msg red)Error, the given --linode-disk-filetype $(msg red)${linode_disk_label}$(msg green) is not valid linode filetype$(msg end)" --name --verbose 4
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    if is_valid not-empty-string "${linode_disk_size}" && is_valid integer "${linode_disk_size}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-disk-size $(msg red)${linode_disk_size}$(msg green) is valid (not empty string and input is an integer)$(msg end)" --name --verbose 7
    else
      [[ ${scripting} == "false" ]] && _echo "$(msg red)Error, the given --linode-disk-size $(msg red)${linode_disk_size}$(msg green) is not valid (empty string or not input is not integer)$(msg end)" --name --verbose 4
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    [[ ${scripting} == "false" ]] && _echo "Getting required linode ID for --linode-label ${linode_label} ..." --name --verbose 7
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} -r ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -z "${linode_id}" ]; then
      _echo "$(msg red)Error, no linode label ID found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147

    fi

    if [[ ${allow_duplicate_entry} == false ]]; then
      [[ ${scripting} == "false" ]] && _echo "Checking existing --linode-disk-label ${linode_disk_label} ..." --name --verbose 7
      disk_label_created=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} -r ".[] | select(.label == \"${linode_disk_label}\") | .label" | tail -n 1)
      if [[ "${disk_label_created}" == "${linode_disk_label}" ]]; then
        _echo "$(msg yellow)Warning, there is already a linode-disk-label ${linode_disk_label} entry for in linode disk. If you want to create duplicate entry then, use option --allow-duplicate-entry$(msg end)" --name --verbose 4
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      fi
    else
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, --allow-duplicate-entry is set. Duplicate disk label is allowed to be created$(msg end)" --name --verbose 4
    fi

    # Need to make sure that the linode status is offline before we can delete the disk.
    linode_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")

    if [[ "${linode_status}" == "offline" ]]; then
      [[ ${scripting} == "false" ]] && _echo "$(msg cyan)Creating a new linode disk from --linode-disk-label ${linode_disk_label} ...$(msg end)" --name
      # For disk space
      ${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disk-create "${linode_id}" --label "${linode_disk_label}" --filesystem "${linode_disk_filetype}" --size "${linode_disk_size}"
      # Placeholder to check if linode is busy or other conditions that prevented from disk creation such as not enough disk space
      #linode_api_exec=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disk-create "${linode_id}" --label "${linode_disk_label}" --filesystem "${linode_disk_filetype}" --size "${linode_disk_size}" 2> >(grep 'You do not have enough unallocated storage to create this Disk'))
      #echo "${linode_api_exec}"
      #exit 1
      #  if [ -n "${linode_api_exec}" ]; then
      #    _echo "$(msg red)Warning, no disk space left on linode with --linode-label ${linode_label}. Please delete unused partition$(msg end)" --name --verbose 4
      #    exit 147
      #    [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      #  else
      #    echo "${linode_api_exec}"
      #  fi

      _echo "$(msg cyan)Checking disk status --linode-disk-label ${linode_disk_label} for ready state ... $(msg end)" --name
      while :; do
        disk_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} -r ".[] | select(.label == \"${linode_disk_label}\") | .status" | tail -n 1)
        if [ "${disk_status}" == "ready" ]; then
          _echo "$(msg green)Success, linode disk status for --linode-disk-label ${linode_disk_label} is now ready$(msg end)" --name --stop-spin
          break
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        elif [ "${disk_status}" == "not ready" ]; then
          _echo "$(msg yellow)Disk status is not ready. Waiting for disk status to be ready ...$(msg end)" --name --start-spin
        elif [ -z "${disk_status}" ]; then
          _echo "$(msg yellow)Warning, empty disk status. Waiting for disk status to be ready ... $(msg end)" --name --start-spin
        else
          _echo "$(msg yellow)Warning, unknown disk status (not in condition): [${disk_status}]. Waiting for disk status to be ready ... $(msg end)" --name --start-spin

        fi

      done

    else
      _echo "Error, linode ${linode_label} must be offline first to delete disk but its current status is ${linode_status}" --name --verbose 3
      return 147
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
    fi
  # To remove specific disk: linode_api_admin delete-disk --linode-label test.server.com --linode-disk-label "OS_Disk"
  # To remove all disks: linode_api_admin "delete-disks" --linode-label test.server.com
  elif [[ "${action}" == "delete-disk" || "${action}" == "remove-disk" || "${action}" == "delete-disks" || "${action}" == "remove-disks" ]]; then
    local linode_id disk_status disk_count disk_id success_deleted disk_labels disk_labels_count disk_label

    if [[ "${action}" == "delete-disks" || "${action}" == "remove-disks" ]]; then
      if [ -n "${linode_disk_label}" ]; then
        _echo "$(msg red)Error, the action ${action} (with plurals) does not require --linode-disk-label option! It is used to delete all linode disks!$(msg end)" --name --verbose 3
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      fi
    else
      if is_valid not-empty-string "${linode_disk_label}"; then
        [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-disk-label $(msg red)${linode_disk_label}$(msg green) is valid (not empty string)$(msg end)" --name --verbose 7
      else
        [[ ${scripting} == "false" ]] && _echo "$(msg red)Error, the given --linode-disk-label $(msg red)${linode_disk_label}$(msg green) is not valid (empty string)$(msg end)" --name --verbose 4
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      fi
    fi
    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi
    [[ ${scripting} == "false" ]] && _echo "Getting required linode ID for --linode-label ${linode_label} ..." --name --verbose 7
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} -r ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -z "${linode_id}" ]; then
      _echo "$(msg red)Error, no linode label ID found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147

    fi

    # If plurals delete-disks or remove-disks (we delete all)
    if [[ "${action}" == "delete-disks" || "${action}" == "remove-disks" ]]; then
      _echo "$(msg cyan)Deleting all the linode disks from --linode-label ${linode_label} ...$(msg end)" --name
      disk_labels=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} -r ".[] | .label")
      if [ -z "${disk_labels}" ]; then
        _echo "$(msg red)Error, no linode disk label found from $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      else
        disk_labels_count=$(echo "${disk_labels}" | wc -w)
        _echo "Notice, total linode disk(s) found is ${disk_labels_count}" --name
      fi

    else

      _echo "$(msg cyan)Deleting linode disk from --linode-disk-label ${linode_disk_label} ...$(msg end)" --name
      disk_labels=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} -r ".[] | select(.label == \"${linode_disk_label}\") | .label")
      if [ -z "${disk_labels}" ]; then
        _echo "$(msg red)Error, no linode disk label found for $(msg red)--linode-disk-label ${linode_disk_label}$(msg end)" --name --verbose 3
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      else
        disk_labels_count=$(echo "${disk_labels}" | wc -w)
        _echo "Notice, total linode disk(s) found is ${disk_labels_count}." --name
      fi
    fi

    disk_count=0
    success_deleted=0
    # Need to make sure that the linode status is offline before we can delete the disk.
    linode_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
    #echo "LINODE STATUS: ${linode_status}"
    if [[ "${linode_status}" == "offline" ]]; then

      for disk_label in ${disk_labels}; do
        ((disk_count++))

        # Delete the first result that appear with tail -n 1
        disk_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} -r ".[] | select(.label == \"${disk_label}\") | .id" | tail -n 1)
        _echo "$(msg cyan)Deleting linode disk ${disk_count} / ${disk_labels_count} with disk label ${disk_label} and disk ID ${disk_id} ...$(msg end)" --name
        ${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disk-delete "${linode_id}" "${disk_id}"

        while :; do
          # do not quote $disk_id variable
          disk_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} -r ".[] | select(.id == ${disk_id}) | .status")
          if [[ -z "${disk_status}" ]]; then
            # If disk_status is empty meaning that it has been deleted!
            _echo "$(msg green)Success, the linode disk label ${disk_label} (${disk_id}) has been deleted!$(msg end)" --name --stop-spin
            [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
            ((sucess_deleted++))
            break
          elif [[ ${disk_status} == "deleting" ]]; then
            _echo "$(msg cyan)Deleting linode --disk-label ${disk_label} ...$(msg end)" --name --start-spin
          else
            _echo "$(msg yellow)Warning, unknown linode disk status for --disk-label ${disk_label}: ${disk_status}$(msg end)" --name --start-spin
            [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
            return 147
          fi
        done
      done
    else
      _echo "Error, linode ${linode_label} must be offline first to delete disk but its current status is ${linode_status}" --name --verbose 3
      return 147
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
    fi

    if [ ${success_deleted} -ne 0 ]; then
      return 0
    else
      return 1
    fi
    [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
    # linode_api_admin delete-configs --linode-label test.server.com
    # linode_api_admin delete-config --linode-label test.server.com --linode-config-label Boot_Config
  elif [[ "${action}" == "delete-configs" || "${action}" == "remove-configs" || "${action}" == "delete-config" || "${action}" == "remove-config" ]]; then

    local linode_id config_status config_count config_id success_deleted config_labels config_labels_count config_label retval

    if [[ "${action}" == "delete-configs" || "${action}" == "remove-configs" ]]; then
      if [ -n "${linode_config_label}" ]; then
        _echo "$(msg red)Error, the action ${action} (with plurals) does not require --linode-config-label option! It is used to delete all linode configs!$(msg end)" --name --verbose 3
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      fi
    else
      if is_valid not-empty-string "${linode_config_label}"; then
        [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-config-label $(msg red)${linode_config_label}$(msg green) is valid (not empty string)$(msg end)" --name --verbose 7
      else
        [[ ${scripting} == "false" ]] && _echo "$(msg red)Error, the given --linode-config-label $(msg red)${linode_config_label}$(msg green) is not valid (empty string)$(msg end)" --name --verbose 4
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      fi
    fi
    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi
    [[ ${scripting} == "false" ]] && _echo "Getting required linode ID for --linode-label ${linode_label} ..." --name --verbose 7
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} -r ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -z "${linode_id}" ]; then
      _echo "$(msg red)Error, no linode label ID found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147

    fi

    # If plurals delete-configs or remove-configs (we delete all)
    if [[ "${action}" == "delete-configs" || "${action}" == "remove-configs" ]]; then
      _echo "$(msg cyan)Deleting all the linode configs from --linode-label ${linode_label} ...$(msg end)" --name
      config_labels=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes configs-list "${linode_id}" | ${JQ_BIN} -r ".[] | .label")

      if [ -z "${config_labels}" ]; then
        _echo "$(msg red)Error, no linode config label found from $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      else
        config_labels_count=$(echo "${config_labels}" | wc -w)
        _echo "Notice, total linode config(s) found is ${config_labels_count}." --name
      fi

    else

      _echo "$(msg cyan)Deleting linode config from --linode-config-label ${linode_config_label} ...$(msg end)" --name
      config_labels=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes configs-list "${linode_id}" | ${JQ_BIN} -r ".[] | select(.label == \"${linode_config_label}\") | .label")
      #config_labels=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes configs-list "${linode_id}" | ${JQ_BIN} ".[] | select(.label == ${linode_config_label}) | .label")
      #echo "CONFIG_LABELS: ${config_labels}"
      #exit 1
      if [ -z "${config_labels}" ]; then
        _echo "$(msg red)Error, no linode config label found for $(msg red)--linode-config-label ${linode_config_label}$(msg end)" --name --verbose 3
        [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
        return 147
      else
        config_labels_count=$(echo "${config_labels}" | wc -w)
        _echo "Notice, total linode config(s) found is ${config_labels_count}." --name
      fi
    fi

    config_count=0
    success_deleted=0

    for config_label in ${config_labels}; do
      ((config_count++))

      # Delete the first result that appear with tail -n 1
      config_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes configs-list "${linode_id}" | ${JQ_BIN} -r ".[] | select(.label == \"${config_label}\") | .id" | tail -n 1)
      _echo "$(msg cyan)Deleting linode config ${config_count} / ${config_labels_count} with config label ${config_label} and config ID ${config_id} ...$(msg end)" --name
      ${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes config-delete "${linode_id}" "${config_id}"
      retval=$?
      while :; do
        if [[ "${retval}" -eq 0 ]]; then
          _echo "$(msg green)Success, the linode config label ${config_label} (${config_id}) has been deleted!$(msg end)" --name --stop-spin
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          ((sucess_deleted++))
          break
        else
          _echo "$(msg yellow)Warning, unknown deletion status when deleting --config-label ${linode_config_label}: ${config_status}$(msg end)" --name --start-spin
          [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
          return 147
        fi
      done
    done

    if [ ${success_deleted} -ne 0 ]; then
      return 0
    else
      return 1
    fi
    [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"

    # new:
    #linode_api_admin "create-config" --linode-label "${BOX_HOSTNAME_FQDN}" \
    #--linode-config-label "Boot_Config" --linode-config-comment "The installer boot configuration" --linode-config-virtual-mode "paravirt" \
    #--linode-config-kernel "linode/direct-disk" --linode-config-runlevel "default" --linode-config-memory-limit "4096" --linode-config-rootdev "/dev/sda" \
    #--linode-config-enable-distro-helper --linode-config-disable-update_db --linode-config-dep-helper --linode-config-automount-devtmpfs --linode-config-autoconf-network
    #--dev-sda "disk:Boot_Disk" --dev-sdb "disk:OS_Disk" ${config_disk_vol} # Do not double quote this, because we want to split the string for disk/volume options
  # The linode memory limit is not important.
  elif [[ "${action}" == "create-config" || "${action}" == "add-config" ]]; then
    local linode_id disk_letters label_type label_name label_disk_vol config_disk_vol disk_vol_id

    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi
    [[ ${scripting} == "false" ]] && _echo "Getting required linode ID for --linode-label ${linode_label} ..." --name --verbose 7
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} -r ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -z "${linode_id}" ]; then
      _echo "$(msg red)Error, no linode label ID found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147

    fi

    # Validate linode_config_label (this is the only required field for linode config profile)
    if is_valid not-empty-string "${linode_config_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-config-label $(msg red)${linode_config_label}$(msg green) is valid (not empty string)$(msg end)" --name --verbose 7
    else
      [[ ${scripting} == "false" ]] && _echo "$(msg red)Error, the given --linode-config-label $(msg red)${linode_config_label}$(msg green) is not valid (empty string)$(msg end)" --name --verbose 4
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    disk_letters="a b c d e f g h"
    for letter in ${disk_letters}; do
      typeset -n "label_disk_vol"="label_devsd${letter}"

      label_type=$(echo "${label_disk_vol}" | awk -F: '{ print $1 }')
      label_name=$(echo "${label_disk_vol}" | awk -F: '{ print $2 }')
      #echo "label_type: ${label_type}"
      #echo "label name: ${label_name}"
      if [ "${label_type}" == "disk" ]; then
        disk_vol_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} ".[] | select(.label == \"${label_name}\") | .id")
      elif [ "${label_type}" == "volume" ]; then
        disk_vol_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings volumes list | ${JQ_BIN} ".[] | select(.label == \"${label_name}\") | .id")
      else
        continue
      fi
      if [ -z "${disk_vol_id}" ]; then
        _echo "$(msg red)Error, the ${label_type} label [${label_name}] does not exist. Please, make sure that the ${label_type} was created in linode$(msg end)" --name --verbose 3
        _exit 1
      fi
      config_disk_vol="${config_disk_vol} --devices.sd${letter}.${label_type}_id ${disk_vol_id}"
    done
    #echo "OPTIONS: ${config_disk_vol}"
    if [[ -z "${config_disk_vol}" ]]; then
      _echo "Error, device option is blank. Linode config required at least one device to be mounted" --name --verbose 3
      return 147
    else
      _echo "Notice, linode config will be created and mounted with the following devices: "
      echo ""
      _echo "OPTIONS: ${config_disk_vol}" --plain
      echo ""
    fi
    if [ ${linode_config_enable_distro_helper} == "true" ]; then
      linode_config_enable_distro_helper="--helpers.distro true"
    else
      linode_config_enable_distro_helper="--helpers.distro false"
    fi

    if [ ${linode_config_disable_update_db} == "true" ]; then
      linode_config_disable_update_db="--helpers.updatedb_disabled true"
    else
      linode_config_disable_update_db="--helpers.updatedb_disabled false"
    fi

    if [ ${linode_config_enable_dep_helper} == "true" ]; then
      linode_config_enable_dep_helper="--helpers.modules_dep true"
    else
      linode_config_enable_dep_helper="--helpers.modules_dep false"
    fi

    if [ ${linode_config_automount_devtmpfs} == "true" ]; then
      linode_config_automount_devtmpfs="--helpers.devtmpfs_automount true"
    else
      linode_config_automount_devtmpfs="--helpers.devtmpfs_automount false"
    fi

    if [ ${linode_config_autoconf_network} == "true" ]; then
      linode_config_autoconf_network="--helpers.network true"
    else
      linode_config_autoconf_network="--helpers.network false"
    fi

    if [[ -n "${linode_config_memory_limit}" ]]; then
      linode_config_memory_limit="--memory_limit ${linode_config_memory_limit}"
    fi

    #linode_config_comments="--comments ${linode_config_comments}"

    #${LINODE_CLI_BIN} linodes config-create "${linode_id}" --label "${linode_config_label}" "${linode_config_comments}" "${linode_config_virtual_mode}" \
    # "${linode_config_kernel}" "${linode_config_runlevel}" "${linode_config_memory_limit}" "${linode_config_rootdev}" \
    #  --helpers.distro "${linode_config_enable_distro_helper}" \
    #  --helpers.updatedb_disabled "${linode_config_disable_update_db}" \
    #  --helpers.modules_dep "${linode_config_enable_dep_helper}" \
    #  --helpers.devtmpfs_automount "${linode_config_automount_devtmpfs}" \
    #  --helpers.network "${linode_config_autoconf_network}" ${config_disk_vol} # Do not double quote this, because we want to split the string for options
    #  retval=$?
    # It is important some variables are not quoted
    ${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes config-create "${linode_id}" --label "${linode_config_label}" --comments "${linode_config_comments}" --virt_mode "${linode_config_virtual_mode}" \
      --kernel "${linode_config_kernel}" --run_level "${linode_config_runlevel}" ${linode_config_memory_limit} --root_device "${linode_config_rootdev}" \
      ${linode_config_enable_distro_helper} ${linode_config_disable_update_db} ${linode_config_enable_dep_helper} ${linode_config_automount_devtmpfs} ${linode_config_autoconf_network} ${config_disk_vol}
    retval=$?
    echo "CONFIG_CREATE RETURN STATUS: ${retval}"
    echo ""

    if [ ${retval} -eq 0 ]; then
      _echo "Success, linode config profile for --linode-config-label ${linode_config_label} was successfully created!" --name
      return 0
    else
      _echo "Error, something was wrong when creating linode config profile for  --linode-config-label ${linode_config_label}" --verbose 4
      return 147
    fi
  #Using reboot-linode is similar to this except boot-linode cannot be used if it's not offline mode.
  elif [[ "${action^^}" == +(BOOT-LINODE|START-LINODE|BOOT|START|TURN-ON|TURNON|POWER-ON|POWERON) ]]; then
    local linode_id linode_api_exec ssh_pid linode_config_id linode_api_exec option
    option="$2"
    # Boot shortcut. eg: linode_api_admin boot os
    if [[ -z "${option}" || "${option}" == "os" ]]; then
      linode_label="${BOX_HOSTNAME_FQDN}"
      linode_config_label="${LINODE_OS_CONFIG_LABEL}"
    elif [[ "${option}" == "boot" ]]; then
      linode_label="${BOX_HOSTNAME_FQDN}"
      linode_config_label="${LINODE_BOOT_CONFIG_LABEL}"
    elif [[ "${option}" == "rescue" ]]; then
      linode_label="${BOX_HOSTNAME_FQDN}"
      linode_config_label="${LINODE_RESCUE_CONFIG_LABEL}"
    fi

    # Required only linode_id and config_id
    if is_valid domain "${linode_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-label $(msg red)${linode_label}$(msg green) is valid FQDN$(msg end)" --name --verbose 7
    else
      # This text is just a warning about the --linode-label that should be FQDN format (no return or exit). For warning use --verbose=4
      [[ ${scripting} == "false" ]] && _echo "$(msg yellow)Warning, the given --linode-label $(msg red)${linode_label}$(msg green) is not FQDN. It is recommend to name it as FQDN$(msg end)" --name --verbose 4
    fi

    # Validate linode_config_label (this is the only required field for linode config profile)
    if is_valid not-empty-string "${linode_config_label}"; then
      [[ ${scripting} == "false" ]] && _echo "$(msg green)OK, the given --linode-config-label $(msg red)${linode_config_label}$(msg green) is valid (not empty string)$(msg end)" --name --verbose 7
    else
      [[ ${scripting} == "false" ]] && _echo "$(msg red)Error, the given --linode-config-label $(msg red)${linode_config_label}$(msg green) is not valid (empty string)$(msg end)" --name --verbose 4
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    [[ ${scripting} == "false" ]] && _echo "Getting required linode ID for --linode-label ${linode_label} ..." --name --verbose 7
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${linode_label}\") | .id")
    if [ -z "${linode_id}" ]; then
      _echo "$(msg red)Error, no linode label ID found for $(msg red)--linode-label ${linode_label}$(msg end)" --name --verbose 3
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
      return 147
    fi

    [[ ${scripting} == "false" ]] && _echo "Getting required linode config ID for --linode-config-label ${linode_config_label} ..." --name --verbose 7
    linode_config_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes configs-list "${linode_id}" | ${JQ_BIN} ".[] | select(.label == \"${linode_config_label}\") | .id")
    if [ -z "${linode_config_id}" ]; then
      _echo "$(msg red)Error, no linode label config ID found for $(msg red)--linode-config-label ${linode_config_label}$(msg end)" --name --verbose 3
      return 147
      [[ ${scripting} == "false" ]] && exec_time total "linode_api_admin"
    fi

    _echo "$(msg cyan)Booting linode ${linode_label} using --linode-config-label ${linode_config_label} ...$(msg end)" --name
    # TODO use this method for other error handling in linode API (this is the best way)
    linode_api_exec=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes boot "${linode_id}" --config_id "${linode_config_id}" 2>&1)
    request_failed=$(echo "${linode_api_exec}" | grep 'Request failed: 400')
    # can use this variable for other purpose
    #reason_failed=$(echo "${linode_api_exec}" | grep 'already booted')
    if [ -n "${request_failed}" ]; then
      _echo "$(msg red)Error, request failed. Reason:$(msg end)" --name --verbose 3
      echo "${linode_api_exec}"
      _exit 147
    fi

    # Give a little bit time 2 seconds for the status to change:
    sleep 2
    while :; do
      linode_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes view "${linode_id}" | ${JQ_BIN} -r ".[] | .status")
      if [[ "${linode_status}" == "running" ]]; then
        _echo "$(msg green)Success, linode ${linode_label} has been successfully booted using config ${linode_config_label}$(msg end)" --stop-spin --name
        break
      else
        _echo "$(msg cyan)Linode status is ${linode_status}. Waiting for running status ...$(msg end)" --start-spin --name
      fi
    done
  elif [[ "${action}" == "view-linode" || "${action}" == "lookup-linode" ]]; then
    shift
    local linode_id hostname_fqdn
    hostname_fqdn="$1"
    local retval
    host "${hostname_fqdn}" >/dev/null 2>&1
    retval=$?
    if [ ${retval} -eq 0 ]; then
      #echo "[${SCRIPT_NAME}]: Ok, ${hostname_fqdn} is a FQDN"
      :
    else
      echo "[${SCRIPT_NAME}]: Warning, hostname is not a FQDN: ${hostname_fqdn}"
      hostname_fqdn=${BOX_HOSTNAME_FQDN}
      echo "[${SCRIPT_NAME}]: Hostname is now set as: ${hostname_fqdn} from config file"
    fi
    shift
    echo "[${SCRIPT_NAME}]: Viewing linode ${hostname_fqdn} ..."
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${hostname_fqdn}\") | .id")
    ${LINODE_CLI_BIN} linodes view "${linode_id}" --suppress-warnings
    echo "Status: $?"
    # --linode-api get-disk-id "sun.sofibox.com" "Boot_Disk"
  elif [[ "${action}" == "get-disk-id" ]]; then
    shift
    local linode_id hostname_fqdn disk_label disk_id
    hostname_fqdn="$1"
    local retval
    host "${hostname_fqdn}" >/dev/null 2>&1
    retval=$?
    if [ ${retval} -eq 0 ]; then
      #echo "[${SCRIPT_NAME}]: Ok, ${hostname_fqdn} is a FQDN"
      :
    else
      echo "[${SCRIPT_NAME}]: Warning, hostname is not a FQDN: ${hostname_fqdn}"
      hostname_fqdn=${BOX_HOSTNAME_FQDN}
      echo "[${SCRIPT_NAME}]: Hostname is now set as: ${hostname_fqdn} from config file"
    fi
    shift
    disk_label="$1"
    echo "[${SCRIPT_NAME}]: listing config ${hostname_fqdn} ..."
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${hostname_fqdn}\") | .id")
    disk_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} ".[] | select(.label == \"${disk_label}\") | .id")
    echo "${disk_id}"
  elif [[ "${action}" == "list-disks" || "${action}" == "lookup-disks" ]]; then
    shift
    local linode_id hostname_fqdn
    hostname_fqdn="$1"
    local retval
    host "${hostname_fqdn}" >/dev/null 2>&1
    retval=$?
    if [ ${retval} -eq 0 ]; then
      #echo "[${SCRIPT_NAME}]: Ok, ${hostname_fqdn} is a FQDN"
      :
    else
      echo "[${SCRIPT_NAME}]: Warning, hostname is not a FQDN: ${hostname_fqdn}"
      hostname_fqdn=${BOX_HOSTNAME_FQDN}
      echo "[${SCRIPT_NAME}]: Hostname is now set as: ${hostname_fqdn} from config file"
    fi
    shift
    echo "[${SCRIPT_NAME}]: listing config ${hostname_fqdn} ..."
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${hostname_fqdn}\") | .id")
    ${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}"
    echo $?
    # --linode-api check-disk-status sun.sofibox.com <disk_label>
  elif [[ "${action}" == "check-disk-status" || "${action}" == "disk-status" ]]; then
    shift
    hostname_fqdn="$1"
    local retval
    host "${hostname_fqdn}" >/dev/null 2>&1
    retval=$?
    if [ ${retval} -eq 0 ]; then
      #echo "[${SCRIPT_NAME}]: Ok, ${hostname_fqdn} is a FQDN"
      :
    else
      echo "[${SCRIPT_NAME}]: Warning, hostname is not a FQDN: ${hostname_fqdn}"
      hostname_fqdn=${BOX_HOSTNAME_FQDN}
      echo "[${SCRIPT_NAME}]: Hostname is now set as: ${hostname_fqdn} from config file"
    fi
    shift
    disk_label="$1"
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${hostname_fqdn}\") | .id")
    echo "[${SCRIPT_NAME}]: Checking disk status ${disk_label} from ${hostname_fqdn} ..."
    rescue_disk_status=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes disks-list "${linode_id}" | ${JQ_BIN} -r ".[] | select(.label == \"${disk_label}\") | .status" | tail -n 1)
    if [ "${rescue_disk_status}" == "ready" ]; then
      #echo "[${SCRIPT_NAME}]: Rescue Disk status is now ready"
      return 0
    else
      #echo "[${SCRIPT_NAME}]: Disk status is not ready"
      return 147
    fi
    # --linode-api "list-configs" <hostname_fqdn>
  elif [[ "${action}" == "list-configs" || "${action}" == "lookup-configs" ]]; then
    shift
    local linode_id hostname_fqdn
    hostname_fqdn="$1"
    local retval
    host "${hostname_fqdn}" >/dev/null 2>&1
    retval=$?
    if [ ${retval} -eq 0 ]; then
      #echo "[${SCRIPT_NAME}]: Ok, ${hostname_fqdn} is a FQDN"
      :
    else
      echo "[${SCRIPT_NAME}]: Warning, hostname is not a FQDN: ${hostname_fqdn}"
      hostname_fqdn=${BOX_HOSTNAME_FQDN}
      echo "[${SCRIPT_NAME}]: Hostname is now set as: ${hostname_fqdn} from config file"
    fi
    shift
    echo "[${SCRIPT_NAME}]: listing config ${hostname_fqdn} ..."
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${hostname_fqdn}\") | .id")
    ${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes configs-list "${linode_id}"
    # --linode-api config-view <hostname_fqdn> <config_label>
  elif [[ "${action}" == "config-view" ]]; then
    shift
    local linode_id hostname_fqdn config_id config_label
    hostname_fqdn="$1"
    local retval
    host "${hostname_fqdn}" >/dev/null 2>&1
    retval=$?
    if [ ${retval} -eq 0 ]; then
      #echo "[${SCRIPT_NAME}]: Ok, ${hostname_fqdn} is a FQDN"
      :
    else
      echo "[${SCRIPT_NAME}]: Warning, hostname is not a FQDN: ${hostname_fqdn}"
      hostname_fqdn=${BOX_HOSTNAME_FQDN}
      echo "[${SCRIPT_NAME}]: Hostname is now set as: ${hostname_fqdn} from config file"
    fi
    shift
    config_label="$1"
    echo "[${SCRIPT_NAME}]: listing config ${hostname_fqdn} ..."
    linode_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes list | ${JQ_BIN} ".[] | select(.label == \"${hostname_fqdn}\") | .id")
    config_id=$(${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes configs-list "${linode_id}" | ${JQ_BIN} ".[] | select(.label == \"${config_label}\") | .id")
    echo "Viewing config ID ${config_id} from ${hostname_fqdn} ..."
    ${LINODE_CLI_BIN} --json --pretty --suppress-warnings linodes config-view "${linode_id}" "${config_id}"

  elif [[ "${action}" == "help" ]]; then

    echo "=== Linode API Syntax and example (Help Section) ==="
    echo ""
    echo "Get linode ID: "
    echo "  linode_api_admin get-linode-id <hostname_fqdn>"
    echo ""
    echo "Shutdown/turn off linode:"
    echo "  linode_api_admin shutdown-linode <hostname_fqdn>"
    echo ""
    echo "Boot/start linode: "
    echo "  linode_api_admin boot-linode <hostname_fqdn>"
    echo ""
    echo "Reboot/Restart linode: "
    echo "   linode_api_admin reboot-linode <hostname_fqdn>"
    echo ""
    echo "View linode information: "
    echo "   linode_api_admin view-linode <hostname_fqdn>"
    echo ""
    echo "View all linode configs information: "
    echo "   linode_api_admin list-configs <hostname_fqdn>"
    echo ""

  elif [[ "${action}" == "delete-dns-record" ]]; then
    shift
    local domain name dis_args record_id record_ids record_ids_count
    domain="$1"
    # Record name
    name="$2"
    type="$3"
    dis_args="${*:4}"

    if [[ -n "${dis_args}" ]]; then
      echo "[${SCRIPT_NAME}]: Warning, extra arguments discarded: ${dis_args}" 2>&1 | tee -a "${REPORT_FILE}"
    fi

    if [ $# -ge 3 ]; then
      echo "Checking record for domain ${domain} with record name ${name} and type ${type} ..." 2>&1 | tee -a "${REPORT_FILE}"
      #domain_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains list --domain "${domain}" | grep -F '"id":' | sed -r 's/[^0-9]//g')
      domain_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains list | ${JQ_BIN} ".[] | select(.domain == \"${domain}\") | .id")
      if [ -n "${domain_id}" ]; then
        #${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-list --page 2 "${domain_id}"
        # Domain ID is correct now we execute next statement:
        # The record list is huge, use loop to scan based on maximum $linode_max_page
        #count=2
        #record_ids=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-list --page ${count} "${domain_id}" | ${JQ_BIN} ".[] | select((.name == \"${name}\") and (.type==\"${type}\")) | .id")
        #record_ids=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-list --page ${count} "${domain_id}" | ${JQ_BIN} ".[] | select((.name == \"${name}\") and (.type==\"${type}\")) | .id | first")
        #echo "${record_ids}"
        count=1
        while [[ ${count} -le ${linode_max_page} ]]; do
          record_ids=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-list --page ${count} "${domain_id}" | ${JQ_BIN} ".[] | select((.name == \"${name}\") and (.type==\"${type}\")) | .id")
          #  # Without using jq (traditional way):
          #  #| grep \"name\"": \"${name}\"" -B 1 \
          #  #| sed -r 's/[^0-9]//g' #\
          #  #| head -n 1
          # Break if found result for that page
          if [[ -n ${record_ids} ]]; then
            break
          fi
          ((count++))
        done
        # Without -n condition, the record will be counted as 1 even it's empty line
        if [[ -n "${record_ids}" ]]; then
          record_ids_count=$(echo "${record_ids}" | wc -l)
          #echo "${record_ids}"
          echo "[${SCRIPT_NAME}]: Total record ID found for the record name ${name} is ${record_ids_count}" 2>&1 | tee -a "${REPORT_FILE}"
          #c2=1
          #exit 1
          #record_ids_count=$(echo "${record_ids}" | wc -l)
          echo "[${SCRIPT_NAME}]: Deleting ${record_ids_count} record(s):" 2>&1 | tee -a "${REPORT_FILE}"
          success=0
          for record_id in ${record_ids}; do
            #Debug:
            echo "[${SCRIPT_NAME}]: Deleting record ID ${record_id} ..." 2>&1 | tee -a "${REPORT_FILE}"
            ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-delete "${domain_id}" "${record_id}"
            retval=$?
            if [ "${retval}" = 0 ]; then
              echo "=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
              echo "OK, record ID ${record_id} has been deleted successfully." 2>&1 | tee -a "${REPORT_FILE}"
              # Do next deletion
              ((success++))
            else
              echo "Error [${retval}], delete failed for record ID ${record_id}" 2>&1 | tee -a "${REPORT_FILE}"
              # Do next deletion
            fi
          done
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          if [ "${success}" == "${record_ids_count}" ]; then
            echo "OK, ${success} out of ${record_ids_count} record(s) has been successfully deleted" 2>&1 | tee -a "${REPORT_FILE}"

          elif [[ "${success}" -eq 1 && "${success}" -lt "${record_ids_count}" ]]; then
            echo "Warning, only ${success} out of ${record_ids_count} record(s) has been successfully deleted" 2>&1 | tee -a "${REPORT_FILE}"
          else
            echo "Warning, no record has been deleted" 2>&1 | tee -a "${REPORT_FILE}"
          fi
          echo "=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
        else
          # Useful variable for future reference
          record_ids_count=0
          echo "[${SCRIPT_NAME}]: Warning, no record ID with record name ${name} and type ${type} is found for domain ${domain}" 2>&1 | tee -a "${REPORT_FILE}"
          # Don't exit
          return 147
        fi

        return 0
      else
        echo "[${SCRIPT_NAME}]: Warning, no domain ID found for domain ${domain}" 2>&1 | tee -a "${REPORT_FILE}"
        return 147
      fi
      return 0
    else
      echo "[${SCRIPT_NAME}]: Error, usage: linode_api_admin ${action} <domain_name> <record_name> <record_type>" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 2
    fi

  # In linode for record, only 3 things can be updated: name, value and TTL.
  # maxidns --linode "update-dns-record" <domain_name> <record_type> <record_name> <record_value> <record_ttl>
  elif [[ "${action}" == "update-dns-record" ]]; then
    shift
    #echo "add-dns-record"
    local domain type name value dis_args record_id record_ids record_ids_count
    domain="$1"
    # Record name
    type="$2"
    name="$3"
    value="$4"
    ttl="$5"
    dis_args="${*:6}"

    if [[ -n "${dis_args}" ]]; then
      echo "[${SCRIPT_NAME}]: Warning, extra arguments discarded: ${dis_args}" 2>&1 | tee -a "${REPORT_FILE}"
    fi

    if [ $# -ge 5 ]; then
      echo "[${SCRIPT_NAME}]: Checking record for domain ${domain} with record name ${name} and type ${type} ..." 2>&1 | tee -a "${REPORT_FILE}"
      #domain_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains list --domain "${domain}" | grep -F '"id":' | sed -r 's/[^0-9]//g')
      domain_id=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains list | ${JQ_BIN} ".[] | select(.domain == \"${domain}\") | .id")
      if [ -n "${domain_id}" ]; then
        count=1
        while [[ ${count} -le ${linode_max_page} ]]; do
          record_ids=$(${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-list --page ${count} "${domain_id}" | ${JQ_BIN} ".[] | select((.name == \"${name}\") and (.type==\"${type}\")) | .id")
          # Break if found result for that page
          if [[ -n ${record_ids} ]]; then
            break
          fi
          ((count++))
        done
        # Without -n condition, the record will be counted as 1 even it's empty line
        if [[ -n "${record_ids}" ]]; then
          record_ids_count=$(echo "${record_ids}" | wc -l)
          #echo "${record_ids}"
          echo "[${SCRIPT_NAME}]: Total record ID found for the record name ${name} is ${record_ids_count}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "[${SCRIPT_NAME}]: Updating ${record_ids_count} record(s):" 2>&1 | tee -a "${REPORT_FILE}"
          success=0
          for record_id in ${record_ids}; do
            #Debug:
            echo "[${SCRIPT_NAME}]: Updating record ID ${record_id} ..." 2>&1 | tee -a "${REPORT_FILE}"
            ${LINODE_CLI_BIN} --pretty --json --suppress-warnings domains records-update "${domain_id}" "${record_id}" --name "${name}" --target "${value}" --ttl_sec "${ttl}"
            retval=$?
            if [ "${retval}" = 0 ]; then
              echo "=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
              echo "OK, record ID ${record_id} has been updated successfully updated." 2>&1 | tee -a "${REPORT_FILE}"
              # Do next update
              ((success++))
            else
              echo "Error [${retval}], update failed for record ID ${record_id}" 2>&1 | tee -a "${REPORT_FILE}"
              # Do next update
            fi
          done
          echo ""
          if [ "${success}" == "${record_ids_count}" ]; then
            echo "OK, ${success} out of ${record_ids_count} record(s) has been successfully updated" 2>&1 | tee -a "${REPORT_FILE}"

          elif [[ "${success}" -eq 1 && "${success}" -lt "${record_ids_count}" ]]; then
            echo "Warning, only ${success} out of ${record_ids_count} record(s) has been successfully updated" 2>&1 | tee -a "${REPORT_FILE}"
          else
            echo "Warning, no record has been updated" 2>&1 | tee -a "${REPORT_FILE}"
          fi
          echo "=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
        else
          # Useful variable for future reference
          record_ids_count=0
          echo "[${SCRIPT_NAME}]: Error, no record ID with record name ${name} and type ${type} is found for domain ${domain}" 2>&1 | tee -a "${REPORT_FILE}"
          return 147
        fi
      else
        echo "[${SCRIPT_NAME}]: Error, no domain ID found for domain ${domain}" 2>&1 | tee -a "${REPORT_FILE}"
        return 147
      fi
      return 0
    else
      echo "[${SCRIPT_NAME}]: Error, usage: linode_api_admin ${action} <domain_name> <record_type> <record_name> <record_value> <record_ttl>" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 2
    fi

  else

    _echo "$(msg red)Error, the given action argument '${action}' does not exist$(msg end)" --name
    _exit 1
  fi

}

function digitalocean_api_admin() {
  :
}

function amazonaws_api_admin() {
  :
}
# da_api_admin <action> <action-option-arguments>
# da_api_admin "create" "admin2" "admin2@sofibox.com" "x12321aa"
# da_api_admin add-ip 12.12.12.12 255.255.255.0
function da_api_admin() {
  # By default, da_api_admin will use owner authentication if I don't supply this: da_api_admin "end+owner"
  #echo "Continuing in 2 seconds ..."
  #sleep 2
  local api_username api_password
  local command data method filter_cmd is_start retval result #decoded_status
  local action username email password
  local owner_main_auth owner_new_list admin_new_list admin_list reseller_new_list admin_ori_list admin_main_auth
  local reseller_main_auth user_main_auth user_new_list
  local ip netmask ssl
  local domain ip_type
  local package_name
  local role_user
  admin_list="/usr/local/directadmin/data/admin/admin.list"
  admin_new_list=$(grep -w "${DA_ADMIN_USERNAME1}" "${admin_list}")
  owner_new_list=$(grep -w "${DA_OWNER_USERNAME1}" "${admin_list}")
  reseller_new_list=$(grep -w "${DA_RESELLER_USERNAME1}" "/usr/local/directadmin/data/admin/reseller.list")
  user_new_list=$(find /usr/local/directadmin/data/users/ -name "${DA_USER_USERNAME1}" -type d)
  admin_ori_list="/usr/local/directadmin/scripts/setup.txt"
  owner_main_auth="${TEMP_PATH}/api/${DA_OWNER_USERNAME1}_owner_main_auth_api"
  admin_main_auth="${TEMP_PATH}/api/${DA_ADMIN_USERNAME1}_admin_main_auth_api"
  reseller_main_auth="${TEMP_PATH}/api/${DA_RESELLER_USERNAME1}_reseller_main_auth_api"
  user_main_auth="${TEMP_PATH}/api/${DA_USER_USERNAME1}_user_main_auth_api"
  user_extra_auth="${TEMP_PATH}/api/extra_user_main_auth_api"
  action="$1"

  mkdir -p "${TEMP_PATH}/api"
  if [[ "${SETUP_DA_HOST_SSL}" == "yes" && -f "${CONF_PATH}/configure_da_ssl_executed" ]]; then
    ssl="https"
  else
    ssl="http"
  fi
  is_start=$(echo "${action}" | awk -F'+' '{ print $1 }')
  # This can be either username or role name
  role_user=$(echo "${action}" | awk -F'+' '{ print $2 }')
  role_password=$(echo "${action}" | awk -F'+' '{ print $3 }')
  #da_api_admin "signas+${da_user_uname}${role_password}"
  if [ "${is_start}" == "signas" ]; then
    user_extra_list=$(find /usr/local/directadmin/data/users/ -name "${role_user}" -type d)
    if [ -n "${user_extra_list}" ]; then
      rm -f "${TEMP_PATH}"/api/*
      echo "Authenticating DA API with signas+${role_user} ..."
      touch "${user_extra_auth}"
      {
        echo "DA_USER_EXTRA_USERNAME=\"${role_user}"\"
        echo "DA_USER_EXTRA_USERPASS=\"${role_password}"\"
      } >"${user_extra_auth}"
    elif [ "${action}" == "signas+owner" ]; then
      rm -f "${TEMP_PATH}"/api/*
      echo "Authenticating DA API with signas+owner"
      if [ -n "${owner_new_list}" ]; then
        #echo "[${SCRIPT_NAME}]: Found main owner account ${owner_new_list} matched in config file. Creating API session file authentication for ${owner_new_list} ..." 2>&1 | tee -a "${REPORT_FILE}"
        touch "${owner_main_auth}"
        {
          echo "DA_OWNER_USERNAME1=\"${DA_OWNER_USERNAME1}"\"
          echo "DA_OWNER_USERPASS1=\"${DA_OWNER_USERPASS1}"\"
        } >"${owner_main_auth}"
      else
        echo "[${SCRIPT_NAME}]: Error, no main owner account matched in config file. Please create owner first!" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    elif [ "${action}" == "signas+admin" ]; then
      rm -f "${TEMP_PATH}"/api/*
      echo "Authenticating DA API with signas+admin"
      if [ -n "${admin_new_list}" ]; then
        #echo "[${SCRIPT_NAME}]: Found main admin account ${admin_new_list} matched in config file. Creating API session file authentication for ${admin_new_list} ..." 2>&1 | tee -a "${REPORT_FILE}"
        touch "${admin_main_auth}"
        {
          echo "DA_ADMIN_USERNAME1=\"${DA_ADMIN_USERNAME1}"\"
          # Admin username cannot contain character '+' it will trigger invalid password (DA bug?)
          echo "DA_ADMIN_USERPASS1=\"${DA_ADMIN_USERPASS1}"\"
        } >"${admin_main_auth}"
      else
        echo "[${SCRIPT_NAME}]: Error, no main admin account matched in config file. Please create admin first!" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    elif [ "${action}" == "signas+reseller" ]; then
      rm -f "${TEMP_PATH}"/api/*
      echo "Authenticating DA API with signas+reseller"
      if [ -n "${reseller_new_list}" ]; then
        #echo "[${SCRIPT_NAME}]: Found main reseller account ${reseller_new_list} matched in config file. Creating API session file authentication for ${reseller_new_list} ..." 2>&1 | tee -a "${REPORT_FILE}"
        touch "${reseller_main_auth}"
        {
          echo "DA_RESELLER_USERNAME1=\"${DA_RESELLER_USERNAME1}"\"
          echo "DA_RESELLER_USERPASS1=\"${DA_RESELLER_USERPASS1}"\"
        } >"${reseller_main_auth}"
      else
        echo "[${SCRIPT_NAME}]: Error, no main reseller account matched in config file. Please create reseller first!" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    elif [ "${action}" == "signas+user" ]; then
      rm -f "${TEMP_PATH}"/api/*
      echo "Authenticating DA API with signas+user"
      if [ -n "${user_new_list}" ]; then
        #echo "[${SCRIPT_NAME}]: Found main user account ${user_new_list} matched in config file. Creating API session file authentication for ${user_new_list}..." 2>&1 | tee -a "${REPORT_FILE}"
        touch "${user_main_auth}"
        {
          echo "DA_USER_USERNAME1=\"${DA_USER_USERNAME1}"\"
          echo "DA_USER_USERPASS1=\"${DA_USER_USERPASS1}"\"
        } >"${user_main_auth}"
      else
        echo "[${SCRIPT_NAME}]: Error, no main user account matched in config file. Please create user first!" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    fi
  elif [ "${is_start}" == "end" ]; then
    if [ "${action}" == "end+owner" ]; then
      rm -f "${owner_main_auth}"
    elif [ "${action}" == "end+admin" ]; then
      rm -f "${admin_main_auth}"
    elif [ "${action}" == "end+reseller" ]; then
      rm -f "${reseller_main_auth}"
    elif [ "${action}" == "end+user" ]; then
      rm -f "${user_main_auth}"
    elif [ "${action}" == "end" ]; then
      rm -f "${TEMP_PATH}"/api/*
    fi
  fi

  # End check

  # If the admin.list file has a new admin username, we use that authentication
  # This is the default authentication for DA owner
  if [ -s "${user_extra_auth}" ]; then
    #echo "[${SCRIPT_NAME}]: Found auth file for ${role_user}. Using authentication for this user ..." 2>&1 | tee -a "${REPORT_FILE}"
    #_pause 2
    api_username=$(sed -n 's/^DA_USER_EXTRA_USERNAME=//p' "${user_extra_auth}" | sed -e 's/^"//' -e 's/"$//')
    api_password=$(sed -n 's/^DA_USER_EXTRA_USERPASS=//p' "${user_extra_auth}" | sed -e 's/^"//' -e 's/"$//')
  elif [ -s "${owner_main_auth}" ]; then
    #echo "[${SCRIPT_NAME}]: Found auth file for ${DA_OWNER_USERNAME1}. Using authentication for this user ..." 2>&1 | tee -a "${REPORT_FILE}"
    #_pause 2
    api_username=$(sed -n 's/^DA_OWNER_USERNAME1=//p' "${owner_main_auth}" | sed -e 's/^"//' -e 's/"$//')
    api_password=$(sed -n 's/^DA_OWNER_USERPASS1=//p' "${owner_main_auth}" | sed -e 's/^"//' -e 's/"$//')
    #echo "api_username is: ${api_username}"
    #echo "api_userpassword is: ${api_password}"
    #exit 147
  elif [ -s "${admin_main_auth}" ]; then
    #echo "[${SCRIPT_NAME}]: Found auth file for ${DA_ADMIN_USERNAME1}. Using authentication for this user ..." 2>&1 | tee -a "${REPORT_FILE}"
    #_pause 2
    api_username=$(sed -n 's/^DA_ADMIN_USERNAME1=//p' "${admin_main_auth}" | sed -e 's/^"//' -e 's/"$//')
    api_password=$(sed -n 's/^DA_ADMIN_USERPASS1=//p' "${admin_main_auth}" | sed -e 's/^"//' -e 's/"$//')
  elif [ -s "${reseller_main_auth}" ]; then
    #echo "[${SCRIPT_NAME}]: Found auth file for ${DA_RESELLER_USERNAME1}. Using authentication for this user ..." 2>&1 | tee -a "${REPORT_FILE}"
    #_pause 2
    api_username=$(sed -n 's/^DA_RESELLER_USERNAME1=//p' "${reseller_main_auth}" | sed -e 's/^"//' -e 's/"$//')
    api_password=$(sed -n 's/^DA_RESELLER_USERPASS1=//p' "${reseller_main_auth}" | sed -e 's/^"//' -e 's/"$//')
  elif [ -s "${user_main_auth}" ]; then
    #echo "[${SCRIPT_NAME}]: Found auth file for ${DA_USER_USERNAME1}. Using authentication for this user ..." 2>&1 | tee -a "${REPORT_FILE}"
    #_pause 2
    api_username=$(sed -n 's/^DA_USER_USERNAME1=//p' "${user_main_auth}" | sed -e 's/^"//' -e 's/"$//')
    api_password=$(sed -n 's/^DA_USER_USERPASS1=//p' "${user_main_auth}" | sed -e 's/^"//' -e 's/"$//')
  # At this stage, if user don't use signas+<user> before calling API then it will use below with the condition the auth exist:
  elif [ -n "${owner_new_list}" ]; then
    #echo "[${SCRIPT_NAME}]: Found auth file for ${DA_OWNER_USERNAME1}. Using authentication for this user ..." 2>&1 | tee -a "${REPORT_FILE}"
    #_pause 2
    api_username=${DA_OWNER_USERNAME1}
    api_password=${DA_OWNER_USERPASS1}
  elif [ -s "${admin_ori_list}" ]; then
    #echo "[${SCRIPT_NAME}]: No other authentication file found. Using DA API authentication from DA setup.txt file ..." 2>&1 | tee -a "${REPORT_FILE}"
    #_pause 2
    # else we use the original authentication generated by DA during installation if all above not valid
    api_username=$(sed -n 's/^adminname=//p' ${admin_ori_list})
    api_password=$(sed -n 's/^adminpass=//p' ${admin_ori_list})
  else
    echo "[${SCRIPT_NAME}]: Warning, no valid authentication is available to use Directadmin API!" 2>&1 | tee -a "${REPORT_FILE}"
    _exit 147
  fi
  # Only run this if number of argument is more than 1 or at least 2
  if [ "$#" -gt 1 ]; then
    if [ "${action}" == "create-admin-account" ]; then
      # da_api_admin "create-admin-account" "admin2" "admin2@sofibox.com" "12321"
      shift
      username="$1"
      email="$2"
      password="$3"
      command="CMD_API_ACCOUNT_ADMIN"
      method="POST"
      #echo "SSL: ${ssl} | Action: ${action} | username: ${username} | email: ${email} | password: ${password}"
      #exit 147
      data="action=create&add=submit&username=${username}&email=${email}&passwd=${password}&passwd2=${password}&notify=yes&json=yes"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "create-reseller-account" ]; then
      # da_api_admin "create-reseller-account" "reseller1" "reseller1@sofibox.com" "x1231aax" "sofibox.com" "RESELLER_UNLIMITED" "shared"
      shift
      username="$1"
      email="$2"
      password="$3"
      domain="$4"
      package_name="$5"
      ip_type="$6"
      command="CMD_ACCOUNT_RESELLER"
      data="username=${username}&email=${email}&passwd=${password}&passwd2=${password}&domain=${domain}&package=${package_name}&notify=yes&ip=${ip_type}&action=create&add=yes&json=yes"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "create-user-account" ]; then
      # da_api_admin "create-reseller-account" "user1" "user1@maxibi.com" "x1231aax" "maxibi.com" "USER_UNLIMITED"
      shift
      username="$1"
      email="$2"
      password="$3"
      domain="$4"
      package_name="$5"
      # Normally IPv4 that has been set up in DA
      command="CMD_API_ACCOUNT_USER"
      data="username=${username}&email=${email}&passwd=${password}&passwd2=${password}&domain=${domain}&package=${package_name}&ip=${IPV4_ADD0}&notify=yes&add=yes&action=create&json=yes"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "delete-users" ]; then
      # da_api_admin "delete-users" "admin2"
      shift
      username="$1"
      command="CMD_API_SELECT_USERS"
      data="confirmed=Confirm&delete=yes&select0=${username}"
      method="POST"
      #echo "SSL: ${ssl} | Action: ${action} | username: ${username}"
      #exit 147
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "add-ip" ]; then
      # da_api_admin "add-ip" "2400:1234:0000:0000:123c:1234:fe05:6cb1" "/64"
      # da_api_admin "add-ip" "12.12.12.12" "255.255.255.0"
      shift
      ip="$1"
      netmask="$2"
      command="CMD_API_IP_MANAGER"
      data="action=add&ip=${ip}&netmask=${netmask}&device=yes&add_to_device_aware=yes&json=yes"
      method="POST"
      echo "SSL: ${ssl} | Action: ${action} | IP: ${ip} | netmask: ${netmask}"
      #exit 147
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
      #CMD_API_MANAGE_RESELLER_PACKAGES
    elif [ "${action}" == "create-reseller-package" ]; then
      # da_api_admin"create-reseller-package" "RESELLER_UNLIMITED"
      shift
      package_name="$1"
      command="CMD_API_MANAGE_RESELLER_PACKAGES"
      # This is unlimited RESELLER package:
      data="bandwidth=5000&ubandwidth=yes&quota=1000&uquota=yes&inode=&uinode=yes&vdomains=10&uvdomains=yes&nsubdomains=10&unsubdomains=yes&nemails=100&unemails=yes&nemailf=100&unemailf=yes&nemailml=10&unemailml=yes&nemailr=100&unemailr=yes&mysql=0&umysql=yes&domainptr=0&udomainptr=yes&ftp=10&uftp=yes&cgi=ON&php=ON&spam=ON&catchall=ON&ssl=ON&oversell=ON&cron=ON&sysinfo=ON&login_keys=ON&dnscontrol=ON&dns=OFF&serverip=ON&packagename=${package_name}&nusers=&unusers=yes&add=save&ips=0&json=yes"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "create-user-package" ]; then
      shift
      package_name="$1"
      # This is unlimited USER package:
      command="CMD_API_MANAGE_USER_PACKAGES"
      data="bandwidth=1000&ubandwidth=yes&quota=100&uquota=yes&inode=&uinode=yes&vdomains=1&uvdomains=yes&nsubdomains=10&unsubdomains=yes&nemails=10&unemails=yes&unemailf=yes&nemailml=0&unemailml=yes&nemailr=10&unemailr=yes&mysql=5&umysql=yes&domainptr=0&udomainptr=yes&ftp=1&uftp=yes&php=ON&spam=ON&catchall=ON&ssl=ON&cron=ON&sysinfo=ON&login_keys=ON&dnscontrol=ON&suspend_at_limit=ON&language=en&skin=evolution&packagename=${package_name}&add=save&json=yes"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "create-user-domain" ]; then
      shift
      domain="$1"
      command="CMD_API_DOMAIN"
      data="domain=${domain}&uquota=unlimited&ssl=ON&php=ON&action=create&ubandwidth=unlimited&json=yes"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "enable-email-dkim" ]; then
      shift
      domain="$1"
      command="CMD_API_EMAIL_POP"
      data="action=set_dkim&domain=${domain}&enable=yes&json=yes"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    #da_api_admin "get-dns-zone" "maxibi.com" "_domainkey+TXT+o=+.value"
    elif [ "${action}" == "get-dns-zone" ]; then
      local record_name record_type record_contains_val record_out_display
      shift
      domain="$1"
      filter_cmd="$2"
      command="CMD_API_DNS_CONTROL"
      # Dont need json format now because we want to easily filter the data
      data="domain=${domain}&json=yes"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
      # Executing API via curl based on command above
      record_name=$(echo "${filter_cmd}" | awk -F'+' '{ print $1 }')
      record_type=$(echo "${filter_cmd}" | awk -F'+' '{ print $2 }')
      record_contains_val=$(echo "${filter_cmd}" | awk -F'+' '{ print $3 }')
      record_out_display=$(echo "${filter_cmd}" | awk -F'+' '{ print $4 }')
      echo "Value of filter_cmd is: ${filter_cmd}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "Value of record_name is: ${record_name}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "Value of record_type is: ${record_type}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "Value of record_contains_val is: ${record_contains_val}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "Value of record_out_display is: ${record_out_display}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "===" 2>&1 | tee -a "${REPORT_FILE}"
      #curl --request "${method}" --user "${api_username}":"${api_password}" --data "${data}" "${ssl}://${BOX_HOSTNAME_FQDN}:${DA_PORT}/${command}" | grep 'v=DKIM1' | awk '{for(i=6;i<=NF;++i)printf $i""FS ; print ""}' | sed -e 's/^"//' -e 's/"$//'
      result=$(curl --silent --request "${method}" --user "${api_username}":"${api_password}" --data "${data}" "${ssl}://${BOX_HOSTNAME_FQDN}:${DA_PORT}/${command}" | jq -r ".records[] | select((.name==\"${record_name}\") and (.type==\"${record_type}\") and (.value | contains(\"${record_contains_val}\"))) | ${record_out_display}" | sed -e 's/^"//' -e 's/"$//')
      retval=$?
      if [ -n "${result}" ]; then
        # get out based on return value (prevent next statement from running)
        echo "${result}"
        return ${retval}
      else
        echo "Warning, the TXT record doesn't exist, it should exist"
        exit 147
      fi
      # da_api_admin "create-dns-record" "maxibi.com" "TXT" "_domainkey" "o%3D%7E%3B+r%3Dwebmaster%40sofibox.com"
      # The last one equal to: o=~; r=webmaster@sofibox.com (use https://www.url-encode-decode.com/ to decode)
    elif [ "${action}" == "create-dns-record" ]; then
      local domain name ttl type value domain_id dis_args retval add_dns_record
      shift
      domain="$1"
      type="$2"
      name="$3"
      value="$4" #value=o%3D%7E%3B+r%3Dwebmaster%40
      data="domain=${domain}&type=${type}&name=${name}&value=${value}&ttl=3600&affect_pointers=yes&json=yes&action=add"
      command="CMD_API_DNS_CONTROL"
      method="POST"
      # da_api_admin "create-user-email" "maxibi.com" "webmaster" "1232123" "0" "200"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "create-user-email" ]; then
      local mail_domain mail_user mail_pass mail_quota mail_limit
      shift
      mail_domain="$1"
      mail_user="$2"
      mail_pass="$3"
      mail_quota="$4"
      mail_limit="$5"
      command="CMD_API_EMAIL_POP"
      #https://www.directadmin.com/features.php?id=2587 not sure if this useful
      data="user=${mail_user}&passwd=${mail_pass}&passwd2=${mail_pass}&quota=${mail_quota}&limit=${mail_limit}&domain=${mail_domain}&json=yes&action=create"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    # da_api_admin "create-user-subdomain" "maxibi.com" "sales"
    elif [ "${action}" == "create-user-subdomain" ]; then
      local root_domain sub_domain
      shift
      root_domain="$1"
      sub_domain="$2"
      # CMD_API_SUBDOMAIN AND CMD_API_SUBDOMAINS are the same thing: https://www.directadmin.com/features.php?id=1589
      command="CMD_API_SUBDOMAIN"
      data="domain=${root_domain}&subdomain=${sub_domain}&json=yes&action=create"
      method="POST"
      # da_api_admin "request-domain-ssl" <provider> <root_domain> <keysize> <encryption> <ssl_sub_domains_query>
      # da_api_admin "request-domain-ssl" letsencrypt codegix.com secp521r1 sha256 "le_select0=codegix.com&le_select1=www.codegix.com&le_select2=ftp.codegix.com \
      # &le_select3=mail.codegix.com&le_select4=pop.codegix.com&le_select5=smtp.codegix.com&le_select6=dashboard.codegix.com&le_select7=secure.codegix.com"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "request-domain-ssl" ]; then
      local ssl_root_domain ssl_key_size ssl_encryption
      shift
      ssl_provider="$1"
      ssl_root_domain="$2"
      ssl_key_size="$3"
      ssl_encryption="$4"
      ssl_sub_domains_query="$5"
      # CMD_API_SUBDOMAIN AND CMD_API_SUBDOMAINS are the same thing: https://www.directadmin.com/features.php?id=1589
      command="CMD_API_SSL"
      if [ "${ssl_provider}" == "letsencrypt" ]; then
        data="type=create&request=letsencrypt&name=${ssl_root_domain}&keysize=${ssl_key_size}&encryption=${ssl_encryption} \
      &wildcard=no&domain=${ssl_root_domain}&json=yes&action=save&background=auto&${ssl_sub_domains_query}"
      else
        # Give error because we focus on letsencrypt first
        echo "[${SCRIPT_NAME}]: Error, this provider ${ssl_provider} has no API yet" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    # da_api_admin "set-da-logo" <skin_name> <logo_mode> <path_to_logo.png>
    # skin_name: evolution, enhanced | logo_mode: dark-logo, default-logo
    # eg: da_api_admin "set-da-logo" evolution dark-logo /home/tmp/logo_dark.png
    elif [ "${action}" == "set-da-logo" ]; then
      local skin_name logo_mode logo_path
      shift
      skin_name="$1"
      logo_mode="$2"
      logo_path="$3"
      if [ "${logo_mode}" == "default-logo" ]; then
        logo_mode="1"
      else
        logo_mode="2"
      fi
      command="CMD_SKINS"
      data="action=upload_logo&file=${logo_path}&json=yes&name=${skin_name}&which=${logo_mode}"
      method="POST"
      # da_api_admin "set-da-options" evolution
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "set-da-options" ]; then
      # Customize
      shift
      local skin_name
      skin_name="$1"
      command="CMD_SKINS"
      #config will be stored in: username/skin_customizations/evolution/config.json
      db_route=$(echo "${PHPMYADMIN_LOGIN_ROUTE}" | sed 's/^\///')
      rc_route=$(echo "${ROUNDCUBE_LOGIN_ROUTE}" | sed 's/^\///')
      # Set the grid layout
      default_layout="defaultLayout%22%3A%22grid%22%2C%22"
      data="json=yes&name=evolution&action=save_config_json&config.json=%7B%22menu%22%3A%7B%22user%22%3A%5B%7B%22name%22%3A%22Account+Manager%22%2C%22icon%22%3A%22account-manager%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Fuser%2Fdomains%22%2C%22name%22%3A%22Domain+Setup%22%2C%22icon%22%3A%22domain-setup%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fsubdomains%22%2C%22name%22%3A%22Subdomain+Management%22%2C%22icon%22%3A%22subdomain-management%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fdns%22%2C%22name%22%3A%22DNS+Management%22%2C%22icon%22%3A%22dns-management%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fssl%22%2C%22name%22%3A%22SSL+Certificates%22%2C%22icon%22%3A%22ssl%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fftp-accounts%22%2C%22name%22%3A%22FTP+Management%22%2C%22icon%22%3A%22ftp-management%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fdatabase%22%2C%22name%22%3A%22MySQL+Management%22%2C%22icon%22%3A%22mysql-management%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fdomain-pointers%22%2C%22name%22%3A%22Domain+Pointers%22%2C%22icon%22%3A%22domain-pointers%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fredirects%22%2C%22name%22%3A%22Site+Redirection%22%2C%22icon%22%3A%22site-redirection%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fhotlinks%22%2C%22name%22%3A%22Hotlinks+Protection%22%2C%22icon%22%3A%22hotlinks%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fphp-settings%22%2C%22name%22%3A%22PHP+Settings%22%2C%22icon%22%3A%22php-configuration%22%2C%22enabled%22%3Atrue%7D%5D%7D%2C%7B%22name%22%3A%22E-mail+Manager%22%2C%22icon%22%3A%22email-manager%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Fuser%2Femail%2Faccounts%22%2C%22name%22%3A%22E-mail+Accounts%22%2C%22icon%22%3A%22email-accounts%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Femail%2Fforwarders%22%2C%22name%22%3A%22Forwarders%22%2C%22icon%22%3A%22forwarders%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Femail%2Fautoresponders%22%2C%22name%22%3A%22Autoresponders%22%2C%22icon%22%3A%22autoresponders%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Femail%2Fvacations%22%2C%22name%22%3A%22Vacation+Messages%22%2C%22icon%22%3A%22vacation-messages%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Femail%2Fspamassassin%22%2C%22name%22%3A%22Spamassassin+Setup%22%2C%22icon%22%3A%22spamassassin%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Femail%2Ffilters%22%2C%22name%22%3A%22SPAM+Filters%22%2C%22icon%22%3A%22spam-filters%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Femail%2Flists%22%2C%22name%22%3A%22Mailing+Lists%22%2C%22icon%22%3A%22mailing-lists%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fdns%2Fmx-records%22%2C%22name%22%3A%22MX+Records%22%2C%22icon%22%3A%22mx-records%22%2C%22enabled%22%3Atrue%7D%5D%7D%2C%7B%22icon%22%3A%22advanced-features%22%2C%22name%22%3A%22Advanced+Features%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Fuser%2Fhandlers%22%2C%22name%22%3A%22Apache+Handlers%22%2C%22icon%22%3A%22apache-handlers%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Femail%2Fcatch-all%22%2C%22name%22%3A%22Catch-All+E-mail%22%2C%22icon%22%3A%22catch-all-email%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fbackup%22%2C%22name%22%3A%22Create%2FRestore+Backups%22%2C%22icon%22%3A%22create-restore-backup%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fcronjobs%22%2C%22name%22%3A%22Cron+Jobs%22%2C%22icon%22%3A%22cron-jobs%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Ferror-pages%22%2C%22name%22%3A%22Custom+Error+Pages%22%2C%22icon%22%3A%22custom-error-pages%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fmimetypes%22%2C%22name%22%3A%22Mime+Types%22%2C%22icon%22%3A%22mime-types%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fsecurity-questions%22%2C%22name%22%3A%22Security+Questions%22%2C%22icon%22%3A%22security-questions%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Ftwo-step-auth%22%2C%22name%22%3A%22Two-Step+Authentication%22%2C%22icon%22%3A%22two-step-auth%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fprotected-directories%22%2C%22name%22%3A%22Password+Protected+Directories%22%2C%22icon%22%3A%22password-protected-directories%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fssh-keys%22%2C%22name%22%3A%22SSH+Keys%22%2C%22icon%22%3A%22ssh-keys%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fmodsecurity%22%2C%22name%22%3A%22ModSecurity%22%2C%22icon%22%3A%22mod-security%22%2C%22enabled%22%3Atrue%7D%5D%7D%2C%7B%22icon%22%3A%22system-information%22%2C%22name%22%3A%22System+Info+%26+Files%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22href%22%3A%22%2FCMD_FILE_MANAGER%22%2C%22newTab%22%3Atrue%2C%22name%22%3A%22File+Manager%22%2C%22icon%22%3A%22file-manager%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fperl-modules%22%2C%22name%22%3A%22Installed+Perl+Modules%22%2C%22icon%22%3A%22installed-perl-modules%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fsystem-info%22%2C%22name%22%3A%22System+Information%22%2C%22icon%22%3A%22server-information%22%2C%22enabled%22%3Atrue%7D%2C%7B%22route%22%3A%22%2Fuser%2Fstats%22%2C%22name%22%3A%22Site+Summary+%2F+Statistics+%2F+Logs%22%2C%22icon%22%3A%22site-summary%22%2C%22enabled%22%3Atrue%7D%5D%7D%2C%7B%22icon%22%3A%22extra-features%22%2C%22name%22%3A%22Extra+Features%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2Fsquirrelmail%22%2C%22name%22%3A%22Webmail%3A+Squirrelmail%22%2C%22enabled%22%3Afalse%2C%22newTab%22%3Atrue%2C%22slug%22%3A%22squirrelmail%22%2C%22icon%22%3A%22squirellmail%22%7D%2C%7B%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2F${rc_route}%22%2C%22name%22%3A%22Mail%3A+${ROUNDCUBE_CUSTOM_NAME}%22%2C%22enabled%22%3Atrue%2C%22newTab%22%3Atrue%2C%22slug%22%3A%22roundcube%22%2C%22icon%22%3A%22roundcube%22%7D%2C%7B%22route%22%3A%22phpmyadmin%22%2C%22name%22%3A%22phpMyAdmin%22%2C%22enabled%22%3Afalse%2C%22icon%22%3A%22phpmyadmin%22%7D%2C%7B%22route%22%3A%22plugins%22%2C%22name%22%3A%22Plugins+will+be+inserted+after+this+entry%22%2C%22enabled%22%3Afalse%2C%22icon%22%3A%22%22%7D%2C%7B%22name%22%3A%22DB%3A++${PHPMYADMIN_CUSTOM_NAME}%22%2C%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2F${db_route}%22%2C%22newTab%22%3Atrue%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22phpmyadmin%22%7D%5D%7D%2C%7B%22icon%22%3A%22support-help%22%2C%22name%22%3A%22Support+%26+Help%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22href%22%3A%22%7B%7Bhelp%7D%7D%22%2C%22name%22%3A%22Help%22%2C%22enabled%22%3Atrue%2C%22newTab%22%3Atrue%2C%22icon%22%3A%22help%22%7D%2C%7B%22route%22%3A%22%2Fuser%2Fcreate-ticket%22%2C%22name%22%3A%22Create+Ticket%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22create-ticket%22%7D%2C%7B%22route%22%3A%22%2Fuser%2Fmessages%22%2C%22name%22%3A%22Support+Center%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22support-center%22%7D%5D%7D%5D%2C%22reseller%22%3A%5B%7B%22name%22%3A%22Account+Manager%22%2C%22icon%22%3A%22account-manager%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A3%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Freseller%2Fcreate-user%22%2C%22name%22%3A%22Add+New+User%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22add-new-user%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fusers%22%2C%22name%22%3A%22List+Users%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22list-users%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fuser-packages%22%2C%22name%22%3A%22Manage+User+Packages%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22manage-user-packages%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fpasswords%22%2C%22name%22%3A%22Change+Passwords%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22change-passwords%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fedit-user-message%22%2C%22name%22%3A%22Edit+User+Message%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22edit-user-message%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fsuspension-message%22%2C%22name%22%3A%22Suspension+Message%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22edit-user-message%22%7D%5D%7D%2C%7B%22name%22%3A%22Server+Manager%22%2C%22icon%22%3A%22server-manager%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Freseller%2Fip-config%22%2C%22name%22%3A%22IP+Management%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22ip-management%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fnameservers%22%2C%22name%22%3A%22Name+Servers%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22name-servers%22%7D%2C%7B%22route%22%3A%22%2Fuser%2Fssh-keys%22%2C%22name%22%3A%22SSH+Keys%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22ssh-keys%22%7D%5D%7D%2C%7B%22name%22%3A%22Reseller+Tools%22%2C%22icon%22%3A%22reseller-tools%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Freseller%2Fbackups%22%2C%22name%22%3A%22Manage+User+Backups%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22manage-user-backups%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fmessage-users%22%2C%22name%22%3A%22Message+All+Users%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22message-all-users%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fskins%22%2C%22name%22%3A%22Skin+Manager%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22skin-manager%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fcustomize-skin%22%2C%22name%22%3A%22Customize+Evolution+Skin%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22customize-evolution-skin%22%7D%5D%7D%2C%7B%22name%22%3A%22System+Info+%26+Files%22%2C%22icon%22%3A%22system-information%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22href%22%3A%22%2FCMD_FILE_MANAGER%22%2C%22newTab%22%3Atrue%2C%22name%22%3A%22File+Manager%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22file-manager%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fsystem-info%22%2C%22name%22%3A%22System+Information%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22system-info%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fstats%22%2C%22name%22%3A%22Reseller+Statistics%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22reseller-statistics%22%7D%5D%7D%2C%7B%22name%22%3A%22Extra+Features%22%2C%22icon%22%3A%22extra-features%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2Fsquirrelmail%22%2C%22name%22%3A%22Webmail%3A+Squirrelmail%22%2C%22enabled%22%3Afalse%2C%22newTab%22%3Atrue%2C%22slug%22%3A%22squirrelmail%22%2C%22icon%22%3A%22squirellmail%22%7D%2C%7B%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2Fwebmail%22%2C%22name%22%3A%22Webmail%3A+UebiMiau%22%2C%22enabled%22%3Afalse%2C%22newTab%22%3Atrue%2C%22slug%22%3A%22uebimiau%22%2C%22icon%22%3A%22uebimiau%22%7D%2C%7B%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2F${rc_route}%22%2C%22name%22%3A%22Mail%3A+${ROUNDCUBE_CUSTOM_NAME}%22%2C%22enabled%22%3Atrue%2C%22newTab%22%3Atrue%2C%22slug%22%3A%22roundcube%22%2C%22icon%22%3A%22roundcube%22%7D%2C%7B%22route%22%3A%22phpmyadmin%22%2C%22name%22%3A%22phpMyAdmin%22%2C%22enabled%22%3Afalse%2C%22icon%22%3A%22phpmyadmin%22%7D%2C%7B%22route%22%3A%22plugins%22%2C%22name%22%3A%22Plugins+will+be+inserted+after+this+entry%22%2C%22enabled%22%3Afalse%2C%22icon%22%3A%22%22%7D%2C%7B%22name%22%3A%22DB%3A+${PHPMYADMIN_CUSTOM_NAME}%22%2C%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2F${db_route}%22%2C%22newTab%22%3Atrue%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22phpmyadmin%22%7D%5D%7D%2C%7B%22name%22%3A%22Support+%26+Help%22%2C%22icon%22%3A%22support-help%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22href%22%3A%22%7B%7Bhelp%7D%7D%22%2C%22name%22%3A%22Help%22%2C%22enabled%22%3Atrue%2C%22newTab%22%3Atrue%2C%22icon%22%3A%22help%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Ftickets%22%2C%22name%22%3A%22Manage+Tickets%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22manage-tickets%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Ftickets%2Fcreate%22%2C%22name%22%3A%22Create+Ticket%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22create-ticket%22%7D%5D%7D%5D%2C%22admin%22%3A%5B%7B%22name%22%3A%22Account+Manager%22%2C%22icon%22%3A%22account-manager%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A4%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Fadmin%2Fusers%2Fadmins%2Fcreate%22%2C%22name%22%3A%22Create+Administrator%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22create-administrator%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fusers%2Fadmins%22%2C%22name%22%3A%22List+Administrators%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22list-administrators%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fpasswords%22%2C%22name%22%3A%22Change+Passwords%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22change-passwords%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fusers%2Fresellers%2Fcreate%22%2C%22name%22%3A%22Create+Reseller%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22create-reseller%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fusers%2Fresellers%22%2C%22name%22%3A%22List+Resellers%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22list-resellers%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Freseller-packages%22%2C%22name%22%3A%22Manage+Reseller+Packages%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22manage-reseller-packages%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fusers%22%2C%22name%22%3A%22Show+All+Users%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22show-all-users%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fusers%2Fmove%22%2C%22name%22%3A%22Move+Users+between+Resellers%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22move-users-between-resellers%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fsuspension-message%22%2C%22name%22%3A%22Suspension+Message%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22edit-user-message%22%7D%5D%7D%2C%7B%22name%22%3A%22Server+Manager%22%2C%22icon%22%3A%22server-manager%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A3%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Fadmin%2Fsettings%22%2C%22name%22%3A%22Administrator+Settings%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22administrator-settings%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fcustom-httpd%22%2C%22name%22%3A%22Custom+HTTPD+Configurations%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22custom-httpd-configuration%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fdns%22%2C%22name%22%3A%22DNS+Administration%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22dns-administration%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fip-manager%22%2C%22name%22%3A%22IP+Management%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22ip-management%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fmulti-server%22%2C%22name%22%3A%22Multi+Server+Setup%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22multi-server-setup%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fphp-safe-mode%22%2C%22name%22%3A%22PHP+Configuration%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22php-configuration%22%7D%2C%7B%22route%22%3A%22%2Fuser%2Fssh-keys%22%2C%22name%22%3A%22SSH+Keys%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22ssh-keys%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fmodsecurity%22%2C%22name%22%3A%22ModSecurity%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22%22%7D%5D%7D%2C%7B%22name%22%3A%22Admin+Tools%22%2C%22icon%22%3A%22admin-tools%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A3%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Fadmin%2Fbackups%22%2C%22name%22%3A%22Admin+Backup%2FTransfer%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22admin-backup-transfer%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fbrute-force-monitor%22%2C%22name%22%3A%22Brute+Force+Monitor%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22brute-force-monitor%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fprocess-monitor%22%2C%22name%22%3A%22Process+Monitor%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22process-monitor%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fmail-queue%22%2C%22name%22%3A%22Mail+Queue+Administration%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22mail-queue-administration%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fservices%22%2C%22name%22%3A%22Service+Monitor%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22service-monitor%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fsystem-backup%22%2C%22name%22%3A%22System+Backup%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22system-backup%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Fcustomize-skin%22%2C%22name%22%3A%22Customize+Evolution+Skin%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22customize-evolution-skin%22%7D%2C%7B%22slug%22%3A%22rspamd%22%2C%22href%22%3A%22%2FCMD_RSPAMD_SOCK%2F%22%2C%22name%22%3A%22Rspamd+spam+filtering+system%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22spam-metrics%22%2C%22newTab%22%3Atrue%7D%2C%7B%22slug%22%3A%22netdata%22%2C%22href%22%3A%22%2FCMD_NETDATA_SOCK%22%2C%22name%22%3A%22Netdata+server+metrics%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22netdata%22%2C%22newTab%22%3Atrue%7D%5D%7D%2C%7B%22name%22%3A%22System+Info+%26+Files%22%2C%22icon%22%3A%22system-information%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A3%2C%22entries%22%3A%5B%7B%22route%22%3A%22%2Fadmin%2Fcron-jobs%22%2C%22name%22%3A%22All+User+Cron+Jobs%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22all-user-cron-jobs%22%7D%2C%7B%22href%22%3A%22%2FCMD_FILE_MANAGER%22%2C%22newTab%22%3Atrue%2C%22name%22%3A%22File+Manager%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22file-manager%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Ffile-editor%22%2C%22name%22%3A%22File+Editor%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22file-editor%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fsystem-info%22%2C%22name%22%3A%22System+Information%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22system-information%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Flog-viewer%22%2C%22name%22%3A%22Log+Viewer%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22log-viewer%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fstats%22%2C%22name%22%3A%22Complete+Usage+Statistics%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22complete-usage-statistics%22%7D%5D%7D%2C%7B%22name%22%3A%22Extra+Features%22%2C%22icon%22%3A%22extra-features%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22slug%22%3A%22squirrelmail%22%2C%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2Fsquirrelmail%22%2C%22name%22%3A%22Webmail%3A+Squirrelmail%22%2C%22enabled%22%3Afalse%2C%22newTab%22%3Atrue%2C%22icon%22%3A%22squirellmail%22%7D%2C%7B%22slug%22%3A%22uebimiau%22%2C%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2Fwebmail%22%2C%22name%22%3A%22Webmail%3A+UebiMiau%22%2C%22enabled%22%3Afalse%2C%22newTab%22%3Atrue%2C%22icon%22%3A%22uebimiau%22%7D%2C%7B%22slug%22%3A%22roundcube%22%2C%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2F${rc_route}%22%2C%22name%22%3A%22Mail%3A+${ROUNDCUBE_CUSTOM_NAME}%22%2C%22enabled%22%3Atrue%2C%22newTab%22%3Atrue%2C%22icon%22%3A%22roundcube%22%7D%2C%7B%22name%22%3A%22DB%3A+${PHPMYADMIN_CUSTOM_NAME}%22%2C%22href%22%3A%22%7CWEBAPPS_SSL%7C%3A%2F%2F%7CHOSTNAME%7C%2F${db_route}%22%2C%22newTab%22%3Atrue%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22phpmyadmin%22%7D%2C%7B%22route%22%3A%22phpmyadmin%22%2C%22name%22%3A%22phpMyAdmin%22%2C%22enabled%22%3Afalse%2C%22icon%22%3A%22phpmyadmin%22%7D%2C%7B%22route%22%3A%22plugins%22%2C%22name%22%3A%22Plugins+will+be+inserted+after+this+entry%22%2C%22enabled%22%3Afalse%2C%22icon%22%3A%22%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Fplugin-manager%22%2C%22name%22%3A%22Plugin+Manager%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22plugin-manager%22%7D%5D%7D%2C%7B%22name%22%3A%22Support+%26+Help%22%2C%22icon%22%3A%22support-help%22%2C%22enabled%22%3Atrue%2C%22columnSize%22%3A5%2C%22entries%22%3A%5B%7B%22href%22%3A%22%7B%7Bhelp%7D%7D%22%2C%22name%22%3A%22Help%22%2C%22enabled%22%3Atrue%2C%22newTab%22%3Atrue%2C%22icon%22%3A%22help%22%7D%2C%7B%22route%22%3A%22%2Freseller%2Ftickets%22%2C%22name%22%3A%22Manage+Tickets%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22manage-tickets%22%7D%2C%7B%22route%22%3A%22%2Fadmin%2Flicense%22%2C%22name%22%3A%22Licensing+%2F+Updates%22%2C%22enabled%22%3Atrue%2C%22icon%22%3A%22licensing-updates%22%7D%5D%7D%5D%7D%2C%22colors%22%3A%7B%22primary-dark%22%3A%7B%22hue%22%3A196%2C%22saturation%22%3A100%2C%22lightness%22%3A32.34%2C%22alpha%22%3A100%7D%2C%22safe%22%3A%7B%22hue%22%3A140%2C%22saturation%22%3A41%2C%22lightness%22%3A56%7D%2C%22danger%22%3A%7B%22hue%22%3A20%2C%22saturation%22%3A76%2C%22lightness%22%3A47%7D%2C%22neutral%22%3A%7B%22hue%22%3A180%2C%22saturation%22%3A0.448430493273541%2C%22lightness%22%3A43.72549019607843%7D%7D%2C%22${default_layout}dateFormats%22%3A%7B%22datetime%22%3A%22d%2FM%2Fyyyy+HH%3Amm%3Ass++a%22%2C%22date%22%3A%22d+MMM%2C+yyy%22%2C%22weekStart%22%3A%22monday%22%7D%2C%22theme%22%3A%22%22%2C%22forcedMode%22%3A%22dark%22%7D"
      method="POST"
      # da_api_admin "modify-user" da_user1 name "Arafat Ali"
      # da_api_admin "modify-user" da_user2 nameserver "ns1.sofibox.com" "ns2.sofibox.com"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${action}" == "modify-user" ]; then
      shift
      local setting da_user value1 value2
      da_user="$1"
      setting="$2"
      value1="$3"
      value2="$4"
      command="CMD_API_MODIFY_USER"
      if [ "${setting}" == "email" ]; then
        data="user=${da_user}&evalue=${value1}&json=yes&action=single&email=yes"
      elif [ "${setting}" == "name" ]; then
        data="user=${da_user}&nvalue=${value1}&json=yes&action=single&name=yes"
      elif [ "${setting}" == "nameserver" ]; then
        if [[ -n "${value2}" ]]; then
          data="user=${da_user}&ns1=${value1}&ns2=${value2}&json=yes&action=single&ns=yes"
        else
          echo "[${SCRIPT_NAME}]: Missing value2 argument for setting up ${setting}" 2>&1 | tee -a "${REPORT_FILE}"
          _exit 147
        fi
      elif [ "${setting}" == "skin" ]; then
        data="user=${da_user}&skinvalue=${value1}&json=yes&action=single&skin=yes"
      else
        echo "[${SCRIPT_NAME}]: The setting '${setting}' does not exist!" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"
      # da_admin_api "set-security-qna" "Sekolah menengah dulu aliran apa ?" "sains"
    elif [ "${action}" == "set-security-qna" ]; then
      shift
      local custom_question answer
      custom_question="$1"
      answer="$2"
      command="CMD_SECURITY_QUESTIONS"
      data="type=custom&value=${answer}&json=yes&action=add&custom_question=${custom_question}"
      method="POST"
      # da_admin_api "set-admin-settings"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"

    elif [ "${action}" == "set-admin-settings" ]; then
      shift
      command="CMD_API_ADMIN_SETTINGS"
      data="auto_update=yes&backup_threshold=90&demo_admin=no&demo_reseller=no&demo_user=no&oversell=yes&service_email_active=yes&suspend=yes&user_backup=yes&json=yes&action=save"
      method="POST"
      # da_admin_api "set-server-settings"
      # This API includes security settings and email settings (DA combined this)
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"

    elif [ "${action}" == "set-server-settings" ]; then
      command="CMD_API_ADMIN_SETTINGS"
      data="brute_force_log_scanner=yes&brute_force_scan_apache_logs=2&brute_force_time_limit=1200&brutecount=20&brute_dos_count=100&bruteforce=yes&check_partitions=2&check_subdomain_owner=yes&clear_blacklist_ip_time=86400&clear_brute_log_entry_time=4&clear_brute_log_time=24&demodocsroot=.%2Fdata%2Fskins%2Fevolution&enforce_difficult_passwords=yes&exempt_local_block=no&ip_brutecount=100&logs_to_keep=3&lost_password=no&max_per_email_send_limit=-1&maxfilesize=5368709120&ns1=${BOX_NS1}&ns2=${BOX_NS1}&partition_usage_threshold=95&per_email_limit=200&purge_spam_days=0&rbl_enabled=yes&servername=${BOX_HOSTNAME_FQDN}&session_minutes=35791&timeout=35791&user_brutecount=100&user_can_set_email_limit=yes&virtual_limit=1000&unblock_brute_ip_time=86400&timezone=${BOX_TIMEZONE}&max_username_length=${DA_MAX_UNAME_LENGTH}&json=yes&action=config"
      method="POST"
      # da_admin_api "create-database" <db_name> <db_username> <db_password> <domain>
      # This will create new database with new user
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"

    elif [ "${action}" == "create-database" ]; then
      shift
      local db_name db_username db_password db_domain
      db_name="$1"
      db_username="$2"
      db_password="$3"
      db_domain="$4"
      # CMD_API_DB not working but CMD_DB is working
      command="CMD_DB"
      data="name=${db_name}&user=${db_username}&passwd=${db_password}&passwd2=${db_password}&domain=${db_domain}&userlist=...&action=create&json=yes"
      method="POST"
      # da_admin_api "create-user-database" <db_name> <db_username> <domain>
      # This will select existing user to create database
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"

    elif [ "${action}" == "create-user-database" ]; then
      shift
      local db_name db_username db_password db_domain
      db_name="$1"
      db_username="$2"
      db_domain="$3"
      command="CMD_DB"
      data="name=${db_name}&user=${db_username}&domain=${db_domain}&userlist=${db_username}&action=create&json=yes"
      method="POST"
      echo "Now, executing API with action name: ${action}" 2>&1 | tee -a "${REPORT_FILE}"

    else
      echo "[${SCRIPT_NAME}]: The API action '${action}' does not exist!" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    #_pause 2
    echo "[${SCRIPT_NAME}]: API status: " 2>&1 | tee -a "${REPORT_FILE}"
    echo "----------------------------" 2>&1 | tee -a "${REPORT_FILE}"
    echo "" 2>&1 | tee -a "${REPORT_FILE}"
    #Don't use --max-time or decrease time out because letsencrypt API will need more time to request cert
    #Don't use --silent here (it won't show result)
    curl --request "${method}" --user "${api_username}":"${api_password}" --data "${data}" "${ssl}://${BOX_HOSTNAME_FQDN}:${DA_PORT}/${command}"
    echo "----------------------------" 2>&1 | tee -a "${REPORT_FILE}"
    echo "" 2>&1 | tee -a "${REPORT_FILE}"

  else
    echo "da_api_admin first argument given was: $1" 2>&1 | tee -a "${REPORT_FILE}"
  fi
}

# This will check if system needs to reboot based on /var/run/reboot-required file
# This function also will make sure if a caller function has finished executed, then we won't run that function again.
function check_finish_reboot() {
  local func_name="$1"
  cat /dev/null >"${CONF_PATH}/${func_name}_executed"
  if [ -f /var/run/reboot-required ]; then
    if [ "${ENABLE_SETUP_REBOOT}" == "auto" ]; then
      echo "[${SCRIPT_NAME}]: [Notice]: *** System reboot required. Rebooting in 30 seconds (ctrl+c to cancel) ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 30
      _reboot
    elif [ "${ENABLE_SETUP_REBOOT}" == "interactive" ]; then
      read -r -s -n 1 -p "[${SCRIPT_NAME}]: [Notice]: *** System reboot required. Press any key to reboot (ctrl+c to cancel) ..." 2>&1 | tee -a "${REPORT_FILE}"
      _reboot
    elif [ "${ENABLE_SETUP_REBOOT}" == "disabled" ]; then
      read -r -s -n 1 -p "[${SCRIPT_NAME}]: [Notice]: *** Warning, system reboot required, but ENABLE_SETUP_REBOOT setting is disabled!" 2>&1 | tee -a "${REPORT_FILE}"
    fi
    echo ""
  else
    echo "[${SCRIPT_NAME}]: [OK]: ${func_name} has been executed" 2>&1 | tee -a "${REPORT_FILE}"
    # This sleep is for debugging, when finish developing this script, I should remove this sleep to speed up the script
    #sleep 1
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  return 0
}

# This function will check service error and try to repair it using common solutions like log error information
# check_fix_service <service_name>
# This function is a standalone service
function check_fix_service() {
  local service_name="$1"
  local gc retval lfd_service csf_service
  echo "[${SCRIPT_NAME}]: Checking ${service_name} status ..." 2>&1 | tee -a "${REPORT_FILE}"
  sleep 2
  if [ "${service_name}" == "csf" ]; then
    # Fix that here
    csf_service=$(systemctl is-active csf)
    if [ "${csf_service}" == "active" ]; then
      _echo success "OK, ${service_name} service is running with status 0"
    else
      # CSF fix 1 - restarting
      _echo warning "Warning, unable to start CSF service properly. Restarting CSF ..."
      systemctl restart csf
      sleep 3
      csf_service=$(systemctl is-active csf)
      if [ "${csf_service}" == "active" ]; then
        _echo warning "Warning, unable to start CSF service properly. Please check the log file for more hints"
        _exit 147
      else
        _echo warning "OK, CSF service is running with status 0"
      fi
      # CSF fix 2 - pending if any
    fi
  fi

  if [ "${service_name}" == "lfd" ]; then
    lfd_service=$(systemctl is-active lfd)
    if [ "${lfd_service}" == "active" ]; then
      _echo success "OK, ${service_name} has started with status 0"
    else
      _echo warning "Warning, unable to start LFD service properly. Trying to solve this based on common problems ..."
      sleep 1
      # Start lfd to generate log file because first it had no log
      _echo default "Starting lfd to generate lfd log file ..."
      systemctl start lfd
      # Waiting 10 seconds (so that the log file is generated properly within this time)
      sleep 5
      # lfd known fix 1
      if [ -f /var/log/lfd.log ]; then
        gc=$(grep -ic 'you may need to install the IO::Socket::INET6 module' /var/log/lfd.log)
        if [ "${gc}" -ne 0 ]; then
          _echo warning "Found missing perl IO::Socket::INET6 module. Installing libio-socket-inet6-perl for Debian"
          sleep 1
          # Use this function for best compatibility with other DISTRO
          install_required "apt:libio-socket-inet6-perl"
          #apt-get -y install libio-socket-inet6-perl 2>&1 | tee -a "${REPORT_FILE}"
          _echo yellow "Clearing lfd log entry ..."
          sleep 1
          cat /dev/null >/var/log/lfd.log
          _echo yellow "Restarting lfd ..."
          systemctl restart lfd
          # Waiting at least 5 seconds (so that the lfd process is up and it generates a log file for the first time)
          sleep 5
          check_fix_service "lfd"
        else
          _echo error "Error, unable to understand why lfd cannot be started. Check /var/log/lfd.log for more hints"
          _exit 147
        fi
      else
        # This is just in case if log file not appear
        _echo warning "Warning, lfd log file not generated"
        _echo default "Rechecking lfd status in 5 seconds ..."
        sleep 5
        check_fix_service "lfd"
      fi

      # lfd known fix 2
      # ----

      # lfd known fix 3 and more
    fi
  fi

  # more services error to fix goes here ...
}

# This function is a standalone function
# It restarts software server based on the installation string provided
function restart_da_web_server() {
  if [ "${CB_WEB_SERVER_SOFTWARE}" == "nginx_apache" ]; then
    echo "[${SCRIPT_NAME}]: Restarting httpd for new httpd config ..." 2>&1 | tee -a "${REPORT_FILE}"
    systemctl restart httpd
    echo "[${SCRIPT_NAME}]: Restarting nginx ..." 2>&1 | tee -a "${REPORT_FILE}"
    systemctl restart nginx
  elif [ "${CB_WEB_SERVER_SOFTWARE}" == "nginx" ]; then
    echo "[${SCRIPT_NAME}]: Restarting nginx ..." 2>&1 | tee -a "${REPORT_FILE}"
    systemctl restart nginx
  elif [ "${CB_WEB_SERVER_SOFTWARE}" == "apache" ]; then
    echo "[${SCRIPT_NAME}]: Restarting httpd for new httpd config ..." 2>&1 | tee -a "${REPORT_FILE}"
    systemctl restart httpd
  else
    :
  fi
}

function setup_pre() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    if [ "${DISTRO_ID}" == "centos" ]; then
      echo "[${SCRIPT_NAME}]: Current OS distro ID is centos. Disabling SELinux policy ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      setenforce 0
      if [ -e /etc/selinux/config ]; then
        sed -i s/^SELINUX=.*$/SELINUX=disabled/ /etc/selinux/config
      fi
      if [ -e /usr/sbin/setenforce ]; then
        /usr/sbin/setenforce 0
      fi
      check_finish_reboot "${FUNCNAME[0]}"
    elif [ "${DISTRO_ID}" == "debian" ]; then
      # psmisc = pstree utils (needed by maxigpg script from maxicode)

      # Known usability bug from Debian installer with old grub-pc
      # Fixed grub-pc appear interactive GUI when running dist-upgrade https://github.com/hashicorp/vagrant/issues/289
      # This is the Debian usability bug for grub as explained in here:
      # https://askubuntu.com/questions/23418/what-do-i-select-for-grub-install-devices-after-an-update#comment837055_23418
      # This only show when you have kernel set to GRUB 2

      apt-get -y update
      apt-get -y upgrade

      # By default sudo is not installed. It's needed for new OS
      apt-get -y install sudo screen nmap psmisc gpg unzip zip 2>&1 | tee -a "${REPORT_FILE}"
    else
      echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# Get the latest scripts from private repo (need to have private token defined in config)
# This private repo contains lots of security scripts for Linux (c) by Arafat Ali (aka MaXi32)
# can re-run this to re-clone (update latest codes)
get_latest_maxinet() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    exec_time start "${FUNCNAME[0]}"
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local GIT_ASKPASS
    if ! command -v git &>/dev/null; then
      if [ "${DISTRO_ID}" == "centos" ]; then
        echo "[${SCRIPT_NAME}]: Downloading git for centos ..." 2>&1 | tee -a "${REPORT_FILE}"
        dnf -y install git 2>&1 | tee -a "${REPORT_FILE}"
      elif [ "${DISTRO_ID}" == "debian" ]; then
        echo "[${SCRIPT_NAME}]: Downloading git for debian ..." 2>&1 | tee -a "${REPORT_FILE}"
        apt-get -y install git 2>&1 | tee -a "${REPORT_FILE}"
      else
        echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    fi
    # This one work for both CentOS and Debian
    echo "[${SCRIPT_NAME}]: Setting up temporary git authentication for private repository ..." 2>&1 | tee -a "${REPORT_FILE}"
    cat /dev/null >"${HOME}/.git-askpass"
    echo "#!/bin/bash" >>"${HOME}/.git-askpass"
    echo "echo ${GIT_TOKEN}" >>"${HOME}/.git-askpass"
    chmod +x "${HOME}/.git-askpass"
    export GIT_ASKPASS="${HOME}/.git-askpass"
    cd_to_path "${DATA_PATH}"
    echo "[${SCRIPT_NAME}]: Removing existing ${SCRIPT_NAME} repository ..." 2>&1 | tee -a "${REPORT_FILE}"
    # remove existing setup
    rm -rf "${DATA_PATH}/maxinet"
    echo "[${SCRIPT_NAME}]: Cloning new ${SCRIPT_NAME} repository ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~"
    git clone "${SETUP_GIT_URL}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~"
    # Now we have setup folder.
    # Delete these files for security
    echo "[${SCRIPT_NAME}]: Removing git authentication and destroying its environment variable ..." 2>&1 | tee -a "${REPORT_FILE}"
    rm -f "${HOME}/.git-askpass"
    unset GIT_ASKPASS
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
  exec_time end "${FUNCNAME[0]}"

}

# Basic security hardening for Linux
function secure_box() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local find_au rsa_public_key
    # This file should exist in the root file after OS has finished installation (preseed file put this file)
    rsa_public_key="/root/user_${SSH_USERNAME}_${BOX_HOSTNAME_FQDN}.id_rsa.pub"
    if [ ! -f "${rsa_public_key}" ]; then
      _echo "$(msg yellow)Warning, the RSA public key file ${rsa_public_key} not found inside operating system! Using the key from variable (warning, make sure this key is up to date) ...$(msg end)" --name
      _pause 15
      rsa_public_key="${SSH_PUBLIC_KEY}"
    else
      echo "Using RSA public key from ${rsa_public_key} for ${SSH_USERNAME} SSH login ..."
      # Reassign SSH_PUBLIC_KEY to the latest SSH key
      rsa_public_key=$(cat "${rsa_public_key}")
    fi
    echo "[${SCRIPT_NAME}]: Securing ${BOX_HOSTNAME_FQDN} ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    echo "[${SCRIPT_NAME}]: Changing root password ..." 2>&1 | tee -a "${REPORT_FILE}"

    if [ "${DISTRO_ID}" == "centos" ]; then
      echo "${ROOT_USERPASS}" | passwd --stdin "${ROOT_USERNAME}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${DISTRO_ID}" == "debian" ]; then
      echo "${ROOT_USERNAME}:${ROOT_USERPASS}" | chpasswd
    else
      echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    echo "[${SCRIPT_NAME}]: Setting hostname to ${BOX_HOSTNAME_FQDN} ..." 2>&1 | tee -a "${REPORT_FILE}"
    hostnamectl set-hostname "${BOX_HOSTNAME_FQDN}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: [Testing]: hostname is $(hostname)" 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Setting timezone to ${BOX_TIMEZONE} ..." 2>&1 | tee -a "${REPORT_FILE}"
    timedatectl set-timezone "${BOX_TIMEZONE}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: [Testing]: Current date is $(date)" 2>&1 | tee -a "${REPORT_FILE}"

    if [ "${DISTRO_ID}" == "centos" ]; then
      echo "[${SCRIPT_NAME}]: Creating a username ${SSH_USERNAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
      adduser "${SSH_USERNAME}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Setting password for ${SSH_USERNAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
      echo "${SSH_USERPASS}" | passwd --stdin "${SSH_USERNAME}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Adding user ${SSH_USERNAME} to the highest privilege group ..." 2>&1 | tee -a "${REPORT_FILE}"
      gpasswd -a "${SSH_USERNAME}" wheel 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${DISTRO_ID}" == "debian" ]; then
      echo "[${SCRIPT_NAME}]: Creating a username ${SSH_USERNAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
      useradd "${SSH_USERNAME}" -s /bin/bash -m 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Setting password for ${SSH_USERNAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
      echo "${SSH_USERNAME}:${SSH_USERPASS}" | chpasswd
      echo "[${SCRIPT_NAME}]: Adding user ${SSH_USERNAME} to the highest privilege group ..." 2>&1 | tee -a "${REPORT_FILE}"
      usermod -aG sudo "${SSH_USERNAME}" 2>&1 | tee -a "${REPORT_FILE}"
    else
      echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    echo "[${SCRIPT_NAME}]: Testing ${SSH_USERNAME} log in ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: =~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
    sudo -H -u "${SSH_USERNAME}" bash -c 'echo "[Testing]: Hello, I am ${USER}, with uid ${UID}"' 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: =~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
    # TIP: To remove this user we can do this:
    # userdel -r "${SSH_USERNAME}" , where -r will also delete home directory

    echo "[${SCRIPT_NAME}]: Creating SSH private key using the name of ${SSH_USERNAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Creating a directory of .ssh in ${SSH_USERNAME}'s home directory ..." 2>&1 | tee -a "${REPORT_FILE}"
    sudo -H -u "${SSH_USERNAME}" bash -c "mkdir -p ~/.ssh"
    echo "[${SCRIPT_NAME}]: Creating a file .ssh/authorized_keys in ${SSH_USERNAME}'s home directory ..." 2>&1 | tee -a "${REPORT_FILE}"
    sudo -H -u "${SSH_USERNAME}" bash -c "touch ~/.ssh/authorized_keys"

    echo "[${SCRIPT_NAME}]: Copying the public key into ~/.ssh/authorized_keys ..."

    sudo -H -u "${SSH_USERNAME}" bash -c "echo ${rsa_public_key} >~/.ssh/authorized_keys"

    echo "[${SCRIPT_NAME}]: Changing .ssh/authorized_keys permission to chmod 700 ..." 2>&1 | tee -a "${REPORT_FILE}"
    sudo -H -u "${SSH_USERNAME}" bash -c "chmod 700 ~/.ssh/authorized_keys"

    #sed -i "/AllowUsers/c\AllowUsers ${SSH_USERNAME}" /etc/ssh/sshd_config
    find_au=$(grep -w "AllowUsers ${SSH_USERNAME}" /etc/ssh/sshd_config)
    if [[ -z "${find_au}" ]]; then
      # Put at the bottom
      echo "[${SCRIPT_NAME}]: Adding user ${SSH_USERNAME} to AllowUsers list in sshd_config ..." 2>&1 | tee -a "${REPORT_FILE}"
      echo "AllowUsers ${SSH_USERNAME}" >>/etc/ssh/sshd_config
    else
      echo "[${SCRIPT_NAME}]: [Skipped] user ${SSH_USERNAME} is already set as AllowUsers list in sshd_config ..." 2>&1 | tee -a "${REPORT_FILE}"
    fi
    # Don't permit root login
    echo "[${SCRIPT_NAME}]: Disabling root login via sshd_config ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i '/^PermitRootLogin/s/yes/no/' /etc/ssh/sshd_config
    echo "[${SCRIPT_NAME}]: Disabling Password authentication via sshd_config ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/^#PasswordAuthentication.*/PasswordAuthentication no/" /etc/ssh/sshd_config
    echo "[${SCRIPT_NAME}]: Disabling empty password login via sshd_config ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/^#PermitEmptyPasswords.*/PermitEmptyPasswords no/" /etc/ssh/sshd_config

    echo "[${SCRIPT_NAME}]: Changing SSH default port from 22 to ${SSH_PORT} so CSF will automatically add this PORT during installation ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/#Port 22/Port ${SSH_PORT}/" /etc/ssh/sshd_config
    echo "[${SCRIPT_NAME}]: Changing SSH to listen only to IPv4 (disable IPv6 SSH login) ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/^#AddressFamily.*/AddressFamily inet/" /etc/ssh/sshd_config
    # Adding login banner
    echo "[${SCRIPT_NAME}]: Setting login banner for issue and issue.net ..." 2>&1 | tee -a "${REPORT_FILE}"

    {
      echo "Legal Authentication Banner:"
      echo "---------------------------"
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~00000~=~=~=~=~=~=~=~=~+~=~=~=~=~+~="
      echo "Welcome to ${COMPANY_ID}. This is the ${BOX_HOSTNAME^^} Server"
      echo "The ${BOX_HOSTNAME^^} consists of ENERGY where it has been created"
      echo "perfectly with a certain EQUATIONS from NOTHING. Human"
      echo "beings have changed the original EQUATIONS to their own"
      echo "EQUATIONS. The ENERGY consists of TIME where TIME is MONEY"
      echo "and MONEY is part of the RESOURCES. If you need SOMETHING,"
      echo "the most ethical way in the world of humanity is asking"
      echo "for SOMETHING instead of manipulating the RESOURCES."
      echo "Disconnect now if you are not one of the team at Sofibox"
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~00000~=~=~=~=~=~=~=~=~+~=~=~=~=~+~="
      echo "Do not waste your RESOURCES for NOTHING - MaXi32, 2001"
      echo "=============== We turned on 1 LiGHT DaRK =============="
      echo ""
      echo "SECURE TAG: access, legal, law, connect, enforce, system"
    } >/etc/issue
    cp -p /etc/issue /etc/issue.net
    echo "[${SCRIPT_NAME}]: Enabling login banner in sshd_config ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/^#Banner none/Banner \/etc\/issue/" /etc/ssh/sshd_config

    if [ "${DISTRO_ID}" == "centos" ]; then
      echo "[${SCRIPT_NAME}]: Adding SSH port ${SSH_PORT}/tcp to firewalld ..." 2>&1 | tee -a "${REPORT_FILE}"
      sudo firewall-cmd --permanent --zone=public --add-port="${SSH_PORT}/tcp" 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Adding an IP from ${TEMP_ALLOW_IP} in firewalld to prevent locked out during setup" 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      sudo firewall-cmd --permanent --add-source="${TEMP_ALLOW_IP}" >&1 | tee -a "${REPORT_FILE}"
      firewall-cmd --reload
    elif [ "${DISTRO_ID}" == "debian" ]; then
      echo "[${SCRIPT_NAME}]: [Notice]: The default debian installation doesn't include firewall. Installing ufw to protect protect server during setup ..." 2>&1 | tee -a "${REPORT_FILE}"
      apt install ufw 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Adding SSH port ${SSH_PORT}/tcp to ufw ..." 2>&1 | tee -a "${REPORT_FILE}"
      sudo ufw allow "${SSH_PORT}/tcp" 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Adding an IP from ${TEMP_ALLOW_IP} in ufw to prevent locked out during setup" 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      sudo ufw allow from "${TEMP_ALLOW_IP}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Enabling ufw firewall ..." 2>&1 | tee -a "${REPORT_FILE}"
      sudo ufw --force enable 2>&1 | tee -a "${REPORT_FILE}"
    else
      echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    # Another SSHD tweaks
    echo "[${SCRIPT_NAME}]: Hardening other settings for SSHD_CONFIG ..." 2>&1 | tee -a "${REPORT_FILE}"
    # Recommended by lynis
    echo "[${SCRIPT_NAME}]: Setting SSH LogLevel to VERBOSE ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/^#LogLevel.*/LogLevel VERBOSE/" /etc/ssh/sshd_config
    #sleep 1
    # Recommended by lynis
    echo "[${SCRIPT_NAME}]: Setting SSH MaxAuthTries to 5 ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/^#MaxAuthTries.*/MaxAuthTries 5/" /etc/ssh/sshd_config
    #sleep 1
    # Recommended by lynis
    echo "[${SCRIPT_NAME}]: Setting SSH MaxSessions to 10 ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/^#MaxSessions.*/MaxSessions 10/" /etc/ssh/sshd_config
    #sleep 1
    # This one recommended by CSF security page:
    echo "[${SCRIPT_NAME}]: Setting SSH UseDNS to no ..." 2>&1 | tee -a "${REPORT_FILE}"
    sed -i "s/^#UseDNS.*/UseDNS no/" /etc/ssh/sshd_config
    #sleep 1

    # Restart SSHD
    echo "[${SCRIPT_NAME}]: Restarting sshd service ..." 2>&1 | tee -a "${REPORT_FILE}"
    # This works with debian too
    systemctl reload sshd 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: [OK]: Now ${BOX_HOSTNAME_FQDN} is secured with SSH. You can login using new port: ${SSH_PORT}" 2>&1 | tee -a "${REPORT_FILE}"
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function init_local_maxicode() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Copying maxicode scripts into /usr/local/maxicode ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    cp -r "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/maxicode" /usr/local/
    # TODO add maxicode folder to /usr/local/maxicode
    # Make sure maxinet is binary executable (link that on startup)
    # run maxinet --init-maxicode in order to get the latest version of binary from maxicode.
    # make sure IDE use this maxicode directly from that private repo, so box will be always up to date

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# This one configuration hostname, network etc.
function configure_net() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local current_lan grub_count
    # Download this from git better
    if [ -d "${DATA_PATH}/maxinet" ]; then
      # This is bind or bind setting called named.conf. If we put this first in /etc, when install bind it will use this setting
      # Bind setting is the same config for centos, debian
      echo "[${SCRIPT_NAME}]: Copying modified named.conf from maxinet to /etc/named.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
      cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/etc/named.conf" /etc/named.conf
    else
      # This is weird error and should exit
      echo "[${SCRIPT_NAME}]: Warning no file named.conf found in maxinet folder. Check maxinet clone folder." 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    echo "[${SCRIPT_NAME}]: Configuring DA system email ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "${ROOT_EMAIL}" >/root/.email.txt #Root email will use this one
    echo "${ADMIN_EMAIL}" >/root/.forward  #Forward all email to admin (webmaster)
    echo "[${SCRIPT_NAME}]: Configuring network interface ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 2
    # Warning, LAN can have one or more
    current_lan=$(ip link | awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2}' | sed 's/ //g')
    if [ "${current_lan}" != "${NIC_INTERFACE_NAME}" ]; then
      echo "[${SCRIPT_NAME}]: [Warning]: Current LAN interface is emulated with ${current_lan} but it was set as: ${NIC_INTERFACE_NAME}" 2>&1 | tee -a "${REPORT_FILE}"
      if [ "${NIC_INTERFACE_NAME}" == "eth0" ]; then
        echo "[${SCRIPT_NAME}]: Modifying grub file to disable interface name convention ..." 2>&1 | tee -a "${REPORT_FILE}"
        #sed -i 's/rhgb quiet/net.ifnames=0 biosdevname=0/' /etc/default/grub
        # This will not run if values exist
        grub_count=$(grep -Ec 'GRUB_CMDLINE_LINUX=.*net.ifnames|GRUB_CMDLINE_LINUX_DEFAULT=.*net.ifnames' /etc/default/grub)
        if [ "${grub_count}" -eq 0 ]; then
          grub_count=$(grep -Ec 'GRUB_CMDLINE_LINUX=""' /etc/default/grub)
          if [ "${grub_count}" -eq 0 ]; then
            echo "[${SCRIPT_NAME}]: Appending net.ifnames=0 for GRUB_CMDLINE_LINUX in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
            sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& net.ifnames=0/' /etc/default/grub
          else
            # Adding new value (not appending)
            echo "[${SCRIPT_NAME}]: Adding new value net.ifnames=0 for GRUB_CMDLINE_LINUX in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
            sed -i 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="net.ifnames=0"/g' /etc/default/grub
          fi
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: The value 'biosdevname' has already set for GRUB_CMDLINE_LINUX or GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
        fi
        grub_count=$(grep -Ec 'GRUB_CMDLINE_LINUX=.*biosdevname|GRUB_CMDLINE_LINUX_DEFAULT=.*biosdevname' /etc/default/grub)
        if [ "${grub_count}" -eq 0 ]; then
          grub_count=$(grep -Ec 'GRUB_CMDLINE_LINUX=""' /etc/default/grub)
          if [ "${grub_count}" -eq 0 ]; then
            echo "[${SCRIPT_NAME}]: Appending biosdevname=0 for GRUB_CMDLINE_LINUX in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
            sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& biosdevname=0/' /etc/default/grub
          else
            # Adding new value (not appending)
            echo "[${SCRIPT_NAME}]: Adding new value biosdevname=0 for GRUB_CMDLINE_LINUX in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
            sed -i 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="biosdevname=0"/g' /etc/default/grub
          fi
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: The value 'biosdevname' has already set for GRUB_CMDLINE_LINUX or GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
        fi
        sleep 1

        # Enabling serial terminal
        grub_count=$(grep -Ec 'GRUB_CMDLINE_LINUX=.*console|GRUB_CMDLINE_LINUX_DEFAULT=.*console' /etc/default/grub)
        if [ "${grub_count}" -eq 0 ]; then
          grub_count=$(grep -Ec 'GRUB_CMDLINE_LINUX=""' /etc/default/grub)
          if [ "${grub_count}" -eq 0 ]; then
            echo "[${SCRIPT_NAME}]: Appending console=ttyS0,19200n8 for GRUB_CMDLINE_LINUX in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
            sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& console=ttyS0,19200n8/' /etc/default/grub
          else
            # Adding new value (not appending)
            echo "[${SCRIPT_NAME}]: Adding new value console=ttyS0,19200n8 for GRUB_CMDLINE_LINUX in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
            sed -i 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="console=ttyS0,19200n8"/g' /etc/default/grub
          fi
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: The value 'console' has already set for GRUB_CMDLINE_LINUX or GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
        fi
        sleep 1

        # Enabling serial terminal 1
        grub_count=$(grep -Ec '^GRUB_SERIAL_COMMAND=' /etc/default/grub)
        if [ "${grub_count}" -eq 0 ]; then
          echo "[${SCRIPT_NAME}]: No variable GRUB_SERIAL_COMMAND found in /etc/default/grub. Creating empty variable GRUB_SERIAL_COMMAND= ..." 2>&1 | tee -a "${REPORT_FILE}"
          echo "GRUB_SERIAL_COMMAND=\"\"" >>/etc/default/grub
        fi
        grub_count=$(grep -Ec 'GRUB_SERIAL_COMMAND=.*serial' /etc/default/grub)
        if [ "${grub_count}" -eq 0 ]; then
          grub_count=$(grep -Ec 'GRUB_SERIAL_COMMAND=""' /etc/default/grub)
          if [ "${grub_count}" -eq 0 ]; then
            # In case if this option need appending
            echo "[${SCRIPT_NAME}]: Appending serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1 for GRUB_SERIAL_COMMAND in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
            sed -i 's/GRUB_SERIAL_COMMAND="[^"]*/& serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1/' /etc/default/grub
          else
            # Adding new value (not appending)
            echo "[${SCRIPT_NAME}]: Adding new value serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1 for GRUB_SERIAL_COMMAND in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
            sed -i 's/GRUB_SERIAL_COMMAND=""/GRUB_SERIAL_COMMAND="serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1"/g' /etc/default/grub
          fi
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: The value 'serial' has already set for GRUB_SERIAL_COMMAND in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
        fi

        sleep 1

        # Enabling serial terminal 2
        grub_count=$(grep -Ec '^GRUB_TERMINAL=' /etc/default/grub)
        if [ "${grub_count}" -eq 0 ]; then
          echo "[${SCRIPT_NAME}]: No variable GRUB_TERMINAL found in /etc/default/grub. Creating empty variable GRUB_TERMINAL= ..." 2>&1 | tee -a "${REPORT_FILE}"
          echo "GRUB_TERMINAL=" >>/etc/default/grub
        fi
        grub_count=$(grep -Ec 'GRUB_TERMINAL=serial' /etc/default/grub)
        if [ "${grub_count}" -eq 0 ]; then
          # Adding new value (not appending)
          echo "[${SCRIPT_NAME}]: Adding new value GRUB_TERMINAL=serial for GRUB_TERMINAL in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
          sed -i 's/GRUB_TERMINAL=/GRUB_TERMINAL=serial/g' /etc/default/grub
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: The value 'serial' has already set for GRUB_TERMINAL in /etc/default/grub ..." 2>&1 | tee -a "${REPORT_FILE}"
        fi
        sleep 1

        echo "[${SCRIPT_NAME}]: Recompiling grub boot loader ..." 2>&1 | tee -a "${REPORT_FILE}"
        if [ "${DISTRO_ID}" == "centos" ]; then
          # Recompile grub centos command
          grub2-mkconfig -o /boot/grub2/grub.cfg 2>&1 | tee -a "${REPORT_FILE}"
          # Need to reboot here
        elif [ "${DISTRO_ID}" == "debian" ]; then
          # Recompile grub debian command
          grub-mkconfig -o /boot/grub/grub.cfg 2>&1 | tee -a "${REPORT_FILE}"
        else
          echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
          _exit 147
        fi
      else
        # Rename other interfaces here
        echo "[${SCRIPT_NAME}]: The new LAN interface is set to ${NIC_INTERFACE_NAME}" 2>&1 | tee -a "${REPORT_FILE}"
        # Or recommend to use screen
        echo "[${SCRIPT_NAME}]: Turning off current LAN interface for renaming ${current_lan} ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Warning, the network needs to be turned off in order to be able to rename to new LAN interface" 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: ** Warning, If you are on SSH, you will be disconnected from SSH" 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: *** Warning, you will not see the following operations and system will reboot automatically. You can re-run this script again to continue setup" 2>&1 | tee -a "${REPORT_FILE}"
        # Because the script reboot, we need to re-run this function to check if interface is already set like in the config file
        # TODO fix this with background process
        _pause
        ip link set "${current_lan}" down
        echo "[${SCRIPT_NAME}]: Renaming ${current_lan} to ${NIC_INTERFACE_NAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
        sleep 1
        ip link set "${current_lan}" name "${NIC_INTERFACE_NAME}"
        echo "[${SCRIPT_NAME}]: Turning on the new LAN interface ${NIC_INTERFACE_NAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
        sleep 1
        ip link set "${NIC_INTERFACE_NAME}" up
        echo "[${SCRIPT_NAME}]: Renaming interface file ifcfg-${current_lan} to ifcfg-${NIC_INTERFACE_NAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
        sleep 1
        mv /etc/sysconfig/network-scripts/ifcfg-{"${current_lan}","${NIC_INTERFACE_NAME}"}
        _reboot
      fi
      # Changing this would require restart. So let's restart
      # Before restart we need to configure network first:
      configure_net2
      echo "[${SCRIPT_NAME}]: Creating required reboot flag for network interface to revert back to eth0 automatically after reboot ..." 2>&1 | tee -a "${REPORT_FILE}"
      cat /dev/null >/var/run/reboot-required
      sleep 1
    else
      echo "[${SCRIPT_NAME}]: [Skipped]: OK, current LAN interface name is same with NIC_INTERFACE_NAME from config file" 2>&1 | tee -a "${REPORT_FILE}"
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# This would change like static IP, resolv.conf etc ...
# I prefer to use eth0 than a strange name like epn${x} but now this script can rename whatever interface you want
function configure_net2() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local old_host lh_count
    # So, at this stage we know our LAN would be ${NIC_INTERFACE_NAME} then we can insert network information directly into ${NIC_INTERFACE_NAME}
    if [ "${DISTRO_ID}" == "centos" ]; then
      # Create network static IP configuration
      echo "[${SCRIPT_NAME}]: Inserting CentOS static IP information for ${NIC_INTERFACE_NAME} at /etc/sysconfig/network-scripts/ifcfg-${NIC_INTERFACE_NAME} ..." 2>&1 | tee -a "${REPORT_FILE}"
      {
        echo "# ==============================================="
        echo "# This configuration file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# ==============================================="
        echo "# GENERAL DEVICE CONFIGURATION "
        echo 'TYPE="Ethernet"'
        echo "DEVICE=\"${NIC_INTERFACE_NAME}"\"
        echo "NAME=\"${NIC_INTERFACE_NAME}"\"
        echo 'ONBOOT="yes"'
        echo 'BOOTPROTO="none"'
        echo 'PEERDNS="no"'
        # This will generate new UUID for "${NIC_INTERFACE_NAME}"
        echo "UUID=$(uuidgen "${NIC_INTERFACE_NAME}")"
        echo "DOMAIN=${BOX_DOMAIN}"
        echo ""
        echo "# IPv4 Configuration (Public)"
        echo 'IPV4_FAILURE_FATAL="no"'
        echo 'DEFROUTE="yes"'
        echo "IPADDR0=${IPV4_ADD0}"
        echo "GATEWAY0=${IPV4_DEF_GATEWAY0}"
        echo "PREFIX0=24"
        echo ""
        echo "# IPv4 Configuration (Private)"
        echo '# IPADDR2=""'
        echo "# PREFIX2=17"
        echo ""
        echo "# IPv6 Configuration (Public)"
        echo 'IPV6INIT="yes"'
        echo 'IPV6_AUTOCONF="yes"'
        echo 'IPV6_DEFROUTE="yes"'
        echo 'IPV6_FAILURE_FATAL="no"'
        echo 'IPV6_ADDR_GEN_MODE="stable-privacy"'
        echo '#IPV6_ADDR_GEN_MODE="eui64"'
        echo "IPV6ADDR=${IPV6_ADD0}/64"
        echo "IPV6_DEFAULTGW=${IPV6_DEF_GATEWAY0}"
        echo 'IPV6_PRIVACY="no"'
        echo ""
        echo "# resolvconf - doesn't recognize more than 3 nameservers. (IPv4 & IPv6)"
        echo "DNS1=${NAME_SERVER1}"
        echo "DNS2=${NAME_SERVER2}"
        echo "DNS3=${NAME_SERVER3}"
      } >"/etc/sysconfig/network-scripts/ifcfg-${NIC_INTERFACE_NAME}"
    elif [ "${DISTRO_ID}" == "debian" ]; then
      echo "[${SCRIPT_NAME}]: Inserting Debian static IP information for ${NIC_INTERFACE_NAME} at /etc/network/interfaces ..." 2>&1 | tee -a "${REPORT_FILE}"
      {
        echo "# ==============================================="
        echo "# This configuration file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# ==============================================="
        echo "# This file describes the network interfaces available on your system"
        echo "# and how to activate them. For more information, see interfaces(5)."
        echo ""
        echo "source /etc/network/interfaces.d/*"
        echo ""
        echo "# The loopback network interface"
        echo "auto lo"
        echo "iface lo inet loopback"
        echo ""
        echo "# auto ${NIC_INTERFACE_NAME} is needed to configure static IP for both IPv4 and IPv6"
        echo "auto ${NIC_INTERFACE_NAME}"
        echo "# IPv4 Configuration (Public)"
        echo "iface ${NIC_INTERFACE_NAME} inet static"
        echo "address ${IPV4_ADD0}/24"
        echo "gateway ${IPV4_DEF_GATEWAY0}"
        echo ""
        echo "# IPv6 Configuration (Public)"
        echo "iface ${NIC_INTERFACE_NAME} inet6 static"
        echo "address ${IPV6_ADD0}/64"
        echo "gateway ${IPV6_DEF_GATEWAY0}"
      } >/etc/network/interfaces
      # Disabling Ipv6 DAD: https://www.agwa.name/blog/post/beware_the_ipv6_dad_race_condition
      # Another way is to use this sysctl -w net.ipv6.conf.eth0.dad_transmits=0 or put in /etc/sysctl for permanent
      # Why disable? Because nginx sometimes cannot start with ipv6 unless system is restarted
      if [ -f "/proc/sys/net/ipv6/conf/${NIC_INTERFACE_NAME}/accept_dad" ]; then
        {
          echo "# Disable IPv6 Duplicate Address Detection"
          echo "pre-up echo 0 > /proc/sys/net/ipv6/conf/${NIC_INTERFACE_NAME}/accept_dad"
        } >>/etc/network/interfaces
      fi
    else
      echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    # This insertion works for both centos and debian so there is no need to put OS condition
    echo "[${SCRIPT_NAME}]: Inserting name server information in /etc/resolv.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
    {
      echo "# ==============================================="
      echo "# This configuration file was generated by ${SCRIPT_NAME}"
      echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
      echo "# ==============================================="
      echo "search ${BOX_DOMAIN}"
      echo "domains ${BOX_HOSTNAME_FQDN}"
      echo "options rotate"
      echo "nameserver ${NAME_SERVER1}"
      echo "nameserver ${NAME_SERVER2}"
      echo "nameserver ${NAME_SERVER3}"
    } >/etc/resolv.conf

    echo "[${SCRIPT_NAME}]: Configuring DNS IPs in /etc/hosts ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    old_host=$(hostname --fqdn)
    if [ "${old_host}" = "" ]; then
      old_host=old.host.com
      echo "[${SCRIPT_NAME}]: old hostname was blank. This is a placeholder value ${old_host}"
    fi
    #remove any previous hostnames.
    grep -Fv "${BOX_HOSTNAME}" /etc/hosts | grep -Fv ${old_host} | grep -v '#' >/etc/hosts.tmp

    #start the file over
    {
      echo "# ==============================================="
      echo "# This configuration file was generated by ${SCRIPT_NAME}"
      echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
      echo "# ==============================================="
      echo "# Do not remove the following line, or various programs"
      echo "# that require network functionality will fail."
    } >/etc/hosts

    lh_count=$(grep -c localhost /etc/hosts.tmp)
    if [ "${lh_count}" -lt 1 ]; then
      echo -e "127.0.0.1\t\tlocalhost localhost.localdomain" >>/etc/hosts
    fi
    echo "[${SCRIPT_NAME}]: Adding IP (IPv4) and (IPv6) and entries in /etc/hosts ..." 2>&1 | tee -a "${REPORT_FILE}"
    {
      cat /etc/hosts.tmp
      echo ""
      echo "#IP information for ${BOX_HOSTNAME_FQDN}:"
      printf '%s\t%s\t%s\n' "${IPV4_ADD0}" "${BOX_HOSTNAME_FQDN}" "${BOX_HOSTNAME}"
      printf '%s\t%s\t%s\n' "${IPV6_ADD0}" "${BOX_HOSTNAME_FQDN}" "${BOX_HOSTNAME}"
    } >>/etc/hosts
    chmod 644 /etc/hosts
    # When using a VPS that use auto network manager, it will keep replacing this hosts file.
    # So, we don't want anyone to disturb this beautiful written host file by using chattr +i on this file
    # Note directadmin setup also trying to modify this /etc/hosts file during setup using its script called: /usr/local/directadmin/scripts/hostname.sh
    # It will get an error operation not permitted but do not worry because /etc/hosts is correctly configured now.
    echo "[${SCRIPT_NAME}]: Preventing /etc/hosts modification by setting chattr +i immutable" 2>&1 | tee -a "${REPORT_FILE}"
    chattr +i /etc/hosts
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_fstab() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then

    # Only do this if DISK_ENCRYPTION is set
    is_encrypted=$(lsblk | grep 'crypt')
    if [ -n "${is_encrypted}" ]; then
      echo "Found disk encryption is set: ${is_encrypted}"
      DISK_ENCRYPTION="yes"
    else
      echo "No disk encryption partition is found!"
      DISK_ENCRYPTION="no"
    fi
    if [ "${DISK_ENCRYPTION}" == "yes" ]; then
      local disk_uuid_boot
      echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
      # Boot must always be sda 1  (beginning of the drive)
      disk_uuid_boot=$(blkid -o value -s UUID "/dev/sda1")
      {
        echo "# ==============================================="
        echo "# This configuration file was generated by ${SCRIPT_NAME}"
        echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
        echo "# ==============================================="
        echo "# /etc/fstab: static file system information."
        echo "#"
        echo "# Use 'blkid' to print the universally unique identifier for a"
        echo "# device; this may be used with UUID= as a more robust way to name devices"
        echo "# that works even if disks are added and removed. See fstab(5)."
        echo "#"
        echo "# <file system> <mount point>   <type>  <options>       <dump>  <pass>"
        # Boot mount option
        printf "UUID=%s\t/boot\text4\tdefaults\t0\t2\n" "${disk_uuid_boot}"
        printf "/dev/mapper/%s-root\t/\text4\terrors=remount-ro,usrquota,grpquota,x-systemd.device-timeout=0\t0\t1\n" "${LVM_VOLUME_GROUP}"
        printf "/dev/mapper/%s-home\t/home\text4\tnosuid,x-systemd.device-timeout=0\t0\t2\n" "${LVM_VOLUME_GROUP}"
        printf "/dev/mapper/%s-tmp\t/tmp\text4\tnodev,nosuid,noexec,x-systemd.device-timeout=0\t0\t2\n" "${LVM_VOLUME_GROUP}"
        printf "/dev/mapper/%s-swap\tnone\tswap\tsw,x-systemd.device-timeout=0\t0\t0\n" "${LVM_VOLUME_GROUP}"
      } >/etc/fstab
      check_finish_reboot "${FUNCNAME[0]}"
    else
      echo "[${SCRIPT_NAME}]: [Skipped]: Warning, disk encryption is not set in maxinet.conf" 2>&1 | tee -a "${REPORT_FILE}"
      echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
    fi
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_grub() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local gr grub_hash pfile
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    if [ "${SECURE_GRUB}" == "yes" ]; then
      echo "[${SCRIPT_NAME}]: SECURE_GRUB is set" 2>&1 | tee -a "${REPORT_FILE}"
      pfile="${TEMP_PATH}/pfile.$(get_rnd_alpha 10)"
      cat <<EOF >"${pfile}"
${GRUB_PASS}
${GRUB_PASS}
EOF
      grub_hash=$(cat "${pfile}" | grub-mkpasswd-pbkdf2 | awk '/grub.pbkdf/{print$NF}')
      shred -uvz "${pfile}"
      gr=$(grep -i "password_pbkdf2" /etc/grub.d/00_header)
      if [[ -z ${gr} ]]; then
        echo "[${SCRIPT_NAME}]: Writing grub username and password in /etc/grub.d/00_header ... " 2>&1 | tee -a "${REPORT_FILE}"
        {
          echo "cat << EOF"
          echo "set superusers=\"${GRUB_UNAME}\""
          echo "password_pbkdf2 ${GRUB_UNAME} ${grub_hash}"
          echo "EOF"
        } >>/etc/grub.d/00_header
        grub-mkconfig -o /boot/grub/grub.cfg
        #sudo update-grub
      else
        echo "[${SCRIPT_NAME}]: Warning, there is already a grub password set in /etc/grub.d/00_header. It shouldn't be there. Inspect why" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    else
      echo "[${SCRIPT_NAME}]: Warning, SECURE_GRUB is not set" 2>&1 | tee -a "${REPORT_FILE}"

    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Tweaking swap for production
function configure_sysctl_swap() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Configuring disk swap information in sysctl ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    # Swap configuration
    {
      echo "vm.swappiness = 10"
      echo "vm.vfs_cache_pressure = 50"
    } >>/etc/sysctl.conf
    sysctl -p /etc/sysctl.conf
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_sysctl_kernel_fs() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Configuring kernel and file system information in sysctl ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    {
      # Disable core dumps
      # This code will ensure not to make any core dumps by setuid programs in future.
      echo "fs.suid_dumpable = 0"
      # Disable System Request debugging functionality
      echo "kernel.sysrq = 0"
      # Hide kernel pointers
      echo "kernel.kptr_restrict = 2"
    } >>/etc/sysctl.conf
    sysctl -p /etc/sysctl.conf
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_sysctl_ips() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Configuring ipv4 and ipv6 information in sysctl ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    {
      echo "# IPV4 & IPv6 configuration"
      echo "# IPV6"
      echo "net.ipv6.conf.all.disable_ipv6 = 0"
      echo "net.ipv6.conf.default.disable_ipv6 = 0"
      echo "#net.ipv6.conf.lo.disable_ipv6 = 0"
      echo "#net.ipv6.bindv6only = 1"
      echo "net.ipv6.conf.default.accept_redirects = 0"
      echo "net.ipv6.conf.all.accept_redirects = 0"
      # Disable IPv6 DAD in kernel
      echo "net.ipv6.conf.${NIC_INTERFACE_NAME}.dad_transmits = 0"
      echo "#IPV4"
      echo "net.ipv4.conf.all.accept_redirects = 0"
      echo "net.ipv4.conf.all.log_martians = 1"
      echo "net.ipv4.conf.all.send_redirects = 0"
      echo "net.ipv4.conf.default.accept_redirects = 0"
      echo "net.ipv4.conf.default.log_martians = 1"
      echo "#net.ipv6.tcp_timestamps = 0"

      echo "# Enable TCP SYN cookie protection"
      echo "net.ipv4.tcp_syncookies = 1"

      echo "# Turn off the tcp_sack"
      echo "#net.ipv4.tcp_sack = 0"

      echo "# Turn off the tcp_window_scaling"
      echo "#net.ipv4.tcp_window_scaling = 0"

      echo "### Enable this when DDOS attack occur ###"
      echo "# Decrease the time default value for tcp_fin_timeout connection"
      echo "#net.ipv4.tcp_fin_timeout = 3"
    } >>/etc/sysctl.conf
    sysctl -p /etc/sysctl.conf
    check_finish_reboot "${FUNCNAME[0]}"
    # No need to reboot. Just run sysctl -p is enough
    # echo "[${SCRIPT_NAME}]: Finished configuring network profile. You may reboot the system then re-run this script again for next setup ..." 2>&1 | tee -a "${REPORT_FILE}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# Install missing os requirement, such as sendmail
function upgrade_os() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # General OS upgrade
    if [ "${DISTRO_ID}" == "centos" ]; then
      echo "[${SCRIPT_NAME}]: Updating CentOS system ..." 2>&1 | tee -a "${REPORT_FILE}"
      sudo dnf -y update 2>&1 | tee -a "${REPORT_FILE}"
      sudo dnf -y install epel-release 2>&1 | tee -a "${REPORT_FILE}"
      # Remember now use powertools not PowerTools. This is bug found in CentOS repo 2 days ago: https://bugs.centos.org/view.php?id=17920
      dnf config-manager --set-enabled powertools 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${DISTRO_ID}" == "debian" ]; then

      # Known usability bug from Debian installer with old grub-pc
      # Fixed grub-pc appear interactive GUI when running dist-upgrade https://github.com/hashicorp/vagrant/issues/289
      # This is the Debian usability bug for grub as explained in here:
      # https://askubuntu.com/questions/23418/what-do-i-select-for-grub-install-devices-after-an-update#comment837055_23418
      # This only show when you have kernel set to GRUB 2

      echo "[${SCRIPT_NAME}]: Updating Debian system ..." 2>&1 | tee -a "${REPORT_FILE}"

      apt-get -y update
      apt-get -y dist-upgrade
      apt-get -y autoremove
      apt clean
    else
      echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    # Install other components based on installation type and distribution:
    if [ "${INSTALL_TYPE}" == "general" ]; then
      if [ "${DISTRO_ID}" == "centos" ]; then
        echo "[${SCRIPT_NAME}]: Installing system required components for CentOS General setup ..." 2>&1 | tee -a "${REPORT_FILE}"

        sudo dnf -y install sendmail tar bind-utils git curl gcc make libevent-devel zlib-devel openssl-devel pcre2-devel wget 2>&1 | tee -a "${REPORT_FILE}"
        sudo dnf -y install bc htop ncdu 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Installing perl dependencies ..." 2>&1 | tee -a "${REPORT_FILE}"
        sudo dnf -y install @perl perl-libwww-perl net-tools perl-LWP-Protocol-https 2>&1 | tee -a "${REPORT_FILE}"

      elif [ "${DISTRO_ID}" == "debian" ]; then
        echo "[${SCRIPT_NAME}]: Installing system required components for Debian General setup ..." 2>&1 | tee -a "${REPORT_FILE}"
        apt-get -y install curl 2>&1 | tee -a "${REPORT_FILE}" # Needed especially to download lynis latest version
        apt-get -y install sudo 2>&1 | tee -a "${REPORT_FILE}" # By default no sudo is installed
      else
        echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    elif [ "${INSTALL_TYPE}" == "directadmin" ]; then
      if [ "${DISTRO_ID}" == "centos" ]; then
        echo "[${SCRIPT_NAME}]: Installing system required components for CentOS Directadmin setup ..." 2>&1 | tee -a "${REPORT_FILE}"
        : # will determine (but RIP CentOS)
      elif [ "${DISTRO_ID}" == "debian" ]; then
        echo "[${SCRIPT_NAME}]: Installing system required components for Debian Directadmin setup ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Installing wget on Debian ... " 2>&1 | tee -a "${REPORT_FILE}"
        apt-get -y install wget 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Installing ipv6calc for IPv6 conversion on Debian ..." 2>&1 | tee -a "${REPORT_FILE}"
        apt-get -y install ipv6calc 2>&1 | tee -a "${REPORT_FILE}"
        apt-get -y install curl 2>&1 | tee -a "${REPORT_FILE}" # Needed especially to download lynis latest version
        apt-get -y install sudo 2>&1 | tee -a "${REPORT_FILE}" # By default no sudo is installed
      else
        echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi

    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Install CSF Firewall
configure_csf() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    exec_time start "${FUNCNAME[0]}"
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # If DA INSTALL TYPE IS auto don't run this because it will install CSF automatically (as stated in documentation)
    local gc ipv4_tcp_in ipv4_tcp_out ipv6_tcp_in ipv6_tcp_out all_allow_ports kernel_numericver
    local bl_ip_html_source bl_ip_html_dest gc retval
    if [ "${DA_INSTALL_TYPE}" != "auto" ]; then
      if ! command -v csf &>/dev/null; then
        echo "[${SCRIPT_NAME}]: No CSF binary is found (CSF is not installed)" 2>&1 | tee -a "${REPORT_FILE}"
        sleep 2
        if [ "${INSTALL_TYPE}" == "general" ]; then
          echo "[${SCRIPT_NAME}]: Script installation type is set to 'general'. Installing and Setting up CSF for ${BOX_HOSTNAME_FQDN} ..." 2>&1 | tee -a "${REPORT_FILE}"
          sleep 2
          echo "[${SCRIPT_NAME}]: Removing existing CSF if exist using built-in script ..." 2>&1 | tee -a "${REPORT_FILE}"
          sh /etc/csf/uninstall.sh
          echo "[${SCRIPT_NAME}]: Removing previous downloaded file ..." 2>&1 | tee -a "${REPORT_FILE}"
          rm -fv "${INST_TEMP_DIR}/csf.tgz"
          cd_to_path "${INST_TEMP_DIR}"
          echo "[${SCRIPT_NAME}]: Downloading and extracting CSF file in ${INST_TEMP_DIR} ..." 2>&1 | tee -a "${REPORT_FILE}"
          curl -SL https://download.configserver.com/csf.tgz | tar -xzf - 2>&1 | tee -a "${REPORT_FILE}"
          # Now after extracted we have csf folder, let's enter to this path
          cd_to_path "./csf"

          echo "[${SCRIPT_NAME}]: Testing CSF pre-installation requirement ..." 2>&1 | tee -a "${REPORT_FILE}"
          gc=$(./csftest.pl | tail -n 1 | grep -c 'RESULT: csf should function on this server')
          if [ "${gc}" != "1" ]; then
            ./csftest.pl
            echo ""
            echo ""
            echo "CSF test did not pass. Will not continue. Solve the issue and rerun this script again"
            _exit 2
          else
            echo "[OK]: CSF test passed!"
          fi

          echo "[${SCRIPT_NAME}]: Now installing CSF ..." 2>&1 | tee -a "${REPORT_FILE}"
          chmod +x install.sh
          sh "install.sh"
          # When finished, we go back to original path

          # CSF recommends to disable and remove APF+BFD (if exist). Check APF:
          echo "[${SCRIPT_NAME}]: Checking and removing existing APF+BFD (recommended) ..." 2>&1 | tee -a "${REPORT_FILE}"
          if command -v apf &>/dev/null; then
            echo "[${SCRIPT_NAME}]: Warning, Found apf command. Removing apf bfd with remove_apf_bfd.sh ..." 2>&1 | tee -a "${REPORT_FILE}"
            #sh /usr/local/csf/bin/disable_apf_bfd.sh #Script disabled because not found in the csf bin folder
            sh /usr/local/csf/bin/remove_apf_bfd.sh
          else
            echo "[${SCRIPT_NAME}]: [Skipped]: OK, No existing APF+BFD installation to remove" 2>&1 | tee -a "${REPORT_FILE}"
          fi
        elif [ "${INSTALL_TYPE}" == "directadmin" ]; then
          echo "[${SCRIPT_NAME}]: Script installation type is set to DIRECTADMIN. Installing CSF on ${BOX_HOSTNAME_FQDN} using DA script by Poralix..." 2>&1 | tee -a "${REPORT_FILE}"
          sleep 2
          #wget http://files.directadmin.com/services/all/csf/csf_install.sh 2>&1 | tee -a "${REPORT_FILE}"
          cd_to_path "${INST_TEMP_DIR}"
          cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/install_scripts/csf_install.sh" "${INST_TEMP_DIR}/csf_install.sh"
          chmod +x csf_install.sh
          /bin/sh ./csf_install.sh 2>&1 | tee -a "${REPORT_FILE}"
        fi
      else
        echo "[${SCRIPT_NAME}]: Found CSF binary (CSF already installed). Continuing setup ..." 2>&1 | tee -a "${REPORT_FILE}"
      fi
      # After install CSF definitely we got this
      if [ -f /etc/csf/csf.conf ]; then
        echo "[${SCRIPT_NAME}]: Now configuring CSF config at /etc/csf/csf.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
        sleep 1
        # This also must have comma,
        if [ -n "${CSF_EXTRA_ALLOW_PORTS}" ]; then
          all_allow_ports=",${DA_PORT},${CSF_EXTRA_ALLOW_PORTS}"
        else
          all_allow_ports=",${DA_PORT}"
        fi
        echo "DEBUG: all_allow_ports=${all_allow_ports}"
        grep -wq "^TCP_IN = .*${all_allow_ports}" /etc/csf/csf.conf
        if [ $? = 1 ]; then
          echo "[${SCRIPT_NAME}]: Adding extra port(s) ${all_allow_ports} in CSF firewall in CSF for TCP_IN ..." 2>&1 | tee -a "${REPORT_FILE}"
          ipv4_tcp_in=$(grep -i '^TCP_IN' /etc/csf/csf.conf | tr -d '"' | cut -d "=" -f2 | sed 's/^ *//g' | awk -v ep="${all_allow_ports}" '{ print $1 ep }')
          sed -i "s/TCP_IN = .*/TCP_IN = \"${ipv4_tcp_in}\"/" /etc/csf/csf.conf
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: Extra port(s) ${all_allow_ports} has already added in CSF for TCP_IN before" 2>&1 | tee -a "${REPORT_FILE}"
        fi
        grep -wq "^TCP_OUT = .*${all_allow_ports}" /etc/csf/csf.conf
        if [ $? = 1 ]; then
          echo "[${SCRIPT_NAME}]: Adding extra port(s) ${all_allow_ports} in CSF firewall in CSF for TCP_OUT ..." 2>&1 | tee -a "${REPORT_FILE}"
          ipv4_tcp_out=$(grep -i '^TCP_OUT' /etc/csf/csf.conf | tr -d '"' | cut -d "=" -f2 | sed 's/^ *//g' | awk -v ep="${all_allow_ports}" '{ print $1 ep }')
          sed -i "s/TCP_OUT = .*/TCP_OUT = \"${ipv4_tcp_out}\"/" /etc/csf/csf.conf
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: Extra port(s) ${all_allow_ports} has already added in CSF for TCP_OUT before" 2>&1 | tee -a "${REPORT_FILE}"
        fi
        grep -wq "^TCP6_IN = .*${all_allow_ports}" /etc/csf/csf.conf
        if [ $? = 1 ]; then
          echo "[${SCRIPT_NAME}]: Adding extra port(s) ${all_allow_ports} in CSF firewall in CSF for TCP6_IN ..." 2>&1 | tee -a "${REPORT_FILE}"
          ipv6_tcp_in=$(grep -i '^TCP6_IN' /etc/csf/csf.conf | tr -d '"' | cut -d "=" -f2 | sed 's/^ *//g' | awk -v ep="${all_allow_ports}" '{ print $1 ep }')
          sed -i "s/TCP6_IN = .*/TCP6_IN = \"${ipv6_tcp_in}\"/" /etc/csf/csf.conf
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: Extra port(s) ${all_allow_ports} has already added in CSF for TCP6_IN before" 2>&1 | tee -a "${REPORT_FILE}"
        fi
        grep -wq "^TCP6_OUT = .*${all_allow_ports}" /etc/csf/csf.conf
        if [ $? = 1 ]; then
          echo "[${SCRIPT_NAME}]: Adding extra port(s) ${all_allow_ports} in CSF firewall in CSF for TCP6_OUT ..." 2>&1 | tee -a "${REPORT_FILE}"
          ipv6_tcp_out=$(grep -i '^TCP6_OUT' /etc/csf/csf.conf | tr -d '"' | cut -d "=" -f2 | sed 's/^ *//g' | awk -v ep="${all_allow_ports}" '{ print $1 ep }')
          sed -i "s/TCP6_OUT = .*/TCP6_OUT = \"${ipv6_tcp_out}\"/" /etc/csf/csf.conf
        else
          echo "[${SCRIPT_NAME}]: [Skipped]: Extra port(s) ${all_allow_ports} has already added in CSF for TCP6_OUT before" 2>&1 | tee -a "${REPORT_FILE}"
        fi
        # Disable CSF testing mode
        echo "[${SCRIPT_NAME}]: Disabling CSF testing mode ..." 2>&1 | tee -a "${REPORT_FILE}"
        sed -i 's/TESTING = "1"/TESTING = "0"/g' /etc/csf/csf.conf
        #echo "[${SCRIPT_NAME}]: Setting CONNLIMIT and PORTFLOOD best setting ..." 2>&1 | tee -a "${REPORT_FILE}"
        #sed -i 's/CONNLIMIT = ""/CONNLIMIT = "22;5,80;20,443;20"/g' /etc/csf/csf.conf
        #sed -i 's/PORTFLOOD = ""/PORTFLOOD = "22;tcp;5;300,80;tcp;20;5,443;tcp;20;5"/g' /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Enabling CSF email alert from 0 to 1 ..." 2>&1 | tee -a "${REPORT_FILE}"
        sed -i 's/LF_SSH_EMAIL_ALERT = "0"/LF_SSH_EMAIL_ALERT = "1"/g' /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Setting CSF email alert to ${ADMIN_EMAIL} ..." 2>&1 | tee -a "${REPORT_FILE}"
        sed -i "s/LF_ALERT_TO = .*/LF_ALERT_TO = '\"${ADMIN_EMAIL}\"'/" /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Enabling CSF SMTP_BLOCK ..." 2>&1 | tee -a "${REPORT_FILE}"
        sed -i 's/SMTP_BLOCK = "0"/SMTP_BLOCK = "1"/g' /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Setting CSF RESTRICT_SYSLOG from 0 to 3 to avoid warning ..." 2>&1 | tee -a "${REPORT_FILE}"
        sed -i 's/RESTRICT_SYSLOG = "0"/RESTRICT_SYSLOG = "3"/g' /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Setting CSF SYSLOG_CHECK to ${CSF_SYSLOG_CHECK} ..." 2>&1 | tee -a "${REPORT_FILE}"
        sed -i "s/SYSLOG_CHECK = .*/SYSLOG_CHECK = '\"${CSF_SYSLOG_CHECK}\"'/" /etc/csf/csf.conf
        sleep 1
        echo "[${SCRIPT_NAME}]: Testing CSF after installation ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        perl /usr/local/csf/bin/csftest.pl 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Setting CSF PT_LOAD_ACTION ..." 2>&1 | tee -a "${REPORT_FILE}"
        sed -i "s/^PT_LOAD_ACTION = .*/PT_LOAD_ACTION = \"\/usr\/local\/maxicode\/maxicsf\/csfload\"/" /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Setting CSF to send security alert to ${ADMIN_EMAIL} ..." 2>&1 | tee -a "${REPORT_FILE}"
        csf -m "${ADMIN_EMAIL}" 2>&1 | tee -a "${REPORT_FILE}"

        echo "[${SCRIPT_NAME}]: Enabling IPSET large IP for CSF ..." 2>&1 | tee -a "${REPORT_FILE}"
        # inspired by: https://community.centminmod.com/threads/what-should-be-the-right-value-for-lf_ipset-on-csf-config.2045/
        kernel_numericver=$(uname -r | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }')
        # shellcheck disable=SC2143
        if [[ ! -f /proc/user_beancounters ]] && [[ "$(uname -r | grep linode)" || "$(find "/lib/modules/$(uname -r)" -name 'ipset')" ]] || [[ -f /proc/user_beancounters && "${kernel_numericver}" -ge '3000000000' ]]; then
          if [[ ! -f /usr/sbin/ipset ]]; then
            if [ "${DISTRO_ID}" == "centos" ]; then
              yum -q -y install ipset ipset-devel
            elif [ "${DISTRO_ID}" == "debian" ]; then
              sudo apt-get install ipset -y
            fi
            sed -i 's/LF_IPSET = \"0\"/LF_IPSET = \"1\"/' /etc/csf/csf.conf
          elif [[ -f /usr/sbin/ipset ]]; then
            sed -i 's/LF_IPSET = \"0\"/LF_IPSET = \"1\"/' /etc/csf/csf.conf
          fi
        fi
        # Increase block limit from 200 to 2500 (specified in config)
        echo "[${SCRIPT_NAME}]: Setting CSF DENY_IP_LIMIT to ${CSF_DENY_IP_LIMIT} ..." 2>&1 | tee -a "${REPORT_FILE}"
        sed -i "s/DENY_IP_LIMIT = .*/DENY_IP_LIMIT = '\"${CSF_DENY_IP_LIMIT}\"'/" /etc/csf/csf.conf
        # CSF Messenger: TODO haven't tested this messenger
        echo "[${SCRIPT_NAME}]: Enabling CSF Messenger ..." 2>&1 | tee -a "${REPORT_FILE}"
        sleep 1
        sed -i "s/MESSENGER = \"0\"/MESSENGER = \"1\"/" /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Inserting CSF RECAPTCHA_SITEKEY ..." 2>&1 | tee -a "${REPORT_FILE}"
        sleep 1
        sed -i "s/RECAPTCHA_SITEKEY = \"\"/RECAPTCHA_SITEKEY = \"${GOOGLE_RECAPTCHA_SITE_V2}\"/" /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Inserting CSF RECAPTCHA_SECRET ..." 2>&1 | tee -a "${REPORT_FILE}"
        sleep 1
        sed -i "s/RECAPTCHA_SECRET = \"\"/RECAPTCHA_SECRET = \"${GOOGLE_RECAPTCHA_SECRET_V2}\"/" /etc/csf/csf.conf
        echo "[${SCRIPT_NAME}]: Adding csf user in the system ..." 2>&1 | tee -a "${REPORT_FILE}"
        useradd csf -s /bin/false 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Setting up CSF firewall blacklist template ..." 2>&1 | tee -a "${REPORT_FILE}"
        mkdir -p /usr/local/directadmin/data/templates/custom
        bl_ip_html_source="${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/data/templates/custom/blacklisted_ip.html"
        bl_ip_html_dest="/usr/local/directadmin/data/templates/custom/blacklisted_ip.html"
        cp -r "${bl_ip_html_source}" "${bl_ip_html_dest}"
        chmod 644 "${bl_ip_html_dest}"
        chown diradmin:diradmin "${bl_ip_html_dest}"
        echo "[${SCRIPT_NAME}]: Starting CSF and LFD for the first time ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Before we start it up, please confirm that your sshd port is listed in this output:" 2>&1 | tee -a "${REPORT_FILE}"
        echo "-----------------" 2>&1 | tee -a "${REPORT_FILE}"
        grep ^TCP_IN /etc/csf/csf.conf 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        echo "If you do NOT see the port listed, press ctrl-c to immediately abort the script (you can add port missing port in maxinet.conf), then re-run this setup" 2>&1 | tee -a "${REPORT_FILE}"
        echo "If you DO, the port correctly added, press enter to continue" 2>&1 | tee -a "${REPORT_FILE}"
        _pause 60
        if [ "${DISTRO_ID}" == "centos" ]; then
          echo "[${SCRIPT_NAME}]: Disabling built-in firewall (firewalld) in CentOS ..." 2>&1 | tee -a "${REPORT_FILE}"
          systemctl disable firewalld 2>&1 | tee -a "${REPORT_FILE}"
          systemctl stop firewalld 2>&1 | tee -a "${REPORT_FILE}"
        elif [ "${DISTRO_ID}" == "debian" ]; then
          echo "[${SCRIPT_NAME}]: Disabling and removing firewall (ufw) in Debian ..." 2>&1 | tee -a "${REPORT_FILE}"
          sudo ufw disable 2>&1 | tee -a "${REPORT_FILE}"
          sudo apt-get -y remove ufw
          sudo apt-get -y purge ufw
        else
          echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
          _exit 147
        fi
        echo "-----------------" 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Starting CSF ..." 2>&1 | tee -a "${REPORT_FILE}"
        systemctl start csf 2>&1 | tee -a "${REPORT_FILE}"
        # Check and fix csf process error here automatically
        check_fix_service "csf"
        # By default behaviour, LFD should start automatically when we run csf start
        # service lfd start 2>&1 | tee -a "${REPORT_FILE}"
        check_fix_service "lfd"
        # This is a temporary allowed IP during setup which won't be blocked by firewall.
        echo "[${SCRIPT_NAME}]: Temporarily allow IP ${TEMP_ALLOW_IP} in /etc/etc/csf/csf.allow during setup in CSF" 2>&1 | tee -a "${REPORT_FILE}"
        csf -a "${TEMP_ALLOW_IP}" "Added by ${SCRIPT_NAME} for ${BOX_HOSTNAME_FQDN} as temporary allowed IP during setup"
        # After that, the next step is requesting SSL and seems like the box need to restart
        # The reason it needs to restart here because if I don't restart at this point, the front page is not accessible (seems like port 80 is blocked)
        # If I don't restart at this point, I will not be able to renew cert (letsencrypt will produce error like firewall problem but it's not).
        # This is related to Ipv6 DAD. Look at function link_da_ipv6() for more information
        # DAD disable is not working. Still need to restart system. Just restart it and resume later.
        #echo "[${SCRIPT_NAME}]: Creating reboot flag to restart system after installing CSF ..." 2>&1 | tee -a "${REPORT_FILE}"
        #cat /dev/null >/var/run/reboot-required
        #echo "[${SCRIPT_NAME}]: Warning, system will reboot and you can run this script again to continue setup" 2>&1 | tee -a "${REPORT_FILE}"
        #_pause
      else
        echo "[${SCRIPT_NAME}]: This is the weirdest error. Where the hell is /etc/csf/csf.conf? ..." 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    # System will reboot automatically from above flag
    else
      echo "[${SCRIPT_NAME}]: [Skipped]: Directadmin installation type is set to AUTO which already include CSF installation" 2>&1 | tee -a "${REPORT_FILE}"
      # TODO (Testing this): check how DA install using AUTO mode, maybe we need to just use config from here after CSF has installed. Does it auto enable CSF? Will find out
    fi
    check_finish_reboot "${FUNCNAME[0]}"
    exec_time end "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  # TIPS. CSF can be removed with this command:
  #sh /etc/csf/uninstall.sh
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function install_da_pre() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    exec_time start "${FUNCNAME[0]}"
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    da_latest_version=$(curl -s https://www.directadmin.com/version.php | grep -Eo "[0-9]+\.[0-9]+")
    echo "[${SCRIPT_NAME}]: The latest version of Directadmin is ${da_latest_version}" 2>&1 | tee -a "${REPORT_FILE}"
    _pause 30
    echo "[${SCRIPT_NAME}]: Installing required components to execute DA pre-install ... " 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Setting up DA to run pre-install command ... " 2>&1 | tee -a "${REPORT_FILE}"
    echo 2.0 >/root/.custombuild
    # This will make sure preinstall command is going to be executed when starting DA installation
    echo 1 >/root/.preinstall
    # Here I can set options.conf and php_extensions.conf to custom install.
    mkdir -p /usr/local/directadmin/custombuild
    if [ "${DA_INSTALL_TYPE}" == "custom" ]; then
      echo "[${SCRIPT_NAME}]: [Notice]: Directadmin installation type is custom. Setting up custom options.conf and php_extensions.conf ... " 2>&1 | tee -a "${REPORT_FILE}"
      if [ "${DISTRO_ID}" == "centos" ]; then
        :
      elif [ "${DISTRO_ID}" == "debian" ]; then
        # This one needed if clamav is included
        # https://forum.directadmin.com/threads/configure-error-libcurl-not-found-libcurl-e-g-libcurl-devel-is-required-in-order-to-build-freshclam-and-clamsubmit.62869/
        # No need to install libcurl now, it's working without installing libcurl. I have updated the post.
        :
        #echo "[${SCRIPT_NAME}]: Installing Debian libcurl ..." 2>&1 | tee -a "${REPORT_FILE}"
        #sudo apt-get -y install libcurl4-openssl-dev 2>&1 | tee -a "${REPORT_FILE}"
      else
        echo "[${SCRIPT_NAME}]: Error, unknown value for distribution ID ${DISTRO_ID}" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
      if [ -d "${DATA_PATH}/maxinet" ]; then
        echo "[${SCRIPT_NAME}]: Copying Custombuild options.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
        cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/custombuild/options.conf" "/usr/local/directadmin/custombuild/options.conf"
        sed -i "s|^redirect_host=.*|redirect_host=${BOX_HOSTNAME_FQDN}|" /usr/local/directadmin/custombuild/options.conf
        sed -i "s|^email=.*|email=${ADMIN_EMAIL}|" /usr/local/directadmin/custombuild/options.conf
        sed -i "s|^php_timezone=.*|php_timezone=${BOX_TIMEZONE}|" /usr/local/directadmin/custombuild/options.conf
        echo "[${SCRIPT_NAME}]: Copying Custombuild php_extensions.conf..." 2>&1 | tee -a "${REPORT_FILE}"
        cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/custombuild/php_extensions.conf" /usr/local/directadmin/custombuild/php_extensions.conf
      else
        echo "[${SCRIPT_NAME}]: Error, directory not exist. Check maxinet clone folder." 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147 #Just exit because this is weird error if this folder is missing
      fi
    elif [ "${DA_INSTALL_TYPE}" == "ori" ]; then
      echo "[${SCRIPT_NAME}]: [Notice]: Directadmin installation type is set to ori. Directadmin will install using default options" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${DA_INSTALL_TYPE}" == "interactive" ]; then
      echo "[${SCRIPT_NAME}]: [Notice]: Directadmin installation type is set to interactive. Directadmin will install with some questions" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${DA_INSTALL_TYPE}" == "auto" ]; then
      echo "[${SCRIPT_NAME}]: [Notice]: Directadmin installation type is set to auto. Directadmin will install all default options including CSF" 2>&1 | tee -a "${REPORT_FILE}"
    else
      echo "[${SCRIPT_NAME}]: Error, invalid installation type set for Directadmin in config file." 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    check_finish_reboot "${FUNCNAME[0]}"
    exec_time end "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi

}

function install_da() {
  # After da is installed, we still need to open the port for default firewall. To achieve this, we can run install_da_post() function
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    exec_time start "${FUNCNAME[0]}"
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Downloading Directadmin setup script ... " 2>&1 | tee -a "${REPORT_FILE}"
    cd_to_path "${INST_TEMP_DIR}"
    wget -O setup.sh http://www.directadmin.com/setup.sh
    chmod 755 setup.sh
    echo "[${SCRIPT_NAME}]: Setup will install Directadmin within 30 seconds. It would take a long time, so please be patient" 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: If you don't want to install Directadmin now, press (ctrl+C) to exit and then you can re-run this script to resume at this stage" 2>&1 | tee -a "${REPORT_FILE}"
    _pause 30
    echo "[${SCRIPT_NAME}]: Installing Directadmin on ${BOX_HOSTNAME_FQDN} using ${DA_INSTALL_TYPE} mode ... " 2>&1 | tee -a "${REPORT_FILE}"
    if [[ "${DA_INSTALL_TYPE}" == "custom" || "${DA_INSTALL_TYPE}" == "ori" ]]; then
      # custom and ori depends on the options.conf (this won't ask question)
      ./setup.sh "${DA_CLIENT_ID}" "${DA_LICENSE_ID}" "${BOX_HOSTNAME_FQDN}" "${NIC_INTERFACE_NAME}" "${IPV4_ADD0}" 2>&1 | tee -a "${REPORT_FILE}"
    elif [[ "${DA_INSTALL_TYPE}" == "interactive" ]]; then
      # this will ask question
      bash <(curl -Ss https://www.directadmin.com/setup.sh)
    elif [[ "${DA_INSTALL_TYPE}" == "auto" ]]; then
      # This will not ask question and everything will be installed as default including CSF
      bash <(curl -Ss https://www.directadmin.com/setup.sh) auto
    fi
    check_finish_reboot "${FUNCNAME[0]}"
    exec_time end "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi

}
# This function adds ipv6 IP in DA file via API or manually (if API failed to modify the IP file)
# This function does not have exit function
function add_da_ipv6_ip() {
  # Nice info about this: https://forum.directadmin.com/threads/how-to-add-ip-to-server-using-api.37227/
  local ipv6_uncompress_add grep_result ipv6_da_file
  ipv6_uncompress_add=$(ipv6calc --addr2uncompaddr "${IPV6_ADD0}")
  ipv6_da_file="/usr/local/directadmin/data/admin/ips/${ipv6_uncompress_add}"
  # 2 ways: a) Using API or b) Manually create ipv6 file
  #a) Using API
  echo "[${SCRIPT_NAME}]: Adding ipv6 file config using the API method ..." 2>&1 | tee -a "${REPORT_FILE}"
  sleep 1
  da_api_admin "add-ip" "${ipv6_uncompress_add}" "/64"
  #sleep 2
  #b) Manually create ipv6 file (alternative way) if the above method API doesn't produce the IP file (just in case)
  if [ ! -f "${ipv6_da_file}" ]; then
    # Normally API will not fail, but just in case if ipv6 file is still not created,
    # we can use this unofficial method created by me here:
    # https://forum.directadmin.com/threads/how-to-add-ip6-address-in-da-via-terminal-not-through-gui.62752/
    echo "[${SCRIPT_NAME}]: Creating ipv6 file config using manual file creation (alternative method if API failed) ..." 2>&1 | tee -a "${REPORT_FILE}"
    #_exit 147
    touch "${ipv6_da_file}"
    {
      echo "gateway="
      echo "global=no"
      echo "linked_ips="
      echo "netmask=/64"
      echo "ns="
      echo "reseller="
      echo "status=free"
      echo "value="
    } >"/usr/local/directadmin/data/admin/ips/${ipv6_uncompress_add}"
    chmod 600 "/usr/local/directadmin/data/admin/ips/${ipv6_uncompress_add}"
    chown diradmin:diradmin "/usr/local/directadmin/data/admin/ips/${ipv6_uncompress_add}"
    grep_result=$(grep -c "${ipv6_uncompress_add}" /usr/local/directadmin/data/admin/ip.list)
    if [ "${grep_result}" = 0 ]; then
      echo "${ipv6_uncompress_add}" >>/usr/local/directadmin/data/admin/ip.list
    fi
    echo "[${SCRIPT_NAME}]: Rebuilding httpd config files for new IPv6 and linked IPs..." 2>&1 | tee -a "${REPORT_FILE}"
    /usr/local/directadmin/custombuild/build rewrite_confs
  fi
}

function link_da_ipv6() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    exec_time start "${FUNCNAME[0]}"
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_ipv6_adds base_da_ipv6 ipv6_uncompress_add linked_ips
    echo "[${SCRIPT_NAME}]: Checking Directadmin IPv6 configuration file ..." 2>&1 | tee -a "${REPORT_FILE}"
    da_ipv6_adds=$(ls /usr/local/directadmin/data/admin/ips/*:* 2>/dev/null)
    #apt-get -y install ipv6calc 2>&1 | tee -a "${REPORT_FILE}"
    ipv6_uncompress_add=$(ipv6calc --addr2uncompaddr "${IPV6_ADD0}")
    # DA IP file use this form 1234:1234:0:0:1234:1234 so we need to convert into this form using ipv6calc
    if [[ -n "${da_ipv6_adds}" && "${AUTO_LINK_DA_IP}" == "yes" ]]; then
      # Change this to for loop instead of ls (best practice mentioned here: https://github.com/koalaman/shellcheck/wiki/SC2010)
      for da_ipv6 in $(echo "${da_ipv6_adds}" | tr ' ' '\n'); do
        #echo $(basename $da_ipv6)
        base_da_ipv6=$(basename "${da_ipv6}")
        if [[ "${base_da_ipv6}" == "${ipv6_uncompress_add}" ]]; then
          echo "[${SCRIPT_NAME}]: IP address ${IPV6_ADD0} is exist in [${da_ipv6}]" 2>&1 | tee -a "${REPORT_FILE}"
          #source "${da_ipv6}"
          linked_ips=$(sed -n 's/^linked_ips=//p' "${da_ipv6}")
          if [[ "${linked_ips}" == "" || -z "${linked_ips}" ]]; then
            echo "IPv6 linked_ip is empty: ${linked_ips}" 2>&1 | tee -a "${REPORT_FILE}"
            sleep 1
            echo "[${SCRIPT_NAME}]: Linking IP address ${base_da_ipv6} with IP address ${IPV4_ADD0} using DA task.queue ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "action=linked_ips&ip_action=add&ip=${base_da_ipv6}&ip_to_link=${IPV4_ADD0}&apache=yes&dns=yes&apply=yes" >>/usr/local/directadmin/data/task.queue
            /usr/local/directadmin/dataskq d2000
            sleep 2
            echo "[${SCRIPT_NAME}]: Linking IP address ${IPV4_ADD0} with IP address ${base_da_ipv6} using DA task.queue ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "action=linked_ips&ip_action=add&ip=${IPV4_ADD0}&ip_to_link=${base_da_ipv6}&apache=yes&dns=yes&apply=yes" >>/usr/local/directadmin/data/task.queue
            /usr/local/directadmin/dataskq d2000
            sleep 2
            # Normally DA task.queue completes in 1 minute but sometimes it left than 10 seconds, so we reduce the check in seconds
            echo "[${SCRIPT_NAME}]: Linking is set to task.queue. Let's wait for the linking to complete in 10 seconds ..." 2>&1 | tee -a "${REPORT_FILE}"
            sleep 10
            # Recheck by calling again link_da_ipv6 if still not proceed by task.queue, then sleep 10 seconds .. again and again until success
            link_da_ipv6
          else
            echo "Found IPv6 linked_ips with value: ${linked_ips}" 2>&1 | tee -a "${REPORT_FILE}"
            sleep 1
            # This is when success, we create that executed flag file and break the loop.
            echo "[${SCRIPT_NAME}]: Success, found IP linking entry for IPv6. Continuing setup ..." 2>&1 | tee -a "${REPORT_FILE}"
            check_finish_reboot "${FUNCNAME[0]}"
            break # Good idea to break we only need first match. no reason to loop again.
          fi
        else
          if [ "${AUTO_ADD_IPV6_ENTRY}" == "yes" ]; then
            echo "[${SCRIPT_NAME}]: Warning, no IPv6 matched with ${IPV6_ADD0}. AUTO_ADD_IPV6_ENTRY is set to yes. Automatically adding DA IPv6 config file ..." 2>&1 | tee -a "${REPORT_FILE}"
            sleep 2
            add_da_ipv6_ip
            sleep 10
            link_da_ipv6
          else
            # This might not be executed but just in case if something goes wrong.
            echo "[${SCRIPT_NAME}]: Warning, no IPv6 matched with ${IPV6_ADD0}. Please manually enter IPv6 from GUI (full form) then run this script again" 2>&1 | tee -a "${REPORT_FILE}"
            _exit 147
          fi
        fi
      done
    else
      if [ "${AUTO_ADD_IPV6_ENTRY}" == "yes" ]; then
        echo "[${SCRIPT_NAME}]: Warning, IPv6 has not been setup through Directadmin. AUTO_ADD_IPV6_ENTRY is set to yes. Automatically adding DA IPv6 config file ..." 2>&1 | tee -a "${REPORT_FILE}"
        sleep 2
        add_da_ipv6_ip
        link_da_ipv6
      else
        echo "[${SCRIPT_NAME}]: Warning, IPv6 has not been setup through Directadmin. Please manually enter IPv6 from GUI (full form) then run this script again" 2>&1 | tee -a "${REPORT_FILE}"
        sleep 5
        # Enable the DA port in firewall only when pressing enter (good confirmation from user)
        read -r -s -n 1 -p "[${SCRIPT_NAME}]: Press any key to start adding TCP port ${DA_PORT}/tcp in ufw ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo ""
        echo "[${SCRIPT_NAME}]: Allowing TCP port ${DA_PORT}/tcp for accessing DA admin page ..." 2>&1 | tee -a "${REPORT_FILE}"
        sudo ufw allow "${DA_PORT}/tcp" 2>&1 | tee -a "${REPORT_FILE}"
        # Need to restart DA because we did change port from 2222 to new port before calling this function
        restart_da
        echo "[${SCRIPT_NAME}]: Use the following login information to enter into DA admin page and add IPv6. When done, re-run this script again:". 2>&1 | tee -a "${REPORT_FILE}"
        echo ""
        echo "=============="
        echo "Directadmin now can be accessed through http://${IPV4_ADD0}:${DA_PORT}" 2>&1 | tee -a "${REPORT_FILE}"
        awk '{ print }' /usr/local/directadmin/scripts/setup.txt 2>&1 | tee -a "${REPORT_FILE}"
        echo "=============="
        echo ""
        sleep 5
        _exit 147
      fi
    fi
    exec_time end "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
function rebuild_da_package() {
  # Here I can rebuild any missing or change package in DA
  # This to rebuild DA package that cause error like nginx_apache wont start for new install (bug)
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    exec_time start "${FUNCNAME[0]}"
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_sql_type da_sql_version
    # Need to rebuild nginx_apache because it cannot be started after installation due to modsecurity directive. See this:
    # https://forum.directadmin.com/threads/nginx-and-apache-nginix-wont-start-due-to-mod_security.61427/
    cd_to_path "/usr/local/directadmin/custombuild"
    echo "[${SCRIPT_NAME}]: Rebuilding DA packages to fix some issues ..."

    ./build update
    # ClamAV and exim rebuild
    echo "[${SCRIPT_NAME}]: Rebuilding ClamAV and exim ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 2
    ./build set clamav yes 2>&1 | tee -a "${REPORT_FILE}"
    ./build set clamav_exim yes 2>&1 | tee -a "${REPORT_FILE}"
    ./build set exim yes 2>&1 | tee -a "${REPORT_FILE}"
    ./build set eximconf yes 2>&1 | tee -a "${REPORT_FILE}"
    ./build set eximconf_release 4.5 2>&1 | tee -a "${REPORT_FILE}"
    ./build clamav 2>&1 | tee -a "${REPORT_FILE}"
    ./build exim 2>&1 | tee -a "${REPORT_FILE}"
    ./build exim_conf 2>&1 | tee -a "${REPORT_FILE}"
    # Mod security rebuild
    echo "[${SCRIPT_NAME}]: Rebuilding modsecurity + ${DA_MODSECURITY_RULESET} ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 2
    ./build set modsecurity yes 2>&1 | tee -a "${REPORT_FILE}"
    ./build set modsecurity_ruleset "${DA_MODSECURITY_RULESET}" 2>&1 | tee -a "${REPORT_FILE}"
    ./build modsecurity 2>&1 | tee -a "${REPORT_FILE}"
    ./build modsecurity_rules 2>&1 | tee -a "${REPORT_FILE}"
    # Web server setting rebuild
    echo "[${SCRIPT_NAME}]: Rebuilding ${CB_WEB_SERVER_SOFTWARE} web server ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 2
    ./build set webserver "${CB_WEB_SERVER_SOFTWARE}" 2>&1 | tee -a "${REPORT_FILE}"
    ./build "${CB_WEB_SERVER_SOFTWARE}" 2>&1 | tee -a "${REPORT_FILE}"
    ./build rewrite_confs 2>&1 | tee -a "${REPORT_FILE}"

    da_sql_type=$(echo "${CB_MYSQL_INS}" | awk -F'-' '{ print $1 }')
    da_sql_version=$(echo "${CB_MYSQL_INS}" | awk -F'-' '{ print $2 }')

    echo "[${SCRIPT_NAME}]: Rebuilding ${da_sql_type} web server to version ${da_sql_version} ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 2
    ./build set "${da_sql_type}" "${da_sql_version}"
    ./build set mysql_inst "${da_sql_type}"
    ./build set mysql_backup yes
    ./build "${da_sql_type}"

    check_finish_reboot "${FUNCNAME[0]}"
    exec_time end "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
function install_da_post() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    exec_time start "${FUNCNAME[0]}"
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Running DA post installation function ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    # Need this before changing or adding directadmin username
    echo "[${SCRIPT_NAME}]: Setting Directadmin max username to ${DA_MAX_UNAME_LENGTH} ..." 2>&1 | tee -a "${REPORT_FILE}"
    /usr/local/directadmin/directadmin set max_username_length "${DA_MAX_UNAME_LENGTH}"
    # Need to enable ipv6 after install by default DA don't do anything about ipv6
    echo "[${SCRIPT_NAME}]: Enabling ipv6 in directadmin.conf config ..." 2>&1 | tee -a "${REPORT_FILE}"
    /usr/local/directadmin/directadmin set ipv6 1
    sleep 1
    # DA port should be secure don't use 2222 unless you have reason
    echo "[${SCRIPT_NAME}]: Changing DA admin port from 2222 to ${DA_PORT}" 2>&1 | tee -a "${REPORT_FILE}"
    /usr/local/directadmin/directadmin set port "${DA_PORT}"
    sleep 1
    echo "[${SCRIPT_NAME}]: Changing DA login page redirection port from 2222 to ${DA_PORT}" 2>&1 | tee -a "${REPORT_FILE}"
    {
      echo "<?php"
      echo "header(\"Location: http://\".\$_SERVER['HTTP_HOST'].\":${DA_PORT}\");"
      echo "?>"
    } >/var/www/html/redirect.php
    sleep 1
    if [ "${DISTRO_ID}" == "centos" ]; then
      echo "[${SCRIPT_NAME}]: Adding DA new port ${DA_PORT}/tcp to firewalld ..." 2>&1 | tee -a "${REPORT_FILE}"
      sudo firewall-cmd --permanent --zone=public --add-port="${DA_PORT}/tcp" 2>&1 | tee -a "${REPORT_FILE}"
    elif [ "${DISTRO_ID}" == "debian" ]; then
      echo "[${SCRIPT_NAME}]: Adding DA new port ${DA_PORT}/tcp to ufw ..." 2>&1 | tee -a "${REPORT_FILE}"
      sudo ufw allow "${DA_PORT}/tcp" 2>&1 | tee -a "${REPORT_FILE}"
    fi
    echo "[${SCRIPT_NAME}]: Now directadmin can be login using a new port ${DA_PORT}" 2>&1 | tee -a "${REPORT_FILE}"
    sleep 2
    if [ "${ENABLE_DNSSEC}" == "yes" ]; then
      local bind_named="/etc/bind/named.conf.options"
      # Installation is OK, but just need to add name.conf.options
      cd_to_path "/usr/local/directadmin/scripts"
      ./dnssec.sh install
      if [ -f "${bind_named}" ]; then
        gc=$(grep -ic 'bindkeys-file \"\/etc\/bind\/named.iscdlv.key\";' "${bind_named}")
        if [ "${gc}" = 0 ]; then
          sed -i "s|\options {|&\n\tbindkeys-file \"\/etc\/bind\/named.iscdlv.key\";|" "${bind_named}"
        fi
        gc=$(grep -ic 'dnssec-lookaside auto;' "${bind_named}")
        if [ "${gc}" = 0 ]; then
          sed -i "s|\options {|&\n\tdnssec-lookaside auto;|" "${bind_named}"
        fi
        gc=$(grep -ic 'dnssec-enable yes;' "${bind_named}")
        if [ "${gc}" = 0 ]; then
          sed -i "s|\options {|&\n\tdnssec-enable yes;|" "${bind_named}"
        fi
      else
        _echo warning "Warning, the file ${bind_named} does not exist!"
        _exit 147
      fi
    else
      _echo def "Skipped installing DNSSEC (not set in config)"
    fi

    restart_da
    echo "[${SCRIPT_NAME}]: DA post installation has completed!" 2>&1 | tee -a "${REPORT_FILE}"
    check_finish_reboot "${FUNCNAME[0]}"
    exec_time end "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# This is the pre-requirement before getting ssl
# Configure the wildcard certificate option here for external DNS
function configure_da_ssl_pre() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_bin cb_bin
    da_bin="/usr/local/directadmin/directadmin"
    cb_bin="/usr/local/directadmin/custombuild/build"
    # Not enabling this yet
    # echo "[${SCRIPT_NAME}]: Setting directadmin ddns_ttl=1 at directadmin.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
    # sleep 1
    # ${da_bin} set ddns_ttl 1
    # install the latest letsencrypt here (this will only get the latest letsencrypt.sh)
    echo "[${SCRIPT_NAME}]: Installing the latest letsencrypt.sh for Directadmin ..." 2>&1 | tee -a "${REPORT_FILE}"
    ${cb_bin} letsencrypt 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    # Need to reboot
    echo "[${SCRIPT_NAME}]: Creating reboot flag to restart system before requesting SSL certificate for Directadmin ..." 2>&1 | tee -a "${REPORT_FILE}"
    cat /dev/null >/var/run/reboot-required
    echo "[${SCRIPT_NAME}]: Warning, system will reboot and you can run this script again to continue setup" 2>&1 | tee -a "${REPORT_FILE}"
    #_pause 10
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_ssl() {
  # Request SSL failed due to DAD (until server restart)
  # Interesting answer: https://serverfault.com/questions/602700/debian-ipv6-is-not-asssigned-to-interface
  # Nice reading: https://www.agwa.name/blog/post/beware_the_ipv6_dad_race_condition
  # https://serverfault.com/questions/421460/nginx-failed-to-start-cannot-assign-requested-address
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    if [ "${SETUP_DA_HOST_SSL}" == "yes" ]; then
      local da_bin cb_bin da_script_path
      da_bin="/usr/local/directadmin/directadmin"
      cb_bin="/usr/local/directadmin/custombuild/build"
      da_script_path="/usr/local/directadmin/scripts"
      echo "[${SCRIPT_NAME}]: Configuring Directadmin SSL Certificate ..." 2>&1 | tee -a "${REPORT_FILE}"
      #0) Set the ssl_redirect_host
      echo "[${SCRIPT_NAME}]: Setting ssl_redirect_host to ${BOX_HOSTNAME_FQDN} in directadmin.conf config ..." 2>&1 | tee -a "${REPORT_FILE}"
      ${da_bin} set ssl_redirect_host "${BOX_HOSTNAME_FQDN}" 2>&1 | tee -a "${REPORT_FILE}"

      echo "[${SCRIPT_NAME}]: Setting redirect_host_https no in Directadmin options.conf config ..." 2>&1 | tee -a "${REPORT_FILE}"
      ${cb_bin} set redirect_host_https no 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      echo "[${SCRIPT_NAME}]: Setting use_hostname_for_alias yes in Directadmin options.conf config ..." 2>&1 | tee -a "${REPORT_FILE}"
      ${cb_bin} set use_hostname_for_alias yes 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      #https://help.directadmin.com/item.php?id=629
      #1) Make sure enable_ssl_sni=1 in directadmin.conf (internal value is already default to 1, so if enable_ssl_sni has no entry this code does nothing)
      echo "[${SCRIPT_NAME}]: Enabling enable_ssl_sni=1 in directadmin.conf config..." 2>&1 | tee -a "${REPORT_FILE}"
      ${da_bin} set enable_ssl_sni 1
      sleep 1
      #2) Make sure letsencrypt=1 in directadmin.conf
      echo "[${SCRIPT_NAME}]: Setting letsencrypt=1 in directadmin.conf config ..." 2>&1 | tee -a "${REPORT_FILE}"
      ${da_bin} set letsencrypt 1 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      #3) Add wellknown-alias
      echo "[${SCRIPT_NAME}]: Creating dummy acme-challenge texts through custombuild rewrite_confs ..." 2>&1 | tee -a "${REPORT_FILE}"
      ${cb_bin} rewrite_confs
      sleep 1
      #4) Install letsencrypt latest version at pre function
      #5) Disable ssl=0 # This one fixed issue where you cannot request cert using ssl=1.
      # only enable ssl=1 after request certificate success. From my notes last year, I disabled this first before renew else it wont work.
      echo "[${SCRIPT_NAME}]: Disabling ssl=0 in directadmin.conf config..." 2>&1 | tee -a "${REPORT_FILE}"
      ${da_bin} set ssl 0 2>&1 | tee -a "${REPORT_FILE}"
      #6) Restart Directadmin
      sleep 1
      echo "[${SCRIPT_NAME}]: Restarting directadmin after changing directadmin.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
      restart_da
      #7) Now let's request
      echo "[${SCRIPT_NAME}]: Requesting SSL certificate for ${BOX_HOSTNAME_FQDN} ..." 2>&1 | tee -a "${REPORT_FILE}"
      ${da_script_path}/letsencrypt.sh request_single "${BOX_HOSTNAME_FQDN}" 4096 2>&1 | tee -a "${REPORT_FILE}"
      retval=$?
      echo "Return status after request certificate is ${retval}"
      sleep 1
      echo "[${SCRIPT_NAME}]: Enabling ssl=1 in directadmin.conf config..." 2>&1 | tee -a "${REPORT_FILE}"
      ${da_bin} set ssl 1 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Setting redirect_host_https yes in Directadmin options.conf config ..." 2>&1 | tee -a "${REPORT_FILE}"
      ${cb_bin} set redirect_host_https yes 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      # Always a good idea to restart DA after changing directadmin.conf
      restart_da
      sleep 1
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function change_da_auth() {
  # This function change the directadmin username and password from default to yours (based on config file)
  # It also has more options to secure DA installation. Example maybe this one we can create 2 step authentication
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_scripts_path
    da_scripts_path="/usr/local/directadmin/scripts"

    # This will change Directadmin admin account:
    echo "[${SCRIPT_NAME}]: Changing Directadmin admin username from admin to ${DA_OWNER_USERNAME1} ... " 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    ${da_scripts_path}/change_username.sh "admin" "${DA_OWNER_USERNAME1}" 2>&1 | tee -a "${REPORT_FILE}"
    # Now on just focus on debian command RIP CentOS
    echo "[${SCRIPT_NAME}]: Changing Directadmin's admin (${DA_OWNER_USERNAME1}) password ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    echo "${DA_OWNER_USERNAME1}:${DA_OWNER_USERPASS1}" | chpasswd
    echo "" 2>&1 | tee -a "${REPORT_FILE}"

    # Create htpasswd for phpmyadmin URL: (only create user information but not enabled it)
    echo "[${SCRIPT_NAME}]: Creating httpasswd for restricting phpMyAdmin URL route ... " 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    # Supply -c for first user
    htpasswd -b -c /etc/httpd/.htpasswd "${HTTPASSWD_PHPMYADMIN_USERNAME}" "${HTTPASSWD_PHPMYADMIN_PASS}"

    #only create user information but not enabled it
    echo "[${SCRIPT_NAME}]: Creating httpasswd for restricting roundcube URL route ... " 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    # Don't supply -c for next user (if supply -c, it will replace)
    htpasswd -b /etc/httpd/.htpasswd "${HTTPASSWD_ROUNDCUBE_USERNAME}" "${HTTPASSWD_ROUNDCUBE_PASS}"
    sudo chown apache:apache /etc/httpd/.htpasswd
    sudo chmod +r /etc/httpd/.htpasswd
    echo "[${SCRIPT_NAME}]: Restarting Directadmin after changing new username ... " 2>&1 | tee -a "${REPORT_FILE}"
    # I think best to restart DA after changing username because admin has so many configs (what do you think?):
    restart_da
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
function configure_da_sql() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # Note that during installation MySQL generates a short password and DA use this root password. See the text message below:
    # Heard someone said in the forum that root password is not set but that was wrong.
    ##### MySQL root password seems to be unset, setting using MySQL queries...
    ####Setting password: SET PASSWORD FOR 'root'@'localhost' = PASSWORD('*******');
    local da_scripts_path mysql_on_my_cnf_etc mysql_on_my_cnf_da mysql_on_non_cnf gc mysql_granted my_cnf_db_root my_cnf_db_da_admin mysql_conf_db_da_admin
    local randomBlowfishSecret replace_pma_blowfish replace_pma_authtype ret_code loop_count

    da_scripts_path="/usr/local/directadmin/scripts"
    mysql_conf_db_da_admin="/usr/local/directadmin/conf/mysql.conf"
    my_cnf_db_da_admin="/usr/local/directadmin/conf/my.cnf"
    my_cnf_db_root="/etc/my.cnf"

    echo "[${SCRIPT_NAME}]: Securing mysql installation ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "===============================" 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    # By default sql root password is blank (this is not secure). Need to create that root password.
    # This mysqld method can be used only if correct password is supplied in /etc/my.cnf or blank password with no entries in /etc/my.cnf

    # Using mysql if it's running and can be authenticated.
    if command -v mysqld &>/dev/null; then

      mysql_on_non_cnf=$(
        mysql -e 'exit'
        echo $?
      )
      mysql_on_my_cnf_etc=$(
        mysql --defaults-extra-file=${my_cnf_db_root} -e 'exit'
        echo $?
      )
      mysql_on_my_cnf_da=$(
        mysql --defaults-extra-file=${my_cnf_db_da_admin} -e 'exit'
        echo $?
      )

      if [ "${mysql_on_non_cnf}" -eq 0 ]; then
        # In case password is empty then use this (normally initial setup server is empty):
        echo "[${SCRIPT_NAME}]: Authenticating mysql without specifying config ..." 2>&1 | tee -a "${REPORT_FILE}"
        mysql_granted="mysql -e"
        echo "[${SCRIPT_NAME}]: Success, mysql command is able to login without specifying config file. mysql_granted is set to: ${mysql_granted}" 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
      elif [ "${mysql_on_my_cnf_etc}" -eq 0 ]; then
        echo "[${SCRIPT_NAME}]: Authenticating mysql using ${my_cnf_db_root} ..." 2>&1 | tee -a "${REPORT_FILE}"
        mysql_granted="mysql --defaults-extra-file=${my_cnf_db_root} -e"
        echo "[${SCRIPT_NAME}]: Success, mysql command is able to login using ${my_cnf_db_root}. mysql_granted is set to: ${mysql_granted}" 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
      elif [ "${mysql_on_my_cnf_da}" -eq 0 ]; then
        echo "[${SCRIPT_NAME}]: Authenticating mysql using ${my_cnf_db_da_admin} ..." 2>&1 | tee -a "${REPORT_FILE}"
        mysql_granted="mysql --defaults-extra-file=${my_cnf_db_da_admin} -e"
        echo "[${SCRIPT_NAME}]: Success, mysql command is able to login using ${my_cnf_db_da_admin}. mysql_granted is set to: ${mysql_granted}" 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
      else
        # If above not working I can use this: https://help.directadmin.com/item.php?id=45
        # or this: https://www.directadmin.com/features.php?id=2677
        echo "[${SCRIPT_NAME}]: Error, local SQL authentication is needed. If you know your root password, please supply it in ${my_cnf_db_root} or ${my_cnf_db_da_admin}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "If you don't know, you may need to reset root password manually using this article: https://help.directadmin.com/item.php?id=45" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi

      echo "[${SCRIPT_NAME}]: Changing mysql root password ... " 2>&1 | tee -a "${REPORT_FILE}"
      ${mysql_granted} "ALTER USER 'root'@'localhost' IDENTIFIED BY '${DA_ROOT_SQL_PASS}';"
      if [ -w "${my_cnf_db_root}" ]; then

        gc=$(grep -ic '^password=.*\|^password.*=.*' "${my_cnf_db_root}")
        #grep -ic '^password=.*\|^password.*=.*' /etc/my.cnf
        if [ "${gc}" = 0 ]; then
          # Append because not exist
          echo "[${SCRIPT_NAME}]: Updating new SQL root password in ${my_cnf_db_root} under [client] section ... " 2>&1 | tee -a "${REPORT_FILE}"
          #sleep 1
          sed -i "s|\[client\]|&\npassword=${DA_ROOT_SQL_PASS}|" "${my_cnf_db_root}"
        else
          echo "[${SCRIPT_NAME}]: Updating new SQL username root in ${my_cnf_db_root} ... " 2>&1 | tee -a "${REPORT_FILE}"
          # Already exist, but we replace
          sed -i "/\[client\]/,/^\[/ s/password=.*/password=${DA_ROOT_SQL_PASS}/" "${my_cnf_db_root}"
        fi
        gc=$(grep -ic '^user=.*\|^user.*=.*' "${my_cnf_db_root}")
        if [ "${gc}" = 0 ]; then
          echo "[${SCRIPT_NAME}]: Updating new SQL root username in ${my_cnf_db_root} under [client] section ... " 2>&1 | tee -a "${REPORT_FILE}"
          #sleep 1
          # Append under client because not exist
          sed -i 's|\[client\]|&\nuser=root|' "${my_cnf_db_root}"
        else
          echo "[${SCRIPT_NAME}]: Setting SQL user to root in ${my_cnf_db_root} ... " 2>&1 | tee -a "${REPORT_FILE}"
          # Already exist, but we replace
          sed -i "/\[client\]/,/^\[/ s/user=.*/user=root/" "${my_cnf_db_root}"
        fi
        gc=$(grep -ic '^bind-address=.*\|^bind-address.*=.*' "${my_cnf_db_root}")
        if [ "${gc}" = 0 ]; then
          echo "[${SCRIPT_NAME}]: Disabling mysql remote access in ${my_cnf_db_root} under [mysqld] section ... " 2>&1 | tee -a "${REPORT_FILE}"
          #sleep 1
          # Append under client because not exist
          sed -i 's|\[mysqld\]|&\nbind-address=127.0.0.1|' "${my_cnf_db_root}"
        else
          echo "[${SCRIPT_NAME}]: Updating mysql remote access as bind-address=127.0.0.1 in ${my_cnf_db_root} under [mysqld] section ... " 2>&1 | tee -a "${REPORT_FILE}"
          # Already exist, but we replace
          sed -i "/\[mysqld\]/,/^\[/ s/bind-address=.*/bind-address=127.0.0.1/" "${my_cnf_db_root}"
        fi
      else
        echo "[${SCRIPT_NAME}]: Warning, file ${my_cnf_db_root} is missing. It should exist in this location if mysql is installed through DA" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi

      echo "[${SCRIPT_NAME}]: Removing unsecured anonymous users from database ... " 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      ${mysql_granted} "DELETE FROM mysql.user WHERE user='';"
      echo "[${SCRIPT_NAME}]: Removing root users from non-localhost for security ... " 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      ${mysql_granted} "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
      echo "[${SCRIPT_NAME}]: Removing test database if exist for security ... " 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      ${mysql_granted} "DROP DATABASE IF EXISTS test;"
      echo "[${SCRIPT_NAME}]: Flushing mysql privileges ... " 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      ${mysql_granted} "FLUSH PRIVILEGES;"
      # There is no recommendation to change da_admin sql username to something else at this moment,
      # so ignore username change for sql, just change password.
      echo "[${SCRIPT_NAME}]: Changing Directadmin da_admin default SQL password ... " 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      ${mysql_granted} "ALTER USER 'da_admin'@'localhost' IDENTIFIED BY '${DA_ADMIN_SQLPASS}';"
      echo "[${SCRIPT_NAME}]: Updating da_admin SQL authentication information at ${mysql_conf_db_da_admin} ... " 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1

      if [ -s ${mysql_conf_db_da_admin} ]; then
        sed -i "s/^passwd=.*/passwd=${DA_ADMIN_SQLPASS}/" ${mysql_conf_db_da_admin}
      else
        echo -n '' >${mysql_conf_db_da_admin}
        chmod 600 ${mysql_conf_db_da_admin}
        chown diradmin:diradmin ${mysql_conf_db_da_admin}
        echo "user=da_admin" >>${mysql_conf_db_da_admin}
        echo "passwd=${DA_ADMIN_SQLPASS}" >>${mysql_conf_db_da_admin}
      fi

      if [ -s ${my_cnf_db_da_admin} ]; then
        sed -i "s/^password=.*/password=${DA_ADMIN_SQLPASS}/" ${my_cnf_db_da_admin}
      else
        echo -n '' >${my_cnf_db_da_admin}
        chmod 600 ${my_cnf_db_da_admin}
        chown diradmin:diradmin ${my_cnf_db_da_admin}
        echo "[client]"
        echo "user=da_admin" >>${my_cnf_db_da_admin}
        echo "password=${DA_ADMIN_SQLPASS}" >>${my_cnf_db_da_admin}
      fi
    else
      echo "[${SCRIPT_NAME}]: Warning, mysqld is not running. Please inspect why and re-run this script to resume setup." 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    # When done, test running mysql in terminal.
    echo "[${SCRIPT_NAME}]: [Completed]: Now, you can test running 'mysql' command in terminal to see if authentication was correctly setup" 2>&1 | tee -a "${REPORT_FILE}"
    sleep 2

    # Configuring phpmyadmin htaccess
    echo "[${SCRIPT_NAME}]: Creating https redirection .htaccess for phpMyAdmin ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    touch /var/www/html/phpMyAdmin/.htaccess
    {
      echo "RewriteEngine On"
      echo "RewriteCond %{HTTPS} !=on"
      echo "RewriteRule ^/?(.*) https://%{SERVER_NAME}${PHPMYADMIN_LOGIN_ROUTE}\$1 [R=301,L]"
    } >/var/www/html/phpMyAdmin/.htaccess
    chmod 644 /var/www/html/phpMyAdmin/.htaccess
    chown webapps:webapps /var/www/html/phpMyAdmin/.htaccess

    echo "[${SCRIPT_NAME}]: Backing up original phpmyadmin config.inc.php at /var/www/html/phpMyAdmin as config.inc.php_original_${DATE_TIME_NOW}..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    cp -p "/var/www/html/phpMyAdmin/config.inc.php" "/var/www/html/phpMyAdmin/config.inc.php_original_${DATE_TIME_NOW}"

    echo "[${SCRIPT_NAME}]: Generating new blowfish secret key for phpMyAdmin in config.inc.php ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    # Enabling cookie authentication (so that we can use htpasswd for this)
    # To enable cookie authentication we need to have blow fish string
    # Some character might break sed like '/' so we don't want this character because this character can have problem later on.
    # No need to escape https://stackoverflow.com/questions/65528031/how-to-generate-openssl-blowfish-without-certain-characters-or-allow-certain-set
    loop_count=0
    while :; do
      ((loop_count++))
      randomBlowfishSecret=$(openssl rand -base64 32)
      replace_pma_blowfish="\$cfg['blowfish_secret'] = '${randomBlowfishSecret}'; \/* YOU MUST FILL IN THIS FOR COOKIE AUTH! *\/"
      sed -i "s/\$cfg\[.blowfish_secret.\]\s*=.*/${replace_pma_blowfish}/" /var/www/html/phpMyAdmin/config.inc.php 2>/dev/null
      ret_code=$?
      if [ "${ret_code}" = 0 ]; then
        echo "[${SCRIPT_NAME}]: Successfully inserted blowfish secret key into /var/www/html/phpMyAdmin/config.inc.php after ${loop_count} retry(s)" 2>&1 | tee -a "${REPORT_FILE}"
        break
      fi
    done

    echo "[${SCRIPT_NAME}]: Setting phpMyAdmin authentication from http to cookie in config.inc.php to enable page login and httpd protection ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    replace_pma_authtype="\$cfg['Servers'][\$i]['auth_type'] = 'cookie';"
    sed -i "s/\$cfg\['Servers'\]\[\$i\]\['auth_type'\] = 'http';/${replace_pma_authtype}/" /var/www/html/phpMyAdmin/config.inc.php

    # For custom phpMyAdmin theme (not using theme yet). Theme we must get it from maxinet
    #echo "[${SCRIPT_NAME}]: Setting up phpMyAdmin custom themes ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    #cp -p "phpMyAdmin_theme_from_maxinet_called_sofibox" into "/var/www/html/phpMyAdmin/themes/sofibox"
    # Temporarily no theme yet. In the future put theme here
    # And all the themes must have this permissions:
    #chmod 644 for files, chmod 755 for folders
    # And all must have this users:
    #chown webapps:webapps /var/www/html/phpMyAdmin/themes/*

    # This is used to fix problem with phpMyAdmin Storage: https://help.directadmin.com/item.php?id=564
    cd_to_path "${INST_TEMP_DIR}"
    echo "[${SCRIPT_NAME}]: Creating phpMyAdmin configuration storage database ..." 2>&1 | tee -a "${REPORT_FILE}"
    wget -O create_tables.sh http://files1.directadmin.com/services/all/phpMyAdmin/create_tables.sh
    chmod 755 create_tables.sh
    echo "[${SCRIPT_NAME}]: Executing create_tables.sh to create phpMyAdmin configuration storage database ..." 2>&1 | tee -a "${REPORT_FILE}"
    ./create_tables.sh

    #TODO install mysql tuner after all above to check mysql or phpmyadmin status here:
    #wget -O /usr/local/sbin/mysqltuner mysqltuner.pl
    #chmod 710 /usr/local/sbin/mysqltuner
    #mysqltuner
    #when you execute mysqltuner, you will get suggestion what to tweak for your sql.
    #The mysqltuner will read directadmin mysql.conf password that you have specified before.
    #In case it cannot read and trigger an error.
    #Make sure the password doesn't contain this character > or < because mysqltuner does not support it.
    # Mysqltuner also does not accept this password: )
    #[Sample my.cnf at /etc/my.cnf](https://gitlab.com/arafatx/sofibox-luks-earth/-/blob/master/etc/my.cnf)
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  # Deprecated:
  # echo "[${SCRIPT_NAME}]: Changing Directadmin da_admin SQL password using DA custom script ... " 2>&1 | tee -a "${REPORT_FILE}"
  # This script requires that we have root or da_admin password defined in cnf, else it's not working
  # ${da_scripts_path}/reset_da_admin_password.sh --password "${DA_ADMIN_SQLPASS}"
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# This configure_da_mail can be roundcube squirrelmail or others
function configure_da_mail() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local rc_index_file
    rc_index_file="/var/www/html/roundcube/index.php"
    if [ -f ${rc_index_file} ]; then
      local grep_count my_cnf_rc_file replace_rc_authconf replace_rc_prodname rc_config_file
      local replace_rc_rcguard_recaptcha_privatekey replace_rc_rcguard_recaptcha_publickey rc_built_in_plugins rc_version
      rc_version=$(grep '| Version' /var/www/html/roundcube/index.php | awk '{ print $3 }')
      echo "[${SCRIPT_NAME}]: OK, roundcube version ${rc_version} has been detected" 2>&1 | tee -a "${REPORT_FILE}"
      echo "[${SCRIPT_NAME}]: Configuring roundcube ${rc_version} installation ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 2

      my_cnf_rc_file="/var/www/html/roundcube/config/my.cnf"
      rc_config_file="/var/www/html/roundcube/config/config.inc.php"
      echo "[${SCRIPT_NAME}]: Backing up original roundcube config.inc.php at /var/www/html/roundcube/config/config.inc.php as config.inc.php_original_${DATE_TIME_NOW}..." 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      cp -p "/var/www/html/roundcube/config/config.inc.php" "/var/www/html/roundcube/config/config.inc.php_original_${DATE_TIME_NOW}"

      echo "[${SCRIPT_NAME}]: Securing roundcube installation ..." 2>&1 | tee -a "${REPORT_FILE}"
      echo "===============================" 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      # By default roundcube is installed with a very short and weak password. We need to change the password to secured one
      # Remember roundcube password cannot contains character '@ , & and :' because config.inc.php use this separator and won't accept that password.
      echo "[${SCRIPT_NAME}]: Changing da_roundcube password in user database ..." 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      mysql -e "ALTER USER 'da_roundcube'@'localhost' IDENTIFIED BY '${DA_ROUNDCUBE_SQL_PASS}'; FLUSH PRIVILEGES;"
      echo "[${SCRIPT_NAME}]: Updating da_roundcube password in config.inc.php ..." 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      replace_rc_authconf="\$config['db_dsnw'] = 'mysql:\/\/da_roundcube:${DA_ROUNDCUBE_SQL_PASS}@localhost\/da_roundcube';"
      sed -i "s/\$config\[.db_dsnw.\]\s*=.*/${replace_rc_authconf}/" "${rc_config_file}"

      echo "[${SCRIPT_NAME}]: Changing DA product name in config.inc.php ..." 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      replace_rc_prodname="\$config['product_name'] = '${ROUNDCUBE_CUSTOM_NAME}';"
      sed -i "s/\$config\[.product_name.\]\s*=.*/${replace_rc_prodname}/" "${rc_config_file}"

      grep_count=$(grep -ic "\$config\['force_https'\]" "${rc_config_file}")
      if [ "${grep_count}" = 0 ]; then
        echo "[${SCRIPT_NAME}]: Enabling force_https for roundcube at config.inc.php ..." 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
        echo "\$config['force_https'] = true;" >>"${rc_config_file}"
      else
        echo "[${SCRIPT_NAME}]: The roundcube setting config.inc.php has already set force_https" 2>&1 | tee -a "${REPORT_FILE}"
      fi

      if [ -s "${my_cnf_rc_file}" ]; then
        echo "[${SCRIPT_NAME}]: Updating SQL da_roundcube username in ${my_cnf_rc_file} ... " 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
        sed -i "/\[client\]/,/^\[/ s/user=.*/user=da_roundcube/" "${my_cnf_rc_file}"
        echo "[${SCRIPT_NAME}]: Updating SQL da_roundcube password in ${my_cnf_rc_file} ... " 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
        sed -i "/\[client\]/,/^\[/ s/password=.*/password=${DA_ROUNDCUBE_SQL_PASS}/" ${my_cnf_rc_file}
      else
        # If no file was created, we write this file for my.cnf (roundcube auth sql config)
        echo -n '' >${my_cnf_rc_file}
        chmod 600 ${my_cnf_rc_file}
        chown diradmin:diradmin ${my_cnf_rc_file}
        echo "[client]"
        echo "user=da_roundcube" >>${my_cnf_rc_file}
        echo "password=${DA_ROUNDCUBE_SQL_PASS}" >>${my_cnf_rc_file}
      fi

      echo "[${SCRIPT_NAME}]: Enabling some roundcube built-in plugins ... " 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      rc_built_in_plugins=("'password',"
        "'archive',"
        "'zipdownload',"
        "'newmail_notifier',"
        "'managesieve',"
        "'markasjunk',"
        "'emoticons',"
        "'attachment_reminder',"
        "'new_user_dialog',"
      )
      #printf "%s\n" "${rc_built_in_plugins[@]}"
      for rc_built_in_plugin in "${rc_built_in_plugins[@]}"; do
        grep_count=$(grep -ic "${rc_built_in_plugin}" "${rc_config_file}")
        if [ "${grep_count}" -eq 0 ]; then
          # Use this code and loop above rc_plugins must be array
          echo "[${SCRIPT_NAME}]: Adding ${rc_built_in_plugin} into roundcube plugin list ..." 2>&1 | tee -a "${REPORT_FILE}"
          #sleep 1
          sed -i "s|\$config\[.plugins.\] = array(|&\n    ${rc_built_in_plugin}|" "${rc_config_file}"
        else
          echo "[${SCRIPT_NAME}]: [Skipped] The plugin ${rc_built_in_plugin} has already been set in ${rc_config_file}" 2>&1 | tee -a "${REPORT_FILE}"
        fi
      done

      echo "[${SCRIPT_NAME}]: Installing roundcube 3rd party plugins ... " 2>&1 | tee -a "${REPORT_FILE}"
      # Here we install roundcube 3rd party plugins
      if [ "${ENABLE_ROUNDCUBE_RCGUARD}" == "yes" ]; then

        #sleep 1
        # I posted bug here: https://github.com/dsoares/roundcube-rcguard/issues/39, but jus that server restart fixed the problem
        echo "[${SCRIPT_NAME}]: Installing rcguard (Google recaptcha) to protect roundcube ... " 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
        cd_to_path "/var/www/html/roundcube/plugins/"
        GIT_SSL_NO_VERIFY=true git clone https://github.com/dsoares/rcguard.git rcguard
        chown -R webapps:webapps rcguard/
        chmod 755 rcguard
        cd_to_path "/var/www/html/roundcube/plugins/rcguard/"
        find . -type d -exec chmod 0755 {} \;
        find . -type f -exec chmod 0644 {} \;
        mv config.inc.php.dist config.inc.php

        echo "[${SCRIPT_NAME}]: Configuring rcguard recaptcha_publickey in config.inc.php ..." 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
        replace_rc_rcguard_recaptcha_publickey="\$config['recaptcha_publickey'] = '${GOOGLE_RECAPTCHA_SITE_V2}';"
        sed -i "s/\$config\[.recaptcha_publickey.\]\s*=.*/${replace_rc_rcguard_recaptcha_publickey}/" /var/www/html/roundcube/plugins/rcguard/config.inc.php
        echo "[${SCRIPT_NAME}]: Configuring rcguard recaptcha_privatekey in config.inc.php ..." 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
        replace_rc_rcguard_recaptcha_privatekey="\$config['recaptcha_privatekey'] = '${GOOGLE_RECAPTCHA_SECRET_V2}';"
        sed -i "s/\$config\[.recaptcha_privatekey.\]\s*=.*/${replace_rc_rcguard_recaptcha_privatekey}/" /var/www/html/roundcube/plugins/rcguard/config.inc.php
        echo "[${SCRIPT_NAME}]: Creating mysql table for rcguard ..." 2>&1 | tee -a "${REPORT_FILE}"
        #sleep 1
        # The plugin already provide initial script to create rcguard table in roundcube. So we can just add this sql file under da_roundcube username
        mysql da_roundcube </var/www/html/roundcube/plugins/rcguard/SQL/mysql.initial.sql

        # Add rcguard plugin into roundcube config if doesn't exist
        grep_count=$(grep -ic "'rcguard'," /var/www/html/roundcube/config/config.inc.php)
        if [ "${grep_count}" -eq 0 ]; then
          # Use this code and loop above rc_plugins must be array
          echo "[${SCRIPT_NAME}]: Adding 'rcguard', into roundcube plugin list ..."
          #sleep 1
          sed -i "s|\$config\[.plugins.\] = array(|&\n    'rcguard',|" /var/www/html/roundcube/config/config.inc.php
        else
          echo "[${SCRIPT_NAME}]: [Skipped] The plugin 'rcguard', has already been set in /var/www/html/roundcube/config/config.inc.php  " 2>&1 | tee -a "${REPORT_FILE}"
        fi

      else
        echo "[${SCRIPT_NAME}]: [Skipped]: rcguard plugin installation is not set to yes" 2>&1 | tee -a "${REPORT_FILE}"
      fi
    else
      echo "[${SCRIPT_NAME}]: [Skipped]: no roundcube has been installed (unable to detect index.php)" 2>&1 | tee -a "${REPORT_FILE}"
    fi

    # configure other mail here, like squirrelmail
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_ftp() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local gc
    gc=$(grep -ic '\-\/var\/log\/pureftpd\.log' /etc/rsyslog.conf)
    if [ "${gc}" -eq 0 ]; then
      echo "[${SCRIPT_NAME}]: Setting pure-ftpd to use log at /var/log/pureftpd.log ..." 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      printf "ftp.*\t\t\t\t-/var/log/pureftpd.log\n" >>/etc/rsyslog.conf
    else
      echo "[${SCRIPT_NAME}]: [Skipped]: Found ftp log entry '-/var/log/pureftpd.log' at /etc/ryslog.conf" 2>&1 | tee -a "${REPORT_FILE}"
    fi
    # No need to remove ftp log from rsyslog.conf using ftp.none because DA BFM and LFD from CSF needs the log to auto block
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# This function only for configuring nginx_apache (it makes URL phpmyadmin or roundcube secure)
function configure_nginx_apache() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Backing up original httpd-alias.conf at /etc/httpd/ as httpd-alias.conf_original_${DATE_TIME_NOW} ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/etc/httpd/conf/extra/httpd-alias.conf" "/etc/httpd/conf/extra/httpd-alias.conf_original_${DATE_TIME_NOW}"
    echo "[${SCRIPT_NAME}]: Creating DA custom config for httpd-alias.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cat /dev/null >/etc/httpd/conf/extra/httpd-alias.conf
    {
      echo "# ==============================================="
      echo "# This configuration file was generated by ${SCRIPT_NAME}"
      echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
      echo "# ==============================================="
      echo "RewriteEngine On"
      echo "Alias /config "\"/var/www/html/redirect.php"\""
      echo "Alias /.well-known/acme-challenge "\"/var/www/html/.well-known/acme-challenge"\""
      echo ""
      # Here we can specify what URL should be blocked (with 404.html page)
      echo "# BLOCKED URLs:"
      echo "Alias /phpMyAdmin "\"/var/www/html/server/error_docs/404.html"\""
      echo "Alias /phpmyadmin "\"/var/www/html/server/error_docs/404.html"\""
      echo "Alias /pma "\"/var/www/html/server/error_docs/404.html"\""
      echo "Alias /squirrelmail "\"/var/www/html/server/error_docs/404.html"\""
      echo "Alias /webmail "\"/var/www/html/server/error_docs/404.html"\""
      echo "Alias /roundcube "\"/var/www/html/server/error_docs/404.html"\""
      echo ""
      echo "# CUSTOM URLs:"
      echo "# PHPMYADMIN custom URL:"
      echo "Alias ${PHPMYADMIN_LOGIN_ROUTE} "\"/var/www/html/phpMyAdmin/"\""
      echo "# ROUNDCUBE custom URL:"
      echo "Alias ${ROUNDCUBE_LOGIN_ROUTE} "\"/var/www/html/roundcube/"\""
      echo "# HTPASSWD secure directories:"
      echo ""
    } >>/etc/httpd/conf/extra/httpd-alias.conf
    if [ "${SECURE_HTTPASSWD_LOGIN_ROUTE}" == "yes" ]; then
      echo "[${SCRIPT_NAME}]: SECURE HTTPASSWD_LOGIN_ROUTE is set to yes. creating htpasswd authentication for custom routes ..." 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      {
        echo "#Protect phpMyAdmin directory:"
        echo "<Directory "\"/var/www/html/phpMyAdmin/"\">"
        echo "#AllowOverride AuthConfig"
        echo "AuthType Basic"
        echo "AuthName "\""${BOX_HOSTNAME_FQDN}": DB-Auth"\""
        echo "AuthUserFile /etc/httpd/.htpasswd"
        echo "Require user ${HTTPASSWD_PHPMYADMIN_USERNAME}"
        echo "</Directory>"
        echo ""
        echo "#Protect roundcube directory:"
        echo "<Directory "\"/var/www/html/roundcube/"\">"
        echo "#AllowOverride AuthConfig"
        echo "AuthType Basic"
        echo "AuthName "\""${BOX_HOSTNAME_FQDN}": Mail-Auth"\""
        echo "AuthUserFile /etc/httpd/.htpasswd"
        echo "Require user ${HTTPASSWD_ROUNDCUBE_USERNAME}"
        echo "</Directory>"
      } >>/etc/httpd/conf/extra/httpd-alias.conf

    else
      echo "[${SCRIPT_NAME}]: [skipped]: SECURE HTTPASSWD_LOGIN_ROUTE is set to no. Custom URL routes are not protected" 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 1
      {
        echo "##Protect phpMyAdmin directory:"
        echo "#<Directory "\"/var/www/html/phpMyAdmin/"\">"
        echo "##AllowOverride AuthConfig"
        echo "#AuthType Basic"
        echo "#AuthName "\""${BOX_HOSTNAME_FQDN}": DB-Auth"\""
        echo "#AuthUserFile /etc/httpd/.htpasswd"
        echo "#Require user ${HTTPASSWD_PHPMYADMIN_USERNAME}"
        echo "#</Directory>"
        echo ""
        echo "##Protect roundcube directory:"
        echo "#<Directory "\"/var/www/html/roundcube/"\">"
        echo "##AllowOverride AuthConfig"
        echo "#AuthType Basic"
        echo "#AuthName "\""${BOX_HOSTNAME_FQDN}": Mail-Auth"\""
        echo "#AuthUserFile /etc/httpd/.htpasswd"
        echo "#Require user ${HTTPASSWD_ROUNDCUBE_USERNAME}"
        echo "#</Directory>"
      } >>/etc/httpd/conf/extra/httpd-alias.conf

    fi

    echo "[${SCRIPT_NAME}]: Backing up original httpd-includes.conf at /etc/httpd/ as httpd-includes.conf_original_${DATE_TIME_NOW} ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/etc/httpd/conf/extra/httpd-includes.conf" "/etc/httpd/conf/extra/httpd-includes.conf_original_${DATE_TIME_NOW}"
    #echo "[${SCRIPT_NAME}]: Creating https redirection for all routes in httpd-includes.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    # It is a new file, so we make sure it is exist
    #touch /etc/httpd/conf/extra/httpd-includes.conf
    #{ # Temporarily disable this
    #  # Make https for all directories (This will take over force https setting at Directadmin)
    #  echo "# ==============================================="
    #  echo "# This configuration file was generated by ${SCRIPT_NAME}"
    #  echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
    #  echo "# ==============================================="
    #  echo "<location /*>"
    #  echo "RewriteEngine On"
    #  echo "RewriteCond %{HTTPS} off"
    #  echo "RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}"
    #  echo "</location>"
    #} >>/etc/httpd/conf/extra/httpd-includes.conf
    echo "[${SCRIPT_NAME}]: Backing up original httpd-default.conf at /etc/httpd/ as httpd-default.conf_original_${DATE_TIME_NOW} ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/etc/httpd/conf/extra/httpd-default.conf" "/etc/httpd/conf/extra/httpd-default.conf_original_${DATE_TIME_NOW}"
    echo "[${SCRIPT_NAME}]: Customizing server config at httpd-default.conf ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    sed -i 's|^ServerTokens .*|ServerTokens Prod|' /etc/httpd/conf/extra/httpd-default.conf
    sed -i 's|^ServerSignature .*|ServerSignature Off|' /etc/httpd/conf/extra/httpd-default.conf
    # Restarting web server based on config file
    restart_da_web_server
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Configure apps in /var/www/html
function configure_web_apps_html() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # TODO copy that webapps here (it should from maxinet)
    cat /dev/null >/var/www/html/index.php
    {
      echo "<? php"
      echo "MaXi32 - Arafat Ali - Rebuilding"
      echo "?>"
    } >/var/www/html/index.php
    chmod 644 /var/www/html/index.php
    chown webapps:webapps /var/www/html/index.php
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function build_da_custom_conf() {
  # This function will create / copy all custom configs like roundcube, phpmyadmin, ap2 etc in DA custom folder
  # So when we update Directadmin, it won't replace these files.
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # This will build custom config for DA with secured settings
    local cb_bin
    cb_bin="/usr/local/directadmin/custombuild/build"
    # 1) create custom folder at /usr/local/directadmin/custombuild/custom/ap2/conf/extra
    mkdir -p /usr/local/directadmin/custombuild/custom/ap2/conf/extra
    echo "[${SCRIPT_NAME}]: Copying httpd-alias.conf into DA custom ap2 folder ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/etc/httpd/conf/extra/httpd-alias.conf" "/usr/local/directadmin/custombuild/custom/ap2/conf/extra/httpd-alias.conf"

    echo "[${SCRIPT_NAME}]: Copying httpd-includes.conf into DA custom ap2 folder ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/etc/httpd/conf/extra/httpd-includes.conf" "/usr/local/directadmin/custombuild/custom/ap2/conf/extra/httpd-includes.conf"

    echo "[${SCRIPT_NAME}]: Copying httpd-default.conf at into DA custom ap2 folder ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/etc/httpd/conf/extra/httpd-default.conf" "/usr/local/directadmin/custombuild/custom/ap2/conf/extra/httpd-default.conf"

    # 2 For phpmyadmin
    mkdir -p /usr/local/directadmin/custombuild/custom/phpmyadmin
    # .htaccess
    echo "[${SCRIPT_NAME}]: Copying phpMyAdmin .htaccess into phpmyadmin DA custom folder ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/var/www/html/phpMyAdmin/.htaccess" "/usr/local/directadmin/custombuild/custom/phpmyadmin/.htaccess"

    # config.inc.php
    echo "[${SCRIPT_NAME}]: Copying original phpmyadmin config.inc.php at /var/www/html/phpMyAdmin into DA phpmyadmin custom folder ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/var/www/html/phpMyAdmin/config.inc.php" "/usr/local/directadmin/custombuild/custom/phpmyadmin/config.inc.php"

    # For custom phpMyAdmin theme (not using theme yet) leave this comment until I have new custom theme
    #mkdir -p /usr/local/directadmin/custombuild/custom/phpmyadmin/themes
    #echo "[${SCRIPT_NAME}]: Copying custom phpMyAdmin themes ..." 2>&1 | tee -a "${REPORT_FILE}"
    #cp -p "/var/www/html/phpMyAdmin/themes/sofibox" "/usr/local/directadmin/custombuild/custom/phpmyadmin/themes/sofibox"
    #sleep 1

    #3 - For main roundcube (2 important files: config.inc.php, my.cnf)
    mkdir -p /usr/local/directadmin/custombuild/custom/roundcube
    echo "[${SCRIPT_NAME}]: Copying original roundcube config.inc.php into DA roundcube custom folder ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    cp -p "/var/www/html/roundcube/config/config.inc.php" "/usr/local/directadmin/custombuild/custom/roundcube/config.inc.php"
    # Remember when rebuild roundcube ./build roundcube DA will automatically update my.cnf. Don't touch that.
    # I wrote answer here: https://forum.directadmin.com/threads/script-to-reset-da_admin-da_roundcube-password.57101/#post-324944
    #4 - For roundcube rcguard plugin (copy the whole folder)
    mkdir -p /usr/local/directadmin/custombuild/custom/roundcube/plugins/
    echo "[${SCRIPT_NAME}]: Copying custom roundcube custom plugins ..." 2>&1 | tee -a "${REPORT_FILE}"
    cp -p -r /var/www/html/roundcube/plugins/rcguard /usr/local/directadmin/custombuild/custom/roundcube/plugins/

    #n - For others later in here

    #n-Create custom php ini file here (create custom php ini file here with the following information) -- what is the purpose? find it out
    # increase memory consumption or upload sql size, make custom path in custom/php.conf.d
    #https://forum.directadmin.com/threads/solved-customized-50-webapps-ini-and-10-directadmin-ini.61045/#post-312326

    # at the end must do build phpmyadmin, roundcube, rewrite_confs to save httpd changes.
    # Need to rebuild this because previously we change config.inc.php. Better rebuild for new setting.
    echo "[${SCRIPT_NAME}]: Rebuilding DA phpMyAdmin for new settings ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    ${cb_bin} phpmyadmin 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Rebuilding DA roundcube for new settings ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    ${cb_bin} roundcube 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Updating DA apache/nginx configs for new settings ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    ${cb_bin} rewrite_confs 2>&1 | tee -a "${REPORT_FILE}"

    # Rebuilding other DA package whatever more here if needed ...
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# For configuring admin setting and extra hardening any DA related installation
function configure_da() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # From now on we should use maxida since it was released and installed earlier when executing this script (with maxicode update).
    # Maxida (or Maxi Direct Admin) is used to manage everything related to Directadmin. It also has the ability to manage DA API eg:
    # maxida --api <action> <options> ...
    if command -v maxida &>/dev/null; then
      echo "[${SCRIPT_NAME}]: Maxida is installed with the following details: " 2>&1 | tee -a "${REPORT_FILE}"
      maxida -V
      sleep 2
    else
      echo "[${SCRIPT_NAME}]: Warning, no maxida binary is found!" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    echo "[${SCRIPT_NAME}]: Enforcing Directadmin difficult password ..." 2>&1 | tee -a "${REPORT_FILE}"
    # or maxida --directadmin set enforce_difficult_passwords 1
    maxida --da set enforce_difficult_passwords 1
    # This will only allow hostname url login in Directadmin. For example, without this option you can use any domain within DA system to login.
    # eg: userdomain.com:2222 . Sometimes this user does not have valid certificate, thus this will cause security issue.
    # so, it is better to redirect to one hostname with a valid certificate:
    # Also explained in here: https://www.directadmin.com/features.php?id=917
    echo "[${SCRIPT_NAME}]: Forcing Directadmin login url to usr ${BOX_HOSTNAME_FQDN} ..." 2>&1 | tee -a "${REPORT_FILE}"
    maxida --da set force_hostname "${BOX_HOSTNAME_FQDN}"

    echo "[${SCRIPT_NAME}]: Securing all php installation ..." 2>&1 | tee -a "${REPORT_FILE}"
    # or maxida --custombuild secure_php
    maxida --cb secure_php
    echo "[${SCRIPT_NAME}]: Enabling Directadmin backup encryption ..." 2>&1 | tee -a "${REPORT_FILE}"
    maxida --da set allow_backup_encryption 1
    echo "[${SCRIPT_NAME}]: Setting Directadmin online help ..." 2>&1 | tee -a "${REPORT_FILE}"
    maxida --da set admin_helper "${DA_HELP_DOMAIN}"
    maxida --da set reseller_helper "${DA_HELP_DOMAIN}"
    maxida --da set user_helper "${DA_HELP_DOMAIN}"

    # For DA Administrator Settings:
    da_api_admin "start+admin"
    echo "[${SCRIPT_NAME}]: Configuring Directadmin Admin settings ..."
    da_api_admin "set-admin-settings"
    echo "[${SCRIPT_NAME}]: Configuring Directadmin Server, Security and Email settings ..."
    da_api_admin "set-server-settings"
    # TODO look at the post about DA external import js, try to avoid that for security and apply it here
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function add_da_ip() {
  # This is to add DA script to add IP into device.
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Adding ipv6 address for Directadmin using DA addip official script ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    #echo "Usage: $0 <ip> (<netmask> (<eth dev> (<broadcast>)))";
    #echo "example: $0 1.2.3.4 255.255.255.0 eth0";
    local addip_script
    addip_script="/usr/local/directadmin/scripts/addip"
    if [ -f ${addip_script} ]; then
      "${addip_script}" "${IPV6_ADD0}" "255.255.255.0" "${NIC_INTERFACE_NAME}" 2>&1 | tee -a "${REPORT_FILE}"
    else
      echo "[${SCRIPT_NAME}]: Warning file ${addip_script} was not found. Bye!" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# This maxibox is only used for backup purpose
function configure_maxibox() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # TODO: Add maxibox backup script here (PENDING)
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# This is the pre-requisite components or packages for all maxicode binary
function configure_maxicode_pre() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    #apt-get -y install ipcalc bc jq gawk
    install_required "apt:ipcalc" "apt:bc" "apt:jq" "apt:gawk"
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# maxicode will be the place to upgrade maxicode binaries (even when script finished running).
# example running maxibox --update-maxicode or maxibox --checkout-all maxibox
# usage: maxicode --update <package_name> or maxicode -u <package_name>
# eg: To update all package: maxicode -u all. To update just maxiwall: maxicode -u maxiwall
function configure_maxicode() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    maxicode_bin="/usr/local/maxicode/maxicode"
    if [ -f ${maxicode_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxicode_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      chmod +x ${maxicode_bin}
      # Symbolic name
      ln -s ${maxicode_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxicode doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    # 1) Install aide and copy maxiaide files (make sure it works)
    # 2) Install rsync and copy maxinet files (make sure it works)
    # 3) Install suricata and copy maxiwall files (make sure it works)
    # 4) Copy maxicbuild

    #local ORI_PWD
    #echo "[${SCRIPT_NAME}]: Installing OSSEC ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 2
    #echo "[${SCRIPT_NAME}]: Creating directory /usr/src if doesn't exist ..." 2>&1 | tee -a "${REPORT_FILE}"
    #mkdir -p "${INST_TEMP_DIR}"
    #echo "[${SCRIPT_NAME}]: Removing previous download file ..." 2>&1 | tee -a "${REPORT_FILE}"
    #rm -fv "${INST_TEMP_DIR}/3.6.0.tar.gz"
    #echo "[${SCRIPT_NAME}]: Downloading and extracting OSSEC file ..." 2>&1 | tee -a "${REPORT_FILE}"
    #ORI_PWD="${PWD}"
    #cd "${INST_TEMP_DIR}" || {
    #  echo "Failed to enter into directory" 2>&1 | tee -a "${REPORT_FILE}"
    #  _exit 147
    #}
    #wget https://github.com/ossec/ossec-hids/archive/3.6.0.tar.gz
    #tar xzf 3.6.0.tar.gz

    #cd ossec-hids-3.6.0/ || {
    #  echo "Failed to enter into directory" 2>&1 | tee -a "${REPORT_FILE}"
    #  _exit 147
    #}
    #sh "install.sh"
    # If want to silent install follow this documentation: https://www.ossec.net/docs/manual/installation/install-source-unattended.html
    # Need to change the config file (uncomment setting)
    # Tip: To remove OSSEC use this
    # /var/ossec/bin/ossec-control stop && rm -rf /var/ossec && rm /etc/init.d/*ossec* && rm /etc/ossec-init.conf
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_maxiperm() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local maxiperm_bin
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Configuring maxiperm installation in maxicode ..." 2>&1 | tee -a "${REPORT_FILE}"
    maxiperm_bin="/usr/local/maxicode/maxiperm/perm"
    if [ -f ${maxiperm_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxiperm_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      chmod +x ${maxiperm_bin}
      # Symbolic name
      ln -s ${maxiperm_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxiperm doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Harden server based on lynis suggestion
function configure_maxinis() {
  # Here we do extra hardening for SSHD (based on lynis suggestion)
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local lynis_latest_version maxinis_bin
    maxinis_bin="/usr/local/maxicode/maxinis/maxinis"
    # SSHD config enough. No more
    # TODO MORE HERE for others based on lynis suggestion.. (Need to obtain the scan ID first and get that value)
    # Use that value and auto apply hardening here
    # Install latest lynis using:
    # Get latest version tar.gz inspired by: https://stackoverflow.com/questions/22510705/get-the-latest-download-link-programmatically
    echo "[${SCRIPT_NAME}]: Getting latest version of lynis ..." 2>&1 | tee -a "${REPORT_FILE}"
    lynis_latest_version=$(curl 'https://downloads.cisofy.com/lynis/' | grep -oP 'href="lynis-\K[0-9]+\.[0-9]+\.[0-9]+' | sort -t. -rn -k1,1 -k2,2 -k3,3 | head -1)
    echo "[${SCRIPT_NAME}]: Latest version detected as ${lynis_latest_version}. Downloading lynis version ${lynis_latest_version} ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    mkdir -p /usr/local/lynis
    cd_to_path "/usr/local"
    wget "https://cisofy.com/files/lynis-${lynis_latest_version}.tar.gz" 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Extracting lynis.tar.gz ..." 2>&1 | tee -a "${REPORT_FILE}"
    tar xfvz "lynis-${lynis_latest_version}.tar.gz" 2>&1 | tee -a "${REPORT_FILE}"
    rm -f "lynis-${lynis_latest_version}.tar.gz"
    cd_to_path "lynis"
    # TODO: Configure maxinis binary here
    echo "[${SCRIPT_NAME}]: Checking system security with lynis ..." 2>&1 | tee -a "${REPORT_FILE}"
    # No need to audit system during setup because ain't nobody got time for this
    #./lynis audit system 2>&1 | tee -a "${REPORT_FILE}"
    if [ -f ${maxinis_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxinis_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      chmod +x ${maxinis_bin}
      # Symbolic name
      ln -s ${maxinis_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxinis doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Installing other security software based on maxicode
# maxigpg need to init first before caching password: run: maxigpg --init
function configure_maxigpg() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local maxigpg_bin ret_val gpg_priv_key gpg_priv_key_encrypted
    echo "[${SCRIPT_NAME}]: Configuring maxigpg installation in maxicode ..." 2>&1 | tee -a "${REPORT_FILE}"
    maxigpg_bin="/usr/local/maxicode/maxigpg/maxigpg"
    if [ -f ${maxigpg_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxigpg_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      chmod +x ${maxigpg_bin}
      # Symbolic name
      ln -s ${maxigpg_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxigpg doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    if [ "${GPG_USE_EXISTING_KEY}" == "yes" ]; then
      gpg_priv_key_encrypted="${DATA_PATH}/maxinet/storage/os/debian/usr/local/maxisecure/gpg/keys/priv.key.gpg"
      gpg_priv_key="${DATA_PATH}/maxinet/storage/os/debian/usr/local/maxisecure/gpg/keys/priv.key"
      rm -f "${gpg_priv_key}"
      gpg --pinentry-mode=loopback --passphrase "${GPG_PASSPHRASE}" -d -o "${gpg_priv_key}" "${gpg_priv_key_encrypted}"
      echo "[${SCRIPT_NAME}]: Importing existing gpg-agent key from maxinet ..." 2>&1 | tee -a "${REPORT_FILE}"
      gpg --pinentry-mode=loopback --passphrase "${GPG_PASSPHRASE}" --import "${gpg_priv_key}"
      ret_val=$?
      if [ ${ret_val} = 0 ]; then
        echo "[${SCRIPT_NAME}]: Import ok" 2>&1 | tee -a "${REPORT_FILE}"
      else
        echo "[${SCRIPT_NAME}]: Import failed" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    else
      # 0) Configure gpg first
      echo "[${SCRIPT_NAME}]: Generating new gpg-agent key ..." 2>&1 | tee -a "${REPORT_FILE}"
      cat >gpgkey <<EOF
     %echo Generating a basic OpenPGP key for ${BOX_HOSTNAME_FQDN}
     Key-Type: RSA
     Key-Length: 2048
     Subkey-Type: RSA
     Subkey-Length: 2048
     Name-Real: ${ADMIN_NAME}
     Name-Comment: This is the main GPG key for ${ADMIN_NAME} in ${BOX_HOSTNAME_FQDN}
     Name-Email: ${ADMIN_EMAIL}
     Expire-Date: 0
     Passphrase: ${GPG_PASSPHRASE}
     # Do a commit here, so that we can later print "done" :-)
     %commit
     %echo done
EOF
      # Generate the key based on the above information
      gpg --verbose --batch --generate-key gpgkey
      # Set trust to 5 for the key so we can encrypt without prompt.
      echo "[${SCRIPT_NAME}]: Setting trust to 5 for the key ${ADMIN_EMAIL} so we can encrypt without prompt ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key "${ADMIN_EMAIL}" trust
      # Test the key can encrypt and decrypt.
      echo "[${SCRIPT_NAME}]: Testing key for encrypting ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      gpg -e -a -r "${ADMIN_EMAIL}" gpgkey
      ret_val=$?
      if [ ${ret_val} = 0 ]; then
        echo "[${SCRIPT_NAME}]: Encryption test ok" 2>&1 | tee -a "${REPORT_FILE}"
      else
        echo "[${SCRIPT_NAME}]: Encryption test failed" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
      # Delete the options and decrypt the original to stdout.
      rm -f gpgkey
      echo "[${SCRIPT_NAME}]: Testing key for decrypting ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      gpg -d gpgkey.asc
      ret_val=$?
      if [ ${ret_val} = 0 ]; then
        echo "[${SCRIPT_NAME}]: Decryption test ok" 2>&1 | tee -a "${REPORT_FILE}"
        rm -f gpgkey.asc
      else
        echo "[${SCRIPT_NAME}]: Decryption test failed" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    fi
    # Remove the unprotected key
    rm -f "${gpg_priv_key}"
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# maxida is used to manage directadmin functionalities including APIs.
function configure_maxida() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local maxida_bin maxida_conf_sample maxida_conf
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Configuring maxida installation in maxicode ..." 2>&1 | tee -a "${REPORT_FILE}"
    maxida_bin="/usr/local/maxicode/maxida/maxida"
    maxida_sl_bin="/usr/local/bin/maxida"
    maxida_conf_sample="/usr/local/maxicode/maxida/maxida.conf.sample"
    maxida_conf="/usr/local/maxicode/maxida/maxida.conf"
    maxida_maxipass_conf_path="/usr/local/maxicode/maxipass/cross/maxida"
    maxida_maxipass_conf="${maxida_maxipass_conf_path}/maxida.conf"
    # Use config file from maxipass
    maxida_conf="${maxida_maxipass_conf}"
    mkdir -p "${maxida_maxipass_conf_path}"
    _echo def "Removing existing config file from ${maxida_conf}"
    rm -f "${maxida_conf}"
    if [ -f ${maxida_bin} ]; then
      _echo def "Creating symlink and executable for ${maxida_bin} ..."
      sleep 1
      chmod +x ${maxida_bin}
      # Symbolic name
      if ! [ -L ${maxida_sl_bin} ]; then
        ln -s ${maxida_bin} /usr/local/bin
      else
        _echo warning "Symbolic link exist for ${maxida_sl_bin}!"
      fi
    else
      _echo warning "Warning, maxida doesn't exist in /usr/local/maxicode !"
      _exit 147
    fi

    if [ -f ${maxida_conf_sample} ]; then
      cp "${maxida_conf_sample}" "${maxida_conf}"
      # Here we create environment variables to use maxida API (Directadmin API). Very important to supply initial authentication
      _echo def "Creating environment config for maxida at ${maxida_conf} ..."
      sleep 1
      # Put admin authentication:
      # Use | instead of \ so we can escape the slash for example when providing URL with /
      #sed "s/regex/replace/" file --- > sed "s|regex|replace|" file

      sed -i "s|^API_USERNAME=.*|API_USERNAME=\"${DA_OWNER_USERNAME1}\"|" "${maxida_conf}"
      sed -i "s|^API_USERPASS=.*|API_USERPASS=\"${DA_OWNER_USERPASS1}\"|" "${maxida_conf}"
      sed -i "s|^BOX_HOSTNAME_FQDN=.*|BOX_HOSTNAME_FQDN=\"${BOX_HOSTNAME_FQDN}\"|" "${maxida_conf}"
      sed -i "s|^DA_PORT=.*|DA_PORT=\"${DA_PORT}\"|" "${maxida_conf}"
      sed -i "s|^SETUP_GIT_URL=.*|SETUP_GIT_URL=\"${SETUP_GIT_URL}\"|" "${maxida_conf}"
      sed -i "s|^GIT_TOKEN=.*|GIT_TOKEN=\"${GIT_TOKEN}\"|" "${maxida_conf}"
    else
      _echo warning "Warning, maxida.conf.sample doesn't exist in ${maxida_conf_sample}!"
      _exit 147
    fi

    # Update directadmin all custom scripts
    ${maxida_bin} --update all

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_maxicron() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local maxicron_bin
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    maxicron_bin="/usr/local/maxicode/maxicron/maxicron"

    if [ -f ${maxicron_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxicron_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      chmod +x ${maxicron_bin}
      # Symbolic name
      ln -s ${maxicron_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxicron doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_maxiaide() {
  # Under testing for new version AIDE. New AIDE version has different config format.
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local maxiaide_bin
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # install aide
    # No need to install aide because maxiaide --initfull is designed to initialize this and install required packages
    #echo "[${SCRIPT_NAME}]: Installing AIDE file monitoring ..." 2>&1 | tee -a "${REPORT_FILE}"
    #apt-get -y install aide
    maxiaide_bin="/usr/local/maxicode/maxiaide/maxiaide"

    if [ -f ${maxiaide_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxiaide_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      chmod +x ${maxiaide_bin}
      # Symbolic name
      ln -s ${maxiaide_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxiaide doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    # Can run this scan after installation
    # maxiaide --scan
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Warning current config is compatible with 6.0.1
# TODO check for updated suricata config for new version
function configure_maxiwall() {
  #Fixed bug from this helpful solution:
  #https://forum.suricata.io/t/latest-suricata-6-0-2-with-rustc-has-trouble-installing-with-error-could-not-compile-lexical-core/1461/3
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    _echo def "Executing ${FUNCNAME[0]} ..."
    local latest_suricata_version suricata_preferred_version rustup_preferred_version maxiwall_bin maxirbl_bin # suricata_conf suricata_service is_masked
    # suricata_conf="/etc/suricata/suricata.yaml"
    # Instruction: https://forum.suricata.io/t/install-suricata-6-0-1-on-debian-10-from-source/992
    # Install required components for suricata:
    _echo def "Installing required components for suricata & maxiwall ..."
    sleep 1
    # Essential tools:
    apt-get install make autoconf automake libtool
    # Required by suricata:
    apt-get -y install libpcre3 libpcre3-dbg libpcre3-dev build-essential libpcap-dev \
      libnet1-dev libyaml-0-2 libyaml-dev pkg-config zlib1g zlib1g-dev liblz4-dev \
      libcap-ng-dev libcap-ng0 libmagic-dev libjansson-dev libnspr4-dev \
      libnss3-dev libgeoip-dev liblua5.1-dev libhiredis-dev libevent-dev \
      python-yaml python3-distutils python3-pip #rustc cargo
    pip3 install PyYAML
    # Do not install rustc and cargo
    # This will fix this error -> ERROR: Suricata now requires Rust to build (Debian has bug with rustc package)
    # Bug details: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=976601 | https://redmine.openinfosecfoundation.org/issues/4204
    # workaround step: https://stackoverflow.com/questions/65330382/building-suricata-could-not-compile-der-parser

    # Remove built-in package of rustc
    _echo def "Removing built-in of existing rustc ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    apt -y remove --purge rustc
    apt -y remove cargo
    #sudo apt-get -y autoremove

    # Removing suricata compiled source:
    _echo def "Removing existing suricata installation and log files ..."
    sleep 1
    apt-get remove suricata
    rm -rf /usr/share/suricata
    rm -rf /etc/suricata
    rm -rf /var/lib/suricata
    rm -rf /var/log/suricata
    rm -f /usr/local/bin/suricata
    rm -f /etc/default/suricata
    rm -f /etc/init.d/suricata
    rm -f /etc/systemd/system/suricata.service

    _echo def "Removing rustup ..."
    rustup self uninstall -y

    _echo def "Reloading systemctl daemon service (after making changes to systemd service) ..."
    systemctl daemon-reload

    cd_to_path "${INST_TEMP_DIR}"
    # source configuration
    # Do not use apt to install. Currently Debian package uses old version 4.1.2 but the latest is 6.0.2
    # For CentOS rpm package will install only version 5. So the best is to compile from source using this trick:

    latest_suricata_version=$(curl 'https://www.openinfosecfoundation.org/download/' | grep -oP 'href="suricata-\K[0-9]+\.[0-9]+\.[0-9]+' | sort -t. -rn -k1,1 -k2,2 -k3,3 | head -1)
    suricata_preferred_version="${SURICATA_SELECT_VERSION}"
    rustup_preferred_version="${INSTALL_RUSTC_VERSION}"

    _echo def "Installing the latest rustc package manually ..."
    rustup_install=$(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y 2>&1 | grep 'likely because of mounting /tmp')
    # If the error message of 'likely because of mounting /tmp' is shown, then we need to get the location of the mentioned file in tmp
    if [ -n "${rustup_install}" ]; then

      rustup_tmp_init=$(echo "${rustup_install}" | awk '{ print $3 }')
      _echo warning "Error found. Resolving error of message of: ${rustup_install} ..."
      _echo def "The rustup-init file is at this location: ${rustup_tmp_init}"
      #sleep 2
      cp "${rustup_tmp_init}" "${INST_TEMP_DIR}/rustup-init"
      # Execute the rustup-init installation silently. For more info look at rustup-init --help
      _echo def "Executing rustup-init file ..."
      "${INST_TEMP_DIR}/rustup-init" -y
      # Some fixes if rustup does not execute:
      #source "$HOME/.profile"
      #export PATH="$HOME/.cargo/bin:$PATH"
    else
      _echo green "OK, rustup installation directory is writeable"
    fi

    _echo def "Changing rustup version to ${rustup_preferred_version} ..."
    rustup install "${rustup_preferred_version}"
    export RUSTUP_TOOLCHAIN="${rustup_preferred_version}"

    # Need to source oncde in order to use rustrc  source "$HOME/.cargo/env"
    _echo def "Sourcing cargo env file ..."
    source "$HOME/.cargo/env"

    if [ "${suricata_preferred_version}" == "backport" ]; then
      if [ "${DISTRO_ID}" == "debian" ]; then
        _echo def "Installing suricata backport version on Debian ..."
        echo "deb http://http.debian.net/debian buster-backports main" >/etc/apt/sources.list.d/backports.list
        apt-get -y install suricata -t buster-backports
      else
        _echo warning "Invalid DISTRO_ID selection. This DISTRO ${DISTRO_ID} is not supported in ${SCRIPT_NAME} to install suricata!"
        _exit 147
      fi
    else # This one compatible with suricata 6.0.2
      if [ "${latest_suricata_version}" != "${suricata_preferred_version}" ]; then
        _echo def "Warning, suricata latest version is: ${latest_suricata_version} but selected version in config file is ${SURICATA_SELECT_VERSION}"
        _pause 5
      fi
      _echo def "Removing suricata downloaded file suricata-${suricata_preferred_version}.tar.gz ..."
      #sleep 1
      rm -fv "${INST_TEMP_DIR}/suricata-${suricata_preferred_version}.tar.gz"
      _echo def "Downloading suricata latest version-${suricata_preferred_version} ..."
      #sleep 1
      wget "https://www.openinfosecfoundation.org/download/suricata-${suricata_preferred_version}.tar.gz"
      _echo def "Extracting suricata version-${suricata_preferred_version} ..."
      #sleep 1
      tar xzvf "suricata-${suricata_preferred_version}.tar.gz"
      cd_to_path "suricata-${suricata_preferred_version}/"

      _echo def "Configuring script for getting ready to build suricata ... "
      #sleep 1
      # Dont enable IPS because we will integrate blocking with CSF (using my script called maxicode/maxiwall)
      ./configure --libdir=/usr/lib64 --prefix=/usr/local --sysconfdir=/etc --localstatedir=/var --datarootdir=/usr/local/share --enable-lua --enable-rust
      #make
      #sudo make install
      _echo def "Installing suricata with make install-full ... "
      #sleep 1
      sudo RUSTUP_TOOLCHAIN="${INSTALL_RUSTC_VERSION}" make install-full

      # Use this ldconfig to prevent error described here:
      # https://stackoverflow.com/questions/65330382/building-suricata-could-not-compile-der-parser
      # sudo ldconfig
      # suricata -V
      # Backport latest version as for now is 6.0.1
    fi

    if command -v suricata &>/dev/null; then
      _echo success "Suricata is installed with the following details: "
      suricata -V
      sleep 2
    else
      _echo warning "Warning, no suricata binary is found! Please inspect the log file why"
      _exit 147
    fi
    # Maxiwall --init will do all the commented below (already have this function long time ago).

    # Then Create the service file
    #echo "[${SCRIPT_NAME}]: Creating a new suricata.service file ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1

    #{
    #  echo "# ==============================================="
    #  echo "# This configuration file was generated by ${SCRIPT_NAME}"
    #  echo "# Author: ${ADMIN_NAME} | Email: ${ADMIN_EMAIL} | Web: ${BOX_DOMAIN}"
    #  echo "# ==============================================="
    #  echo "[Unit]"
    #  echo "Description=Suricata IDS/IDP Service"
    #  echo "Wants=network.target syslog.target"
    #  echo "After=network.target syslog.target"
    #  echo "Documentation=man:suricata(8) man:suricatasc(8)"
    #  echo "Documentation=https://redmine.openinfosecfoundation.org/projects/suricata/wiki"
    #  echo ""
    #  echo "[Service]"
    #  echo "Type=forking"
    #  echo "Environment=LD_PREDLOAD=/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4"
    #  echo "# Debug level ---> -v: INFO | -vv: INFO+PERF | -vvv: INFO+PERF+CONFIG | -vvvv: INFO+PERF+CONFIG+DEBUG"
    #  echo "# D - means in daemon | -c read config | --pidfile <file> write pidfile on a file"
    #  echo "ExecStart=suricata --af-packet -vvv -D -c /etc/suricata/suricata.yaml --pidfile /var/run/suricata.pid"
    #  echo "ExecStartPre=rm -f /var/run/suricata.pid"
    #  echo "ExecStop=kill \$MAINPID && rm -f /var/run/suricata.pid"
    #  echo "ExecReload=kill -9 \$MAINPID"
    #  echo ""
    #  echo "[Install]"
    #  echo "WantedBy=multi-user.target"
    #} >/etc/systemd/system/suricata.service
    #sleep 1
    #echo "[${SCRIPT_NAME}]: Checking if suricata.service is masked ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    #is_masked=$(systemctl status suricata | grep -c 'masked')
    #is_masked=$(ls -l /etc/systemd/system/suricata.service | grep -c '/dev/null')
    #if [ "${is_masked}" -gt 0 ]; then
    #  echo "[${SCRIPT_NAME}]: Warning, the suricata.service is masked. Unmasking the service file ..." 2>&1 | tee -a "${REPORT_FILE}"
    #  sleep 1
    #  systemctl unmask suricata
    #else
    #  echo "[${SCRIPT_NAME}]: OK, the suricata.service is not masked" 2>&1 | tee -a "${REPORT_FILE}"
    #fi

    # Enable suricata before starting at /etc/default/suricata (doesn't seems important when I use the above script)
    # Before starting suricata, I need to use custom config file (suricata.yaml) for best performance:

    #echo "[${SCRIPT_NAME}]: Copying suricata.yaml configuration file template into ${suricata_conf} ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    #cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/maxicode/maxiwall/code/etc/suricata/suricata.yaml" "${suricata_conf}"

    #echo "[${SCRIPT_NAME}]: Copying maxiwall.lua into /etc/suricata/lua-output ..." 2>&1 | tee -a "${REPORT_FILE}"
    #mkdir -p /etc/suricata/lua-output
    #sleep 1

    #cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/maxicode/maxiwall/code/etc/suricata/lua-output/maxiwall.lua" "/etc/suricata/lua-output/maxiwall.lua"
    #chmod +x "/etc/suricata/lua-output/maxiwall.lua"

    #echo "[${SCRIPT_NAME}]: Copying maxiwall-http.lua into /etc/suricata/lua-output ..." 2>&1 | tee -a "${REPORT_FILE}"
    #mkdir -p /etc/suricata/lua-output
    #sleep 1
    #cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/maxicode/maxiwall/code/etc/suricata/lua-output/maxiwall-http.lua" "/etc/suricata/lua-output/maxiwall-http.lua"
    #chmod +x "/etc/suricata/lua-output/maxiwall-http.lua"

    #echo "[${SCRIPT_NAME}]: Starting suricata ... " 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    #systemctl start suricata
    #suricata_service=$(systemctl is-active suricata)

    #if [ "${suricata_service}" == "active" ]; then
    #  echo "[${SCRIPT_NAME}]: OK, suricata is running" 2>&1 | tee -a "${REPORT_FILE}"
    #else
    #  echo "[${SCRIPT_NAME}]: Warning, suricata process is not active [unknown reason]. Please inspect log file to understand the reason" 2>&1 | tee -a "${REPORT_FILE}"
    #  _exit 147
    #fi

    maxiwall_bin="/usr/local/maxicode/maxiwall/maxiwall"

    if [ -f ${maxiwall_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxiwall_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      chmod +x ${maxiwall_bin}
      # Symbolic name
      ln -s ${maxiwall_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxiwall doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    maxirbl_bin="/usr/local/maxicode/maxiwall/maxirbl"

    if [ -f ${maxirbl_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxirbl_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      chmod +x ${maxirbl_bin}
      # Symbolic name
      ln -s ${maxirbl_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxirbl doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    # Writing a new maxiwall.conf file (all sensitive variables should be declared in maxinet.conf and pass here)
    echo "[${SCRIPT_NAME}]: Writing new maxiwall.conf file ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    {
      echo "# The URL. Need to modify this if they change this URL like the v2 to v3"
      echo "AIPDB_CHECK_URL=\"${MAXIWALL_AIPDB_CHECK_URL}"\"
      echo "AIPDB_REPORT_URL=\"${MAXIWALL_AIPDB_REPORT_URL}"\"
      echo "# The main AIPDB key"
      echo "AIPDB_API_KEY=\"${MAXIWALL_AIPDB_API_KEY}"\"
    } >"/usr/local/maxicode/maxiwall/conf/maxiwall.conf"

    # maxiwall --initfull will handle 3rd party rules and signature update
    # suricata-update update-sources
    #echo "[${SCRIPT_NAME}]: Updating suricata new signature ..." 2>&1 | tee -a "${REPORT_FILE}"
    #sleep 1
    #suricata-update

    # Maxiwall --initfull will do all the commented above (already have this function long time ago).
    # Must have maxiwall.conf file first before running --initfull
    echo "[${SCRIPT_NAME}]: Running maxiwall --initfull ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    maxiwall --initfull

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# For managing cloud storage. Like mounting cloud storage, send file or receive file from cloud. maxicloud will handle that.
# Todo configure maxicloud for backup in DA
function configure_maxicloud() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local maxiaide_bin
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local maxicloud_bin maxicloud_conf maxicloud_conf_sample
    maxicloud_bin="/usr/local/maxicode/maxicloud/maxicloud"
    maxicloud_conf="/usr/local/maxicode/maxicloud/maxicloud.conf"
    maxicloud_conf_sample="/usr/local/maxicode/maxicloud/maxicloud.conf.sample"

    if [ -f ${maxicloud_conf_sample} ]; then
      echo "[${SCRIPT_NAME}]: Copying maxicloud sample config into ${maxicloud_conf} ..." 2>&1 | tee -a "${REPORT_FILE}"
      cp -f ${maxicloud_conf_sample} ${maxicloud_conf}
    else
      echo "[${SCRIPT_NAME}]: Warning, the sample config file ${maxicloud_conf_sample} does not exist. Please inspect the file!" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    if [ -f ${maxicloud_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxicloud_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      chmod +x ${maxicloud_bin}
      # Symbolic name
      ln -s ${maxicloud_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxicloud doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# This function configure password management of maxipass
function configure_maxipass() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local maxipass_bin maxipass_conf maxipass_conf_sample #maxipass_da_conf maxipass_da_conf_sample
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local maxipass_bin maxipass_conf maxipass_conf_sample
    maxipass_bin="/usr/local/maxicode/maxipass/maxipass"
    maxipass_conf="/usr/local/maxicode/maxipass/maxipass.conf"
    maxipass_conf_sample="/usr/local/maxicode/maxipass/maxipass.conf.sample"
    #maxipass_da_conf="/usr/local/maxicode/maxipass/secure/da/da.conf"
    #maxipass_da_conf_sample="/usr/local/maxicode/maxipass/secure/da/da.conf.sample"

    if [ -f ${maxipass_conf_sample} ]; then
      echo "[${SCRIPT_NAME}]: Copying maxipass sample config into ${maxipass_conf} ..." 2>&1 | tee -a "${REPORT_FILE}"
      cp -f ${maxipass_conf_sample} ${maxipass_conf}
    else
      echo "[${SCRIPT_NAME}]: Warning, the sample config file ${maxipass_conf_sample} does not exist. Please inspect the file!" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    #if [ -f ${maxipass_da_conf_sample} ]; then
    #  echo "[${SCRIPT_NAME}]: Copying maxipass-da sample config into ${maxipass_da_conf} ..." 2>&1 | tee -a "${REPORT_FILE}"
    #  cp -f ${maxipass_da_conf_sample} ${maxipass_da_conf}
    #  sleep 1
    # Put admin authentication (this should be encrypted and only accessed by GPG agent):
    #  sed -i "s/^API_USERNAME=.*/API_USERNAME=\"${DA_OWNER_USERNAME1}\"/" ${maxipass_da_conf}
    #  sed -i "s/^API_USERPASS=.*/API_USERPASS=\"${DA_OWNER_USERPASS1}\"/" ${maxipass_da_conf}
    #else
    #  echo "[${SCRIPT_NAME}]: Warning, the sample config file ${maxipass_da_conf_sample} does not exist. Please inspect the file!" 2>&1 | tee -a "${REPORT_FILE}"
    #  _exit 147
    #fi

    if [ -f ${maxipass_bin} ]; then
      echo "[${SCRIPT_NAME}]: Creating symlink and executable for ${maxipass_bin} ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      chmod +x ${maxipass_bin}
      # Symbolic name
      ln -s ${maxipass_bin} /usr/local/bin
    else
      echo "[${SCRIPT_NAME}]: Warning, maxipass doesn't exist in /usr/local/maxicode !" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# For managing notification (eg. pushover, gotify)
# TODO configure this when https is ready, put in secured port, put httpd layer
# Find a way to add 2 step authentication
function configure_maxify() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local version platform
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    _echo def "Installing gotify ..."
    version="2.0.21"
    platform="linux-amd64"
    wget https://github.com/gotify/server/releases/download/v${version}/gotify-${platform}.zip
    unzip gotify-${platform}.zip
    chmod +x gotify-${platform}
    check_finish_reboot "${FUNCNAME[0]}"

    #sudo ./gotify-${platform}
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# TODO configure log functions
function configure_logs() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    :

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# This will install OS memcached and php memcached extension
function configure_da_memcached() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    local gc
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    echo "[${SCRIPT_NAME}]: Installing memcached components in OS level ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    # Remember libmemcached-dev is needed for Debian. In CentOS it's called libmemcached-devel
    sudo apt-get -y install memcached libmemcached-tools libmemcached-dev
    gc=$(grep -ic "\-l ::1" /etc/memcached.conf)
    if [ "${gc}" = 0 ]; then
      echo "[${SCRIPT_NAME}]: Setting memcached to listen to IPv6 ..." 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
      sed -i "s/^\-l.*/\-l 127.0.0.1 \-l ::1/" /etc/memcached.conf
    else
      echo "[${SCRIPT_NAME}]: [Skipped] memcached config is already set to listen to IPv6" 2>&1 | tee -a "${REPORT_FILE}"
      sleep 1
    fi
    echo "[${SCRIPT_NAME}]: Restarting memcached ... " 2>&1 | tee -a "${REPORT_FILE}"

    systemctl restart memcached
    echo "[${SCRIPT_NAME}]: Checking memcached status ... " 2>&1 | tee -a "${REPORT_FILE}"

    systemctl --no-pager status memcached
    echo "[${SCRIPT_NAME}]: Installing memcached for php-extension using Poralix script ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    cd_to_path "${INST_TEMP_DIR}"
    cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/install_scripts/php_extension.sh" "${INST_TEMP_DIR}/php_extension.sh"
    chmod +x php_extension.sh
    # This one just checking not verifying, so whether exist or not we just execute install
    echo "[${SCRIPT_NAME}]: Checking existing php-memcached installation ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    /bin/sh ./php_extension.sh status memcached 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Installing php-memcached for all PHP versions ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 2
    /bin/sh ./php_extension.sh install memcached 2>&1 | tee -a "${REPORT_FILE}"
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi

}

function configure_da_geoip() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Installing geoip components in OS level ..." 2>&1 | tee -a "${REPORT_FILE}"
    # Just like the memcached need libmemcache-dev, this geoip needs libgeoip-dev
    apt-get -y install libgeoip-dev geoip-bin geoip-database

    echo "[${SCRIPT_NAME}]: Installing geoip for php-extension using Poralix script ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    cd_to_path "${INST_TEMP_DIR}"
    cp "${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/install_scripts/php_extension.sh" "${INST_TEMP_DIR}/php_extension.sh"
    chmod +x php_extension.sh
    # This one just checking not verifying, so whether exist or not we just execute install
    echo "[${SCRIPT_NAME}]: Checking existing php-geoip installation ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    /bin/sh ./php_extension.sh status geoip 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Installing php-geoip for all PHP versions ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 2
    # For geoip from poralix script, it needs to select --beta because stable release has error during installation
    /bin/sh ./php_extension.sh install geoip --beta 2>&1 | tee -a "${REPORT_FILE}"

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

configure_da_dns_templates() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_template_custom ipv6_full_uncompressed da_bin da_latest_version
    da_latest_version=$(curl -s https://www.directadmin.com/version.php | grep -Eo "[0-9]+\.[0-9]+")
    da_template_custom="/usr/local/directadmin/data/templates/custom"
    da_bin="/usr/local/directadmin/directadmin"
    mkdir -p "${da_template_custom}"
    chown diradmin:diradmin ${da_template_custom}
    touch "${da_template_custom}/dns_txt.conf"
    echo "DA latest version is ${da_latest_version}. Current DNS config is compatible with DA 1.61.5. Please check compatibility issue"
    echo "[${SCRIPT_NAME}]: Creating SPF, DKIM and DMARC DNS custom template file for Directadmin ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    {
      # Da version 1.61.6 (unreleased) is enabled by default for SPF this: https://www.directadmin.com/features.php?id=2946
      # Remember once it's released check this:
      echo "|DOMAIN|.=\"v=spf1 a mx ip4:|SERVER_IP||EXTRA_SPF| ~all\""
      echo "_dmarc=\"v=DMARC1; p=none; sp=none; rua=mailto:spam-reports@|DOMAIN|\""
      # Currently have issue using this '_domainkey' with API (GUI works): (fixed-added through API manually)
      # https://forum.directadmin.com/threads/possible-bug-when-using-dns_txt-conf-with-api-include-step-to-reproduce.63247/
      echo "_domainkey=\"o=~; r=webmaster@|DOMAIN|\""
      # Google site verification should be here
    } >"${da_template_custom}/dns_txt.conf"
    chmod 644 "${da_template_custom}/dns_txt.conf"
    chown diradmin:diradmin "${da_template_custom}/dns_txt.conf"
    {
      echo "|*if IS_IPV6!=""\"yes\"|"
      echo "|DOMAIN|.=|IP|"
      echo "mail=|IP|"
      echo "pop=|IP|"
      echo "www=|IP|"
      echo "ftp=|IP|"
      echo "smtp=|IP|"
      echo "|*endif|"
    } >"${da_template_custom}/dns_a.conf"
    chmod 644 "${da_template_custom}/dns_a.conf"

    {
      echo "|*if IS_IPV6=""\"yes\"|"
      echo "|DOMAIN|.=|IP|"
      echo "mail=|IP|"
      echo "pop=|IP|"
      echo "www=|IP|"
      echo "ftp=|IP|"
      echo "smtp=|IP|"
      echo "|*endif|"
    } >"${da_template_custom}/dns_aaaa.conf"
    chmod 644 "${da_template_custom}/dns_aaaa.conf"
    # Note last year I use the full form of IP. Remember DA also has ipv6 calculator from directadmin binary.
    ipv6_full_uncompressed=$(ipv6calc --addr2fulluncompaddr "${IPV6_ADD0}")
    echo "[${SCRIPT_NAME}]: Setting extra_spf_value with ipv6:${ipv6_full_uncompressed} ..." 2>&1 | tee -a "${REPORT_FILE}"
    sleep 1
    ${da_bin} set extra_spf_value " ip6:${ipv6_full_uncompressed}" 2>&1 | tee -a "${REPORT_FILE}"
    restart_da
    # rewrite_confs here so that dns_txt.conf is updated
    # Fixed DNS new record updated:
    echo "[${SCRIPT_NAME}]: Updating DNS template ..." 2>&1 | tee -a "${REPORT_FILE}"
    /usr/local/directadmin/custombuild/build rewrite_confs
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# Maybe we need to log into owner (so we fix the menu, time format etc)
# it's best not to use owner. Use admin instead to manage DA user for security purpose
function configure_da_owner_skins() {
  # We can customize this skin evolution based on this file /usr/local/directadmin/data/users/username/skin_customization/evolution/user_options.json
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    da_api_admin "signas+owner"

    # 1) misc options
    # Set the predefined setting
    da_api_admin "set-da-options" "evolution"

    # 2) configure the Skin Options from menu
    # a) Set logo
    # There is no official documentation how to upload a directadmin logo using API.
    # Da needs this home temporary folder to hold upload file
    mkdir -p /home/tmp
    default_logo_file="${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/logo/default_logo.png"
    # The upload file need to have random string append to it else it won't work:
    # https://forum.directadmin.com/threads/cmd_api_skins-upload-skin-logo-via-curl-issue.63127/
    # I use random length of 6 because I saw DA always generated length of 6 when append this random string to a file
    default_logo_file_home="/home/tmp/logo.png$(get_rnd_alpha 6)"
    dark_mode_logo_file="${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/logo/dark_mode_logo.png"
    dark_mode_logo_file_home="/home/tmp/logo2.png$(get_rnd_alpha 6)"

    # Copy the logo files from storage data to the temporary home directory
    cp "${default_logo_file}" "${default_logo_file_home}"
    cp "${dark_mode_logo_file}" "${dark_mode_logo_file_home}"

    # The files that need to be uploaded need to have nobody permission (else it wont work)
    chown nobody:nogroup "${default_logo_file_home}"
    chown nobody:nogroup "${dark_mode_logo_file_home}"

    if [ -f "${default_logo_file_home}" ]; then
      da_api_admin "set-da-logo" evolution default-logo "${default_logo_file_home}"
    else
      echo "[${SCRIPT_NAME}]: Warning, file logo is missing from ${default_logo_file_home}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    if [ -f "${dark_mode_logo_file_home}" ]; then
      da_api_admin "set-da-logo" evolution dark-logo "${dark_mode_logo_file_home}"
    else
      echo "[${SCRIPT_NAME}]: Warning, file logo is missing from ${dark_mode_logo_file_home}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    # Remove both temporary logo from the home directory
    rm -f "${default_logo_file_home}"
    rm -f "${dark_mode_logo_file_home}"

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Configure DA skins like set the time format, set logo (focus on Evolution Skin)
function configure_da_admin_skins() {
  # We can customize this skin evolution based on this file /usr/local/directadmin/data/users/username/skin_customization/evolution/user_options.json
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    da_api_admin "signas+admin"

    # 1) misc options
    # Set the predefined setting
    da_api_admin "set-da-options" "evolution"

    # 2) configure the Skin Options from menu
    # a) Set logo
    # There is no official documentation how to upload a directadmin logo using API.
    # Da needs this home temporary folder to hold upload file
    mkdir -p /home/tmp
    default_logo_file="${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/logo/default_logo.png"
    # The upload file need to have random string append to it else it won't work:
    # https://forum.directadmin.com/threads/cmd_api_skins-upload-skin-logo-via-curl-issue.63127/
    # I use random length of 6 because I saw DA always generated length of 6 when append this random string to a file
    default_logo_file_home="/home/tmp/logo.png$(get_rnd_alpha 6)"
    dark_mode_logo_file="${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/logo/dark_mode_logo.png"
    dark_mode_logo_file_home="/home/tmp/logo2.png$(get_rnd_alpha 6)"

    # Copy the logo files from storage data to the temporary home directory
    cp "${default_logo_file}" "${default_logo_file_home}"
    cp "${dark_mode_logo_file}" "${dark_mode_logo_file_home}"

    # The files that need to be uploaded need to have nobody permission (else it wont work)
    chown nobody:nogroup "${default_logo_file_home}"
    chown nobody:nogroup "${dark_mode_logo_file_home}"

    if [ -f "${default_logo_file_home}" ]; then
      da_api_admin "set-da-logo" evolution default-logo "${default_logo_file_home}"
    else
      echo "[${SCRIPT_NAME}]: Warning, file logo is missing from ${default_logo_file_home}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    if [ -f "${dark_mode_logo_file_home}" ]; then
      da_api_admin "set-da-logo" evolution dark-logo "${dark_mode_logo_file_home}"
    else
      echo "[${SCRIPT_NAME}]: Warning, file logo is missing from ${dark_mode_logo_file_home}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    # Remove both temporary logo from the home directory
    rm -f "${default_logo_file_home}"
    rm -f "${dark_mode_logo_file_home}"

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_reseller_skins() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    da_api_admin "signas+reseller"
    # 1) misc options
    # Set the predefined setting
    da_api_admin "set-da-options" "evolution"

    # 2) configure the Skin Options from menu
    # a) Set logo
    # There is no official documentation how to upload a directadmin logo using API.
    # Da needs this home temporary folder to hold upload file
    mkdir -p /home/tmp
    default_logo_file="${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/logo/default_logo.png"
    # The upload file need to have random string append to it else it won't work:
    # https://forum.directadmin.com/threads/cmd_api_skins-upload-skin-logo-via-curl-issue.63127/
    # I use random length of 6 because I saw DA always generated length of 6 when append this random string to a file
    default_logo_file_home="/home/tmp/logo.png$(get_rnd_alpha 6)"
    dark_mode_logo_file="${DATA_PATH}/maxinet/storage/os/${DISTRO_ID}/usr/local/directadmin/logo/dark_mode_logo.png"
    dark_mode_logo_file_home="/home/tmp/logo2.png$(get_rnd_alpha 6)"

    # Copy the logo files from storage data to the temporary home directory
    cp "${default_logo_file}" "${default_logo_file_home}"
    cp "${dark_mode_logo_file}" "${dark_mode_logo_file_home}"

    # The files that need to be uploaded need to have nobody permission (else it wont work)
    chown nobody:nogroup "${default_logo_file_home}"
    chown nobody:nogroup "${dark_mode_logo_file_home}"

    if [ -f "${default_logo_file_home}" ]; then
      da_api_admin "set-da-logo" evolution default-logo "${default_logo_file_home}"
    else
      echo "[${SCRIPT_NAME}]: Warning, file logo is missing from ${default_logo_file_home}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    if [ -f "${dark_mode_logo_file_home}" ]; then
      da_api_admin "set-da-logo" evolution dark-logo "${dark_mode_logo_file_home}"
    else
      echo "[${SCRIPT_NAME}]: Warning, file logo is missing from ${dark_mode_logo_file_home}" 2>&1 | tee -a "${REPORT_FILE}"
      _exit 147
    fi

    # Remove both temporary logo from the home directory
    rm -f "${default_logo_file_home}"
    rm -f "${dark_mode_logo_file_home}"

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_admin_admin_settings() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  ######
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_owner_accounts() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "Renaming owner account name to ${DA_OWNER_NAME1} ..."
    da_api_admin "signas+owner"
    da_api_admin "modify-user" "${DA_OWNER_USERNAME1}" "name" "${DA_OWNER_NAME1}"
    #echo "[${SCRIPT_NAME}]: Restarting directadmin before configuring Directadmin accounts ..." 2>&1 | tee -a "${REPORT_FILE}"
    #restart_da
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# This function is to configure da_admin accounts
# eg: You can create any extra admin accounts here or create multiple reseller packages.
# Note: Only DA owner or existing admin can create another admin account
function configure_da_admin_accounts() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # An owner account must exist (this script will complain if it doesn't exist)
    # We will use admin account to fully manage DA instead of owner for security but for API we only use DA owner account
    #echo "[${SCRIPT_NAME}]: Restarting directadmin before configuring Directadmin admin accounts ..." 2>&1 | tee -a "${REPORT_FILE}"
    #restart_da
    echo "[${SCRIPT_NAME}]: Creating new DA admin account ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
    # Must sign in as owner to create a new admin account. If sign in as admin you get error admin not exist
    # Start owner session to use API (it will automatically destroy after execution or use da_api_admin "end+owner" to destroy manually)
    # da_api_admin "signas+owner" means we sign-in as owner
    da_api_admin "signas+owner"
    # While signing as owner, we use this owner account to create an admin account in Directadmin using this syntax:
    da_api_admin "create-admin-account" "${DA_ADMIN_USERNAME1}" "${DA_ADMIN_SYSTEM_EMAIL1}" "${DA_ADMIN_USERPASS1}"
    echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
    echo ""
    echo ""
    echo "[${SCRIPT_NAME}]: Renaming admin account default name 'admin' to '${DA_ADMIN_NAME1}' ..."
    echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
    da_api_admin "modify-user" "${DA_ADMIN_USERNAME1}" "name" "${DA_ADMIN_NAME1}"
    echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
    echo ""
    echo ""
    # No need domain for admin for security
    # First create reseller unlimited package
    # Make sure admin account is created first (da_api_admin will check this)
    echo "[${SCRIPT_NAME}]: Creating a new unlimited package for resellers with the following name: ${DA_RESELLER_PACKAGE_NAME1} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
    # Use admin to create reseller package (dont use owner for security purpose)
    da_api_admin "signas+admin"
    da_api_admin "create-reseller-package" "${DA_RESELLER_PACKAGE_NAME1}"
    echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
    echo ""
    echo ""
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# Create reseller accounts here including packages and reseller and all domains
# For security purpose, all reseller users creation depend on admin account. So, we must create at least an admin account to manage this
# We will use this admin account to assign reseller package. After a reseller package is created then we can create reseller account
# In package creation, for security do not use anonymous FTP accounts, do not use SSH access
# Info & URL: Check if reseller package is created
# https://forum.directadmin.com/threads/server-migration-how-to-use-the-existing-configuration-during-setup.62937/
# https://forum.directadmin.com/threads/default-user-package-s-for-resellers.49156/

function configure_da_reseller_accounts() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_reseller_packages_list gc

    local da_reseller_unames da_reseller_count count_r

    local this_da_reseller_uname this_da_reseller_password this_da_reseller_system_email \
      this_da_reseller_mail_users this_da_reseller_mail_passwords this_da_reseller_domains \
      this_da_reseller_ip_type this_da_reseller_package_name this_da_reseller_enable_domain_ssl

    # Inside this file contains list of packages for admin and reseller (use this file for checking existing package)
    da_reseller_packages_list="/usr/local/directadmin/data/admin/packages.list"
    # Restarting Directadmin to clear pending Directadmin cron
    echo "[${SCRIPT_NAME}]: Restarting directadmin before configuring Directadmin accounts ..." 2>&1 | tee -a "${REPORT_FILE}"
    restart_da

    # Get reseller account information dynamically based on the config files:
    da_reseller_unames="${!DA_RESELLER_USERNAME@}"
    # Count the total number of reseller account from config file
    da_reseller_count=$(echo "${da_reseller_unames}" | wc -w)
    # Debug variables:
    echo "List of resellers information from config is: " 2>&1 | tee -a "${REPORT_FILE}"
    echo "==---==---==" 2>&1 | tee -a "${REPORT_FILE}"
    echo "${da_reseller_unames}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "Total reseller: ${da_reseller_count}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "==---==---==" 2>&1 | tee -a "${REPORT_FILE}"
    echo "" 2>&1 | tee -a "${REPORT_FILE}"

    # Adding reseller by looping
    count_r=1
    while [[ ${count_r} -le ${da_reseller_count} ]]; do
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      echo "=========== start DEBUG value ========="
      echo "Executing while loop: count=${count_r} while less than da_user_count ${da_reseller_count}"
      typeset -n "this_da_reseller_uname"="DA_RESELLER_USERNAME${count_r}"
      typeset -n "this_da_reseller_name"="DA_RESELLER_NAME${count_r}"
      typeset -n "this_da_reseller_password"="DA_RESELLER_USERPASS${count_r}"
      typeset -n "this_da_reseller_system_email"="DA_RESELLER_SYSTEM_EMAIL${count_r}"
      typeset -n "this_da_reseller_mail_users"="DA_RESELLER_MAIL_USER${count_r}"
      typeset -n "this_da_reseller_mail_passwords"="DA_RESELLER_MAIL_PASSWORD${count_r}"
      typeset -n "this_da_reseller_domains"="DA_RESELLER_DOMAIN${count_r}"
      typeset -n "this_da_reseller_ip_type"="DA_RESELLER_IP_TYPE${count_r}"
      typeset -n "this_da_reseller_package_name"="DA_RESELLER_PACKAGE_NAME${count_r}"
      typeset -n "this_da_reseller_enable_domain_ssl"="DA_RESELLER_ENABLE_DOMAIN_SSL${count_r}"
      echo ""
      echo "=========== start reseller value ========="
      echo "this_da_reseller_uname = ${this_da_reseller_uname}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_name = ${this_da_reseller_name}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_password = ${this_da_reseller_password}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_system_email = ${this_da_reseller_system_email}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_mail_users = ${this_da_reseller_mail_users[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_mail_passwords = ${this_da_reseller_mail_passwords[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_domains = ${this_da_reseller_domains[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_ip_type = ${this_da_reseller_ip_type}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_package_name = ${this_da_reseller_package_name}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_enable_domain_ssl = ${this_da_reseller_enable_domain_ssl}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "=========== end reseller value =========" 2>&1 | tee -a "${REPORT_FILE}"

      echo "[${SCRIPT_NAME}]: Checking if reseller package name ${this_da_reseller_package_name} was created by admin before ..." 2>&1 | tee -a "${REPORT_FILE}"
      #_pause 2
      gc=$(grep -ic "${this_da_reseller_package_name}" "${da_reseller_packages_list}")
      if [ "${gc}" -gt 0 ]; then
        # The total domain count for this reseller
        da_reseller_domain_count="${#this_da_reseller_domains[@]}"
        # The first domain is used to create account (default domain for that reseller)
        da_reseller_domain_first=$(echo "${this_da_reseller_domains[@]}" | awk '{ print $1 }')
        echo "-=-=-=-=-=-=-=" 2>&1 | tee -a "${REPORT_FILE}"
        echo "This reseller ${this_da_reseller_uname} has the following domain(s): " 2>&1 | tee -a "${REPORT_FILE}"
        echo "${this_da_reseller_domains}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Domain count: ${da_reseller_domain_count}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "The first domain is: ${da_reseller_domain_first}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "-=-=-=-=-=-=-=" 2>&1 | tee -a "${REPORT_FILE}"

        # Use admin to create reseller account and its default domain:
        #echo "[${SCRIPT_NAME}]: Authenticating Directadmin API as a default admin (first admin account) ..." 2>&1 | tee -a "${REPORT_FILE}"
        da_api_admin "signas+admin"
        echo "[${SCRIPT_NAME}]: Creating reseller account ${this_da_reseller_uname} using the following details: "
        #echo "Username: ${this_da_reseller_uname} | Email: ${this_da_reseller_system_email} | Password: ${this_da_reseller_password} | Default (First) domain: ${da_reseller_domain_first} | Package selection: ${this_da_reseller_package_name}"
        #_pause 2
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        da_api_admin "create-reseller-account" "${this_da_reseller_uname}" "${this_da_reseller_system_email}" "${this_da_reseller_password}" "${da_reseller_domain_first}" "${this_da_reseller_package_name}" "${this_da_reseller_ip_type}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        echo "[${SCRIPT_NAME}]: Renaming reseller account name to ${this_da_reseller_name} ..."
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        # Still use the admin signas above to modify reseller info here:
        da_api_admin "modify-user" "${this_da_reseller_uname}" "name" "${this_da_reseller_name}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        # Use each reseller account to enable its own email DKIM
        # Use reseller account to configure its own user-level variable settings like DKIM or DNS
        echo "[${SCRIPT_NAME}]: Enabling email DKIM for the domain ${da_reseller_domain_first} ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        #_pause 2
        da_api_admin "signas+${this_da_reseller_uname}+${this_da_reseller_password}"
        da_api_admin "enable-email-dkim" "${da_reseller_domain_first}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"

        # Still use the signas login above to create TXT record _domainkey for DKIM signing policy
        echo "[${SCRIPT_NAME}]: Creating DA TXT DNS for DKIM signing policy for ${da_reseller_domain_first} ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        da_api_admin "create-dns-record" "${da_reseller_domain_first}" "TXT" "_domainkey" "o%3D%7E%3B+r%3Dwebmaster%40${da_reseller_domain_first}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"

        # Get the DKIM DMARC and SPF record from Directadmin local DNS:
        echo "[${SCRIPT_NAME}]: Getting DKIM, DMARC and SPF records from Directadmin local DNS ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        dkim_val=$(da_api_admin "get-dns-zone" "${da_reseller_domain_first}" "x._domainkey+TXT+v=DKIM1+.value" | tail -n 1) || exit 147
        dkim_val_count=$(echo "${dkim_val}" | wc -l)
        dkim_policy_val=$(da_api_admin "get-dns-zone" "${da_reseller_domain_first}" "_domainkey+TXT+o=+.value" | tail -n 1) || exit 147
        dkim_policy_val_count=$(echo "${dkim_policy_val}" | wc -l)
        dmarc_val=$(da_api_admin "get-dns-zone" "${da_reseller_domain_first}" "_dmarc+TXT+v=DMARC1+.value" | tail -n 1) || exit 147
        dmarc_val_count=$(echo "${dmarc_val}" | wc -l)
        spf_val=$(da_api_admin "get-dns-zone" "${da_reseller_domain_first}" "${da_reseller_domain_first}.+TXT+v=spf1+.value" | tail -n 1) || exit 147
        spf_val_count=$(echo "${spf_val}" | wc -l)
        echo "There is/are ${dkim_val_count} dkim value for this reseller domain ${da_reseller_domain_first}. First value is: ${dkim_val}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "There is/are ${dkim_policy_val_count} dkim policy value for this domain ${da_reseller_domain_first}. First value is: ${dkim_policy_val}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "There is/are ${dmarc_val_count} dmarc value for this reseller domain ${da_reseller_domain_first}. First value is: ${dmarc_val}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "There is/are ${spf_val_count} spf value for this reseller domain ${da_reseller_domain_first}. First value is: ${spf_val}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"
        echo "" 2>&1 | tee -a "${REPORT_FILE}"

        if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
          echo "[${SCRIPT_NAME}]: External DNS provider for domain ${da_reseller_domain_first} is set to linode [Using linode API ...]" 2>&1 | tee -a "${REPORT_FILE}"
          echo "***"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          echo "[${SCRIPT_NAME}]: Creating domain ${da_reseller_domain_first} in linode DNS management ..."
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"

          linode_api_admin "create-domain" "master" "${da_reseller_domain_first}" "${this_da_reseller_system_email}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          # For mx record, linode_api_admin "add-dns-record" "maxibi.com" "MX" "mail" "sofibox.com." "5"
          echo "[${SCRIPT_NAME}]: Creating MX record for ${da_reseller_domain_first} in linode DNS management ..."
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "add-dns-record" "${da_reseller_domain_first}" "MX" "mail" "${da_reseller_domain_first}." "5"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[${SCRIPT_NAME}]: Deleting external DNS record on linode for domain ${da_reseller_domain_first} ... "
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "[linode delete-dns-record]: Name: _domainkey | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "delete-dns-record" "${da_reseller_domain_first}" "_domainkey" "TXT"
          echo "[linode delete-dns-record]: Name: x._domainkey | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "delete-dns-record" "${da_reseller_domain_first}" "x._domainkey" "TXT"
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          echo "[linode delete-dns-record]: Name: _dmarc | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "delete-dns-record" "${da_reseller_domain_first}" "_dmarc" "TXT" 2>&1 | tee -a "${REPORT_FILE}"
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          echo "[linode delete-dns-record]: Name: empty-string | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "delete-dns-record" "${da_reseller_domain_first}" "" "TXT" 2>&1 | tee -a "${REPORT_FILE}"
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          echo "End of deletion DNS record on linode ======= " 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[${SCRIPT_NAME}]: Adding external DNS record on linode for domain ${da_reseller_domain_first} ... "
          echo "[linode add-dns-record]: Name: _domainkey | Value: ${dkim_policy_val} | Type: TXT | TTL: 5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "add-dns-record" "${da_reseller_domain_first}" "TXT" "_domainkey" "${dkim_policy_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[linode add-dns-record]: Name: x._domainkey | Value: ${dkim_val} | Type: TXT | TTL: 5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "add-dns-record" "${da_reseller_domain_first}" "TXT" "x._domainkey" "${dkim_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[linode add-dns-record]: Name: _dmarc | Value: ${dmarc_val} | Type: TXT | TTL: 5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "add-dns-record" "${da_reseller_domain_first}" "TXT" "_dmarc" "${dmarc_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[linode add-dns-record]: Name: ${da_reseller_domain_first} | Value: ${spf_val} | Type: TXT | TTL: 5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "add-dns-record" "${da_reseller_domain_first}" "TXT" "${da_reseller_domain_first}" "${spf_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          echo "End of creation DNS record on linode ======= " 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
        elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then
          echo "[${SCRIPT_NAME}]: External DNS provider for domain ${da_reseller_domain_first} is set to digitalocean [Using digitalocean API ...]" 2>&1 | tee -a "${REPORT_FILE}"
          # Call digitalocean_api_admin
        #elif other provider
        elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
          echo "[${SCRIPT_NAME}]: External DNS provider for domain ${da_reseller_domain_first} is set to local" 2>&1 | tee -a "${REPORT_FILE}"
          # Do nothing because it's local DNS managed by Directadmin
        fi

        # This will be executed if reseller has more than 1 domains. We add the extra domains here and skipped the default domain:
        if [ "${da_reseller_domain_count}" -gt 1 ]; then
          echo "[${SCRIPT_NAME}]: This reseller ${this_da_reseller_uname} has ${da_reseller_domain_count} domain(s)" 2>&1 | tee -a "${REPORT_FILE}"
          #sleep 1
          echo ""
          for extra_domain in "${this_da_reseller_domains[@]}"; do
            # Don't add first domain, we did that before (when we first create user account, DA automatically add this default domain)
            if [ "${extra_domain}" == "${da_reseller_domain_first}" ]; then
              echo "[${SCRIPT_NAME}]: Skipped adding the default domain: ${da_reseller_domain_first}"
              #sleep 1
              continue
            fi

            echo "[${SCRIPT_NAME}]: Creating extra domain ${extra_domain} for reseller ${this_da_reseller_uname} ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            #_pause 2
            # Calling reseller authentication
            #echo "[${SCRIPT_NAME}]: Authenticating Directadmin API for reseller ${this_da_reseller_uname} ..." 2>&1 | tee -a "${REPORT_FILE}"
            da_api_admin "signas+${this_da_reseller_uname}+${this_da_reseller_password}"
            da_api_admin "create-reseller-domain" "${extra_domain}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"

            echo "[${SCRIPT_NAME}]: Enabling email DKIM for extra domain ${extra_domain} for reseller ${this_da_reseller_uname} ..." 2>&1 | tee -a "${REPORT_FILE}"
            #_pause 2
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            da_api_admin "enable-email-dkim" "${extra_domain}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"

            echo "[${SCRIPT_NAME}]: Creating DA TXT DNS for DKIM signing policy for ${extra_domain} ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            da_api_admin "create-dns-record" "${extra_domain}" "TXT" "_domainkey" "o%3D%7E%3B+r%3Dwebmaster%40${extra_domain}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"

            echo "[${SCRIPT_NAME}]: Getting DKIM, DMARC and SPF records from Directadmin local DNS ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            # Make sure if duplicated entry found, just return 147 line with tail -n 1
            dkim_val=$(da_api_admin "get-dns-zone" "${extra_domain}" "x._domainkey+TXT+v=DKIM1+.value" | tail -n 1) || exit 147
            dkim_val_count=$(echo "${dkim_val}" | wc -l)
            dkim_policy_val=$(da_api_admin "get-dns-zone" "${extra_domain}" "_domainkey+TXT+o=+.value" | tail -n 1) || exit 147
            dkim_policy_val_count=$(echo "${dkim_policy_val}" | wc -l)
            dmarc_val=$(da_api_admin "get-dns-zone" "${extra_domain}" "_dmarc+TXT+v=DMARC1+.value" | tail -n 1) || exit 147
            dmarc_val_count=$(echo "${dmarc_val}" | wc -l)
            spf_val=$(da_api_admin "get-dns-zone" "${extra_domain}" "${extra_domain}.+TXT+v=spf1+.value" | tail -n 1) || exit 147
            spf_val_count=$(echo "${spf_val}" | wc -l)
            echo "There is/are ${dkim_val_count} dkim value for this extra_domain ${extra_domain}. First value is: ${dkim_val}"
            echo "There is/are ${dmarc_val_count} dmarc value for this extra_domain ${extra_domain}. First value is: ${dmarc_val}"
            echo "There is/are ${spf_val_count} spf value for this extra_domain ${extra_domain}. First value is: ${spf_val}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"

            if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
              echo "[${SCRIPT_NAME}]: External DNS provider for extra domain ${extra_domain} is set to linode [Using linode API ...]" 2>&1 | tee -a "${REPORT_FILE}"
              echo "***"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              echo "[${SCRIPT_NAME}]: Creating domain ${extra_domain} in linode DNS management ..."
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"

              linode_api_admin "create-domain" "master" "${extra_domain}" "${this_da_reseller_system_email}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              # For mx record, linode_api_admin "add-dns-record" "maxibi.com" "MX" "mail" "sofibox.com." "5"
              echo "[${SCRIPT_NAME}]: Creating MX record for ${extra_domain} in linode DNS management ..."
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "add-dns-record" "${extra_domain}" "MX" "mail" "${extra_domain}." "5"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "[${SCRIPT_NAME}]: Deleting external DNS record on linode for domain ${extra_domain} ... "
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "[linode delete-dns-record]: Name: _domainkey | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "delete-dns-record" "${extra_domain}" "_domainkey" "TXT"
              echo "[linode delete-dns-record]: Name: x._domainkey | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "delete-dns-record" "${extra_domain}" "x._domainkey" "TXT"
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              echo "[linode delete-dns-record]: Name: _dmarc | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "delete-dns-record" "${extra_domain}" "_dmarc" "TXT" 2>&1 | tee -a "${REPORT_FILE}"
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              echo "[linode delete-dns-record]: Name: empty-string | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "delete-dns-record" "${extra_domain}" "" "TXT" 2>&1 | tee -a "${REPORT_FILE}"
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              echo "End of deletion DNS record on linode ======= " 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "[${SCRIPT_NAME}]: Adding external DNS record on linode for domain ${extra_domain} ... "
              echo "[linode add-dns-record]: Name: _domainkey | Value: ${dkim_policy_val} | Type: TXT | TTL: 5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "add-dns-record" "${extra_domain}" "TXT" "_domainkey" "${dkim_policy_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "[linode add-dns-record]: Name: x._domainkey | Value: ${dkim_val} | Type: TXT | TTL: 5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "add-dns-record" "${extra_domain}" "TXT" "x._domainkey" "${dkim_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "[linode add-dns-record]: Name: _dmarc | Value: ${dmarc_val} | Type: TXT | TTL: 5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "add-dns-record" "${extra_domain}" "TXT" "_dmarc" "${dmarc_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "[linode add-dns-record]: Name: ${extra_domain} | Value: ${spf_val} | Type: TXT | TTL: 5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "add-dns-record" "${extra_domain}" "TXT" "${extra_domain}" "${spf_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              echo "End of creation DNS record on linode ======= " 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

            elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then
              echo "[${SCRIPT_NAME}]: External DNS provider for domain ${extra_domain} is set to digitalocean [Using digitalocean API ...]" 2>&1 | tee -a "${REPORT_FILE}"
              # Call digitalocean_api_admin
            #elif other provider
            elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
              echo "[${SCRIPT_NAME}]: External DNS provider for domain ${extra_domain} is set to local" 2>&1 | tee -a "${REPORT_FILE}"
              # Do nothing because it's local DNS managed by Directadmin
            fi
          done # End looping for adding extra domains
        fi
      else
        echo "[${SCRIPT_NAME}]: Warning, ${this_da_reseller_package_name} does not exist in ${da_reseller_packages_list}. Please inspect why!" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
      echo "*** Total count: ${count_r} ***" 2>&1 | tee -a "${REPORT_FILE}"
      ((count_r++))
      #sleep 10
      echo "--" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
    done # End looping

    # Now we create user unlimited package. A reseller account is needed to create user package (da_api_admin will check this condition)
    # We use reseller account to create user package:

    # Assign DA_USER_PACKAGE_NAME1 because it's the first package for user
    echo "[${SCRIPT_NAME}]: Creating user unlimited package with the following name: ${DA_USER_PACKAGE_NAME1} ..." 2>&1 | tee -a "${REPORT_FILE}"
    echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
    #_pause 2
    #echo "[${SCRIPT_NAME}]: Authenticating DA API for user for default reseller user ..." 2>&1 | tee -a "${REPORT_FILE}"
    da_api_admin "signas+reseller"
    da_api_admin "create-user-package" "${DA_USER_PACKAGE_NAME1}"
    echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
    echo "" 2>&1 | tee -a "${REPORT_FILE}"
    echo "" 2>&1 | tee -a "${REPORT_FILE}"

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_reseller_root_domains() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_reseller_domains da_reseller_domains_count this_da_reseller_username this_da_reseller_userpass \
      this_da_reseller_domains this_da_reseller_domains_count
    local count_x count_n count_o domain
    # Get list of all reseller subdomains
    da_reseller_domains="${!DA_RESELLER_DOMAIN@}"
    # Count the total domains
    da_reseller_domains_count=$(echo "${da_reseller_domains}" | wc -w)
    # Debug:
    echo "da_reseller_domains: ${da_reseller_domains}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_reseller_domains_count ${da_reseller_domains_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # initial value to loop
    count_x=1
    while [[ ${count_x} -le ${da_reseller_domains_count} ]]; do
      echo "Count_x: ${count_x}"
      echo "DA_RESELLER_DOMAINS_COUNT ${da_reseller_domains_count}"
      echo "=~=~=~=~=~=~=~=~=~+~+~+~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_reseller_domain_loop = ${count_x}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      typeset -n "this_da_reseller_username"="DA_RESELLER_USERNAME${count_x}"
      typeset -n "this_da_reseller_userpass"="DA_RESELLER_USERPASS${count_x}"

      this_da_reseller_domains=$(cat "/usr/local/directadmin/data/users/${this_da_reseller_username}/domains.list")
      # Debug:
      echo "this_da_reseller_username: ${this_da_reseller_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_userpass: ${this_da_reseller_userpass}" 2>&1 | tee -a "${REPORT_FILE}"

      echo "this_da_reseller_domains: ${this_da_reseller_domains[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      this_da_reseller_domains_count=$(echo "${this_da_reseller_domains}" | wc -w)
      echo "this_da_reseller_domains_count: ${this_da_reseller_domains_count}"
      count_n=1
      while [ ${count_n} -le "${this_da_reseller_domains_count}" ]; do
        echo "------------------------" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Total count: ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"
        count_o=0
        for domain in ${this_da_reseller_domains}; do
          echo "count_o: ${count_o}"
          # Debug
          echo "domain is set: ${domain}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[${SCRIPT_NAME}]: Creating root domain ${domain} for both IPv4 and IPv6 ..." 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          da_api_admin "signas+${this_da_reseller_username}+${this_da_reseller_userpass}"
          # Note if record exist, it won't create in DA
          da_api_admin "create-dns-record" "${domain}" "A" "${domain}." "${IPV4_ADD0}"
          da_api_admin "create-dns-record" "${domain}" "AAAA" "${domain}." "$(ipv6calc --addr2uncompaddr "${IPV6_ADD0}")"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
            # In linode DNS record are duplicated, we don't want so must delete previous record first before adding new
            echo "[${SCRIPT_NAME}]: DNS provider is set to linode. Using linode API" 2>&1 | tee -a "${REPORT_FILE}"

            echo "[${SCRIPT_NAME}]: Deleting root ${domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            # In linode empty there means hostname or I can use @ or try domain.com
            linode_api_admin "delete-dns-record" "${domain}" "" "A"
            linode_api_admin "delete-dns-record" "${domain}" "" "AAAA"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"

            # Also add wildcard domain for linode API here
            echo "[${SCRIPT_NAME}]: Adding wildcard domain ${domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            #In linode empty there means hostname or I can use @ or try domain.com
            linode_api_admin "add-dns-record" "${domain}" "A" "" "${IPV4_ADD0}" "5"
            linode_api_admin "add-dns-record" "${domain}" "AAAA" "" "${IPV6_ADD0}" "5"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
          elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to digitalocean" 2>&1 | tee -a "${REPORT_FILE}"
            # Call digitalocean_api_admin
            #elif other provider
          elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to local (Internal DNS)" 2>&1 | tee -a "${REPORT_FILE}"
            # Do nothing
          fi
          ((count_o++))
        done
        ((count_n++))
      done
      ((count_x++))
    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
function configure_da_reseller_wildcard_domains() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_reseller_wildcard_domains da_reseller_wildcard_domains_count this_da_reseller_username this_da_reseller_userpass \
      this_da_reseller_wildcard_domains this_da_reseller_wildcard_domains_count
    local count_x count_n count_o wildcard_domain wildcard_domains
    # Get list of all reseller subdomains
    da_reseller_wildcard_domains="${!DA_RESELLER_WILDCARD_DOMAIN@}"
    # Count the total wildcard domains
    da_reseller_wildcard_domains_count=$(echo "${da_reseller_wildcard_domains}" | wc -w)
    # Debug:
    echo "da_reseller_wildcard_domains: ${da_reseller_wildcard_domains}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_reseller_wildcard_domains_count ${da_reseller_wildcard_domains_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # initial value to loop
    count_x=1
    while [[ ${count_x} -le ${da_reseller_wildcard_domains_count} ]]; do
      echo "=~=~=~=~=~=~=~=~=~+~+~+~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_reseller_wildcard_domain_loop = ${count_x}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      typeset -n "this_da_reseller_username"="DA_RESELLER_USERNAME${count_x}"
      typeset -n "this_da_reseller_userpass"="DA_RESELLER_USERPASS${count_x}"
      typeset -n "this_da_reseller_wildcard_domains"="DA_RESELLER_WILDCARD_DOMAIN${count_x}"

      # Debug:
      echo "this_da_reseller_username: ${this_da_reseller_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_userpass: ${this_da_reseller_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_wildcard_domains: ${this_da_reseller_wildcard_domains[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      this_da_reseller_wildcard_domains_count="${#this_da_reseller_wildcard_domains[@]}"

      count_n=0
      while [ ${count_n} -le $((this_da_reseller_wildcard_domains_count - 1)) ]; do
        echo "------------------------" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Total count: ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"

        wildcard_domains=$(echo "${this_da_reseller_wildcard_domains}" | awk -F':' '{for (i=1;i<=NF;i++)print $i}') #or tr ":" "\n"
        count_o=0
        for wildcard_domain in ${wildcard_domains}; do
          echo "count_o: ${count_o}"
          # Debug
          echo "wildcard_domain is set for domain: ${wildcard_domain}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[${SCRIPT_NAME}]: Creating wildcard entry for domain ${wildcard_domain} for both IPv4 and IPv6 ..." 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          da_api_admin "signas+${this_da_reseller_username}+${this_da_reseller_userpass}"
          # By default DA don't create wildcard entry for this domain (unless wildcard option is enabled)
          # Note if record exist, it won't create in DA
          da_api_admin "create-dns-record" "${wildcard_domain}" "A" "*" "${IPV4_ADD0}"
          da_api_admin "create-dns-record" "${wildcard_domain}" "AAAA" "*" "$(ipv6calc --addr2uncompaddr "${IPV6_ADD0}")"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
            # In linode DNS record are duplicated, we don't want so must delete previous record first before adding new
            echo "[${SCRIPT_NAME}]: DNS provider is set to linode. Using linode API" 2>&1 | tee -a "${REPORT_FILE}"

            echo "[${SCRIPT_NAME}]: Deleting subdomain ${wildcard_domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            linode_api_admin "delete-dns-record" "${wildcard_domain}" "*" "A"
            linode_api_admin "delete-dns-record" "${wildcard_domain}" "*" "AAAA"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"

            # Also add wildcard domain for linode API here
            echo "[${SCRIPT_NAME}]: Adding wildcard domain ${wildcard_domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            #linode_api_admin "add-dns-record" "maxibi.com" "TXT" "x._domainkey" "*i..2uiu1KJM@#9IU@J()!@IJI92" "5"
            linode_api_admin "add-dns-record" "${wildcard_domain}" "A" "*" "${IPV4_ADD0}" "5"
            linode_api_admin "add-dns-record" "${wildcard_domain}" "AAAA" "*" "${IPV6_ADD0}" "5"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
          elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to digitalocean" 2>&1 | tee -a "${REPORT_FILE}"
            # Call digitalocean_api_admin
            #elif other provider
          elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to local (Internal DNS)" 2>&1 | tee -a "${REPORT_FILE}"
            # Do nothing
          fi
          ((count_o++))
        done
        ((count_n++))
      done
      ((count_x++))
    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# This will create user accounts and domains
function configure_da_user_accounts() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_packages_list gc count #da_admin_packages_list
    local da_user_unames                 #da_user_passwords da_user_emails da_user_domains da_user_package_names
    local this_da_user_uname this_da_user_password this_da_user_system_email this_da_user_mail_users
    local this_da_user_mail_passwords this_da_user_domains this_da_user_package_name this_da_user_enable_domain_ssl
    local da_user_count
    local dkim_val dmarc_val spf_val

    da_user_packages_list="/usr/local/directadmin/data/users/${DA_RESELLER_USERNAME1}/packages.list"
    # ALL API documentation: https://www.directadmin.com/search_versions.php?query=CMD_API
    # Create CURL action for API: https://help.directadmin.com/item.php?id=580
    # How to debug API: https://help.directadmin.com/item.php?id=356
    # https://help.directadmin.com/item.php?id=293

    # Create user dynamically based on config files
    da_user_unames="${!DA_USER_USERNAME@}"
    da_user_count=$(echo "${da_user_unames}" | wc -w)
    echo "List of users information from config is: " 2>&1 | tee -a "${REPORT_FILE}"
    echo "---==---" 2>&1 | tee -a "${REPORT_FILE}"
    echo "${da_user_unames}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "Total: ${da_user_count}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "---==---" 2>&1 | tee -a "${REPORT_FILE}"
    local count_user
    count_user=1
    while [[ ${count_user} -le ${da_user_count} ]]; do
      echo "Executing while loop: count=${count_user} while less or equal to da_user_count ${da_user_count}"
      typeset -n "this_da_user_uname"="DA_USER_USERNAME${count_user}"
      typeset -n "this_da_user_password"="DA_USER_USERPASS${count_user}"
      typeset -n "this_da_user_name"="DA_USER_NAME${count_user}"
      typeset -n "this_da_user_system_email"="DA_USER_SYSTEM_EMAIL${count_user}"
      typeset -n "this_da_user_mail_users"="DA_USER_MAIL_USER${count_user}"
      typeset -n "this_da_user_mail_passwords"="DA_USER_MAIL_PASSWORD${count_user}"
      typeset -n "this_da_user_domains"="DA_USER_DOMAIN${count_user}"
      typeset -n "this_da_user_package_name"="DA_USER_PACKAGE_NAME${count_user}"
      typeset -n "this_da_user_enable_domain_ssl"="DA_USER_ENABLE_DOMAIN_SSL${count_user}"

      echo "=========== start user value ========="
      echo "this_da_user_uname = ${this_da_user_uname}"
      echo "this_da_user_password = ${this_da_user_password}"
      echo "this_da_user_name = ${this_da_user_name}"
      echo "this_da_user_system_email = ${this_da_user_system_email}"
      echo "this_da_user_mail_users = ${this_da_user_mail_users}"
      echo "this_da_user_mail_passwords = ${this_da_user_mail_passwords}"
      echo "this_da_user_domains = ${this_da_user_domains}"
      echo "this_da_user_package_name = ${this_da_user_package_name}"
      echo "this_da_user_enable_domain_ssl = ${this_da_user_enable_domain_ssl}"
      echo "=========== end user value ========="
      echo ""

      echo "Checking user package ${this_da_user_package_name} ..."
      #_pause 2
      gc=$(grep -ic "${this_da_user_package_name}" "${da_user_packages_list}")
      if [ "${gc}" -gt 0 ]; then
        echo "[${SCRIPT_NAME}]: [${SCRIPT_NAME}]: Found package ${this_da_user_package_name}" 2>&1 | tee -a "${REPORT_FILE}"
        # The total domain count for this user
        da_user_domain_count="${#this_da_user_domains[@]}"
        # The first domain is used to create account (default domain for that user)
        da_user_domain_first=$(echo "${this_da_user_domains[@]}" | awk '{ print $1 }')
        echo "-=-=-=-=-=-=-="
        echo "This user ${this_da_user_uname} has the following ${da_user_domain_count} domain(s): "
        echo "${this_da_user_domains}"
        echo "The first domain is: ${da_user_domain_first}"
        echo "-=-=-=-=-=-=-="
        echo "[${SCRIPT_NAME}]: Authenticating DA API for user for default reseller user ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "Creating user account ${this_da_user_uname} using the following details: "
        echo "Username: ${this_da_user_uname} | Email: ${this_da_user_system_email} | Password: ${this_da_user_password} | Default (First) domain: ${da_user_domain_first} | Package selection: ${this_da_user_package_name}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
        #_pause 2
        # Use reseller to create user account and its default domain:
        da_api_admin "signas+reseller"
        da_api_admin "create-user-account" "${this_da_user_uname}" "${this_da_user_system_email}" "${this_da_user_password}" "${da_user_domain_first}" "${this_da_user_package_name}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
        echo "[${SCRIPT_NAME}]: Renaming user account name to ${this_da_user_name} ..."
        da_api_admin "modify-user" "${this_da_user_uname}" "name" "${this_da_user_name}"
        echo "[${SCRIPT_NAME}]: Enabling email DKIM for the domain ${da_user_domain_first} ..." 2>&1 | tee -a "${REPORT_FILE}"
        # Use user account to configure variable settings like DKIM or DNS
        da_api_admin "signas+${this_da_user_uname}+${this_da_user_password}"
        da_api_admin "enable-email-dkim" "${da_user_domain_first}"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"

        echo "[${SCRIPT_NAME}]: Creating DA TXT DNS for DKIM signing policy for ${da_user_domain_first} ..." 2>&1 | tee -a "${REPORT_FILE}"
        echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
        da_api_admin "create-dns-record" "${da_user_domain_first}" "TXT" "_domainkey" "o%3D%7E%3B+r%3Dwebmaster%40${da_user_domain_first}"
        echo "-----" 2>&1 | tee -a "${REPORT_FILE}"

        # START DEBUG:
        #da_api_admin "get-dns-zone" "${da_user_domain_first}" "x._domainkey+TXT+v=DKIM1+.value"
        #da_api_admin "get-dns-zone" "${da_user_domain_first}" "_dmarc+TXT+v=DMARC1+.value"
        #da_api_admin "get-dns-zone" "${da_user_domain_first}" "${da_user_domain_first}.+TXT+v=spf1+.value"
        #exit 147
        # END DEBUG
        # Make sure if duplicated entry found, just return 147 line with tail -n 1

        dkim_val=$(da_api_admin "get-dns-zone" "${da_user_domain_first}" "x._domainkey+TXT+v=DKIM1+.value" | tail -n 1) || exit 147
        dkim_val_count=$(echo "${dkim_val}" | wc -l)
        dkim_policy_val=$(da_api_admin "get-dns-zone" "${da_user_domain_first}" "_domainkey+TXT+o=+.value" | tail -n 1) || exit 147
        dkim_policy_val_count=$(echo "${dkim_policy_val}" | wc -l)
        dmarc_val=$(da_api_admin "get-dns-zone" "${da_user_domain_first}" "_dmarc+TXT+v=DMARC1+.value" | tail -n 1) || exit 147
        dmarc_val_count=$(echo "${dmarc_val}" | wc -l)
        spf_val=$(da_api_admin "get-dns-zone" "${da_user_domain_first}" "${da_user_domain_first}.+TXT+v=spf1+.value" | tail -n 1) || exit 147
        spf_val_count=$(echo "${spf_val}" | wc -l)

        echo "=-=-=-=-=-=-=-=-=-=-"
        echo "There is/are ${dkim_val_count} dkim value for this domain ${da_user_domain_first}. First value is: ${dkim_val}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "There is/are ${dkim_policy_val_count} dkim policy value for this domain ${da_user_domain_first}. First value is: ${dkim_policy_val}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "There is/are ${dmarc_val_count} dmarc value for this domain ${da_user_domain_first}. First value is: ${dmarc_val}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "There is/are ${spf_val_count} spf value for this domain ${da_user_domain_first}. First value is: ${spf_val}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "=-=-=-=-=-=-=-=-=-=-"
        echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"

        if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
          echo "[${SCRIPT_NAME}]: DNS provider is set to linode. Using linode API" 2>&1 | tee -a "${REPORT_FILE}"
          echo "[${SCRIPT_NAME}]: Creating domain ${da_user_domain_first} if missing ..."
          linode_api_admin "create-domain" "master" "${da_user_domain_first}" "${this_da_user_system_email}"
          echo "0) Name: _domainkey | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          echo "-----" 2>&1 | tee -a "${REPORT_FILE}"

          # For mx record, linode_api_admin "add-dns-record" "maxibi.com" "MX" "mail" "sofibox.com." "5"
          echo "[${SCRIPT_NAME}]: Creating MX record for ${da_user_domain_first} in linode DNS management ..."
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          linode_api_admin "add-dns-record" "${da_user_domain_first}" "MX" "mail" "${da_user_domain_first}." "5"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          linode_api_admin "delete-dns-record" "${da_user_domain_first}" "_domainkey" "TXT"

          echo "Deleting dns record x._domainkey for ${da_user_domain_first}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          linode_api_admin "delete-dns-record" "${da_user_domain_first}" "x._domainkey" "TXT"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "Deleting dns record _dmarc. for ${da_user_domain_first}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          linode_api_admin "delete-dns-record" "${da_user_domain_first}" "_dmarc" "TXT" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "Deleting dns record for ${da_user_domain_first}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          linode_api_admin "delete-dns-record" "${da_user_domain_first}" "" "TXT" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "Adding DKIM outbound signing policy DNS record ..."
          linode_api_admin "add-dns-record" "${da_user_domain_first}" "TXT" "_domainkey" "${dkim_policy_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"

          echo "Adding record for x._domainkey for ${da_user_domain_first}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          linode_api_admin "add-dns-record" "${da_user_domain_first}" "TXT" "x._domainkey" "${dkim_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "Adding record for _dmarc for ${da_user_domain_first}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          linode_api_admin "add-dns-record" "${da_user_domain_first}" "TXT" "_dmarc" "${dmarc_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "Adding dns record for ${da_user_domain_first} with empty name (provide the hostname)" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          #_pause 2
          linode_api_admin "add-dns-record" "${da_user_domain_first}" "TXT" "${da_user_domain_first}" "${spf_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

        elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then

          echo "[${SCRIPT_NAME}]: DNS provider is set to digitalocean" 2>&1 | tee -a "${REPORT_FILE}"

          # Call digitalocean_api_admin
        #elif other provider
        elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
          echo "[${SCRIPT_NAME}]: DNS provider is set to local (Internal DNS)" 2>&1 | tee -a "${REPORT_FILE}"
          # Do nothing because it's local DNS managed by DA
        fi

        # This will be executed if user has more than 1 domains. We add the extra domains here and skipped the default domain:
        if [ "${da_user_domain_count}" -gt 1 ]; then
          echo "[${SCRIPT_NAME}]: This user ${this_da_user_uname} has more than 1 domains" 2>&1 | tee -a "${REPORT_FILE}"
          #sleep 1
          echo ""
          for extra_domain in "${this_da_user_domains[@]}"; do
            # Don't add first domain, we did that before
            if [ "${extra_domain}" == "${da_user_domain_first}" ]; then
              echo "[${SCRIPT_NAME}]: Skipped adding the default domain: ${da_user_domain_first}"
              #sleep 1
              continue
            fi

            echo "[${SCRIPT_NAME}]: Creating extra domain ${extra_domain} for ${this_da_user_uname} ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
            #_pause 2
            da_api_admin "signas+${this_da_user_uname}+${this_da_user_password}"
            da_api_admin "create-user-domain" "${extra_domain}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
            echo ""

            echo "[${SCRIPT_NAME}]: Enabling email DKIM for extra domain ${extra_domain} for user ${this_da_user_uname} ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
            #_pause 2
            da_api_admin "signas+${this_da_user_uname}+${this_da_user_password}"
            da_api_admin "enable-email-dkim" "${extra_domain}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
            echo ""

            echo "[${SCRIPT_NAME}]: Creating DA TXT DNS for DKIM signing policy for ${extra_domain} ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "-----" 2>&1 | tee -a "${REPORT_FILE}"

            da_api_admin "create-dns-record" "${extra_domain}" "TXT" "_domainkey" "o%3D%7E%3B+r%3Dwebmaster%40${extra_domain}"
            echo "-----" 2>&1 | tee -a "${REPORT_FILE}"

            echo "[${SCRIPT_NAME}]: Querying DNS record ..." 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
            # Make sure if duplicated entry found, just return 147 line with tail -n 1
            dkim_val=$(da_api_admin "get-dns-zone" "${extra_domain}" "x._domainkey+TXT+v=DKIM1+.value" | tail -n 1) || exit 147
            dkim_val_count=$(echo "${dkim_val}" | wc -l)
            dkim_policy_val=$(da_api_admin "get-dns-zone" "${extra_domain}" "_domainkey+TXT+o=+.value" | tail -n 1) || exit 147
            dkim_policy_val_count=$(echo "${dkim_policy_val}" | wc -l)
            dmarc_val=$(da_api_admin "get-dns-zone" "${extra_domain}" "_dmarc+TXT+v=DMARC1+.value" | tail -n 1) || exit 147
            dmarc_val_count=$(echo "${dmarc_val}" | wc -l)
            spf_val=$(da_api_admin "get-dns-zone" "${extra_domain}" "${extra_domain}.+TXT+v=spf1+.value" | tail -n 1) || exit 147
            spf_val_count=$(echo "${spf_val}" | wc -l)

            echo "=-=-=-=-=-=-=-=-=-=-"
            echo "There is/are ${dkim_val_count} dkim value for this extra_domain ${extra_domain}. First value is: ${dkim_val}"
            echo "There is/are ${dkim_policy_val_count} dkim policy value for this domain ${extra_domain}. First value is: ${dkim_policy_val}" 2>&1 | tee -a "${REPORT_FILE}"
            echo "There is/are ${dmarc_val_count} dmarc value for this extra_domain ${extra_domain}. First value is: ${dmarc_val}"
            echo "There is/are ${spf_val_count} spf value for this extra_domain ${extra_domain}. First value is: ${spf_val}"
            echo "=-=-=-=-=-=-=-=-=-=-"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
            echo ""

            if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
              echo "[${SCRIPT_NAME}]: DNS provider is set to linode. Using linode API" 2>&1 | tee -a "${REPORT_FILE}"
              echo "[${SCRIPT_NAME}]: Creating domain ${extra_domain} if missing ..."
              linode_api_admin "create-domain" "master" "${extra_domain}" "${this_da_user_system_email}"

              # For mx record, linode_api_admin "add-dns-record" "maxibi.com" "MX" "mail" "sofibox.com." "5"
              echo "[${SCRIPT_NAME}]: Creating MX record for ${extra_domain} in linode DNS management ..."
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "add-dns-record" "${extra_domain}" "MX" "mail" "${extra_domain}." "5"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "0) Name: _domainkey | Type: TXT" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              echo "-----" 2>&1 | tee -a "${REPORT_FILE}"
              linode_api_admin "delete-dns-record" "${extra_domain}" "_domainkey" "TXT"
              echo "Deleting dns record x._domainkey for ${extra_domain}" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              linode_api_admin "delete-dns-record" "${extra_domain}" "x._domainkey" "TXT"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "Deleting dns record _dmarc. for ${extra_domain}" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              linode_api_admin "delete-dns-record" "${extra_domain}" "_dmarc" "TXT" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "Deleting dns record for ${extra_domain}" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              linode_api_admin "delete-dns-record" "${extra_domain}" "" "TXT" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "Adding DKIM outbound signing policy DNS record ..."
              linode_api_admin "add-dns-record" "${extra_domain}" "TXT" "_domainkey" "${dkim_policy_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"

              echo "Adding record for x._domainkey for ${extra_domain}" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              linode_api_admin "add-dns-record" "${extra_domain}" "TXT" "x._domainkey" "${dkim_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "Adding record for _dmarc for ${extra_domain}" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              linode_api_admin "add-dns-record" "${extra_domain}" "TXT" "_dmarc" "${dmarc_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"

              echo "Adding dns record for ${extra_domain} with empty name (provide the hostname)" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              #_pause 2
              linode_api_admin "add-dns-record" "${extra_domain}" "TXT" "${extra_domain}" "${spf_val}" "5" 2>&1 | tee -a "${REPORT_FILE}"
              echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
              echo "" 2>&1 | tee -a "${REPORT_FILE}"
            elif
              [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]
            then
              echo "[${SCRIPT_NAME}]: DNS provider is set to digitalocean" 2>&1 | tee -a "${REPORT_FILE}"
              # Call digitalocean_api_admin
            #elif other provider
            elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
              echo "[${SCRIPT_NAME}]: DNS provider is set to local (Internal DNS)" 2>&1 | tee -a "${REPORT_FILE}"
              # Do nothing because it's local DNS managed by DA
            fi
          done
        fi
      else
        echo "[${SCRIPT_NAME}]: Warning, ${this_da_user_package_name} does not exist in ${da_user_packages_list}. Please inspect why!" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi

      ((count_user++))
      echo "count_user is now: ${count_user}" 2>&1 | tee -a "${REPORT_FILE}"
      #sleep 10
    done

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_user_root_domains() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_domains da_user_domains_count this_da_user_username this_da_user_userpass \
      this_da_user_domains this_da_user_domains_count
    local count_x count_n count_o domain
    # Get list of all user subdomains
    da_user_domains="${!DA_USER_DOMAIN@}"
    # Count the total domains
    da_user_domains_count=$(echo "${da_user_domains}" | wc -w)
    # Debug:
    echo "da_user_domains: ${da_user_domains}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_user_domains_count ${da_user_domains_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # initial value to loop
    count_x=1
    while [[ ${count_x} -le ${da_user_domains_count} ]]; do
      echo "Count_x: ${count_x}"
      echo "DA_USER_DOMAINS_COUNT ${da_user_domains_count}"
      echo "=~=~=~=~=~=~=~=~=~+~+~+~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_user_domain_loop = ${count_x}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      typeset -n "this_da_user_username"="DA_USER_USERNAME${count_x}"
      typeset -n "this_da_user_userpass"="DA_USER_USERPASS${count_x}"

      this_da_user_domains=$(cat "/usr/local/directadmin/data/users/${this_da_user_username}/domains.list")
      # Debug:
      echo "this_da_user_username: ${this_da_user_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_userpass: ${this_da_user_userpass}" 2>&1 | tee -a "${REPORT_FILE}"

      echo "this_da_user_domains: ${this_da_user_domains[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      this_da_user_domains_count=$(echo "${this_da_user_domains}" | wc -w)
      echo "this_da_user_domains_count: ${this_da_user_domains_count}"
      count_n=1
      while [ ${count_n} -le "${this_da_user_domains_count}" ]; do
        echo "------------------------" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Total count: ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"
        count_o=0
        for domain in ${this_da_user_domains}; do
          echo "count_o: ${count_o}"
          # Debug
          echo "domain is set: ${domain}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[${SCRIPT_NAME}]: Creating root domain ${domain} for both IPv4 and IPv6 ..." 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          da_api_admin "signas+${this_da_user_username}+${this_da_user_userpass}"
          # Note if record exist, it won't create in DA
          da_api_admin "create-dns-record" "${domain}" "A" "${domain}." "${IPV4_ADD0}"
          da_api_admin "create-dns-record" "${domain}" "AAAA" "${domain}." "$(ipv6calc --addr2uncompaddr "${IPV6_ADD0}")"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
            # In linode DNS record are duplicated, we don't want so must delete previous record first before adding new
            echo "[${SCRIPT_NAME}]: DNS provider is set to linode. Using linode API" 2>&1 | tee -a "${REPORT_FILE}"

            echo "[${SCRIPT_NAME}]: Deleting root ${domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            # In linode empty there means hostname or I can use @ or try domain.com
            linode_api_admin "delete-dns-record" "${domain}" "" "A"
            linode_api_admin "delete-dns-record" "${domain}" "" "AAAA"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"

            # Also add wildcard domain for linode API here
            echo "[${SCRIPT_NAME}]: Adding wildcard domain ${domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            #In linode empty there means hostname or I can use @ or try domain.com
            linode_api_admin "add-dns-record" "${domain}" "A" "" "${IPV4_ADD0}" "5"
            linode_api_admin "add-dns-record" "${domain}" "AAAA" "" "${IPV6_ADD0}" "5"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
          elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to digitalocean" 2>&1 | tee -a "${REPORT_FILE}"
            # Call digitalocean_api_admin
            #elif other provider
          elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to local (Internal DNS)" 2>&1 | tee -a "${REPORT_FILE}"
            # Do nothing
          fi
          ((count_o++))
        done
        ((count_n++))
      done
      ((count_x++))
    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_user_wildcard_domains() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_wildcard_domains da_user_wildcard_domains_count this_da_user_username this_da_user_userpass \
      this_da_user_wildcard_domains this_da_user_wildcard_domains_count
    local count_x count_n count_o wildcard_domain wildcard_domains
    # Get list of all user wildcard domains
    da_user_wildcard_domains="${!DA_USER_WILDCARD_DOMAIN@}"
    # Count the total subdomains
    da_user_wildcard_domains_count=$(echo "${da_user_wildcard_domains}" | wc -w)
    # Debug:
    echo "da_user_wildcard_domains: ${da_user_wildcard_domains}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_user_wildcard_domains_count ${da_user_wildcard_domains_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # initial value to loop
    count_x=1
    while [[ ${count_x} -le ${da_user_wildcard_domains_count} ]]; do
      echo "=~=~=~=~=~=~=~=~=~+~+~+~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_user_wildcard_domain_loop = ${count_x}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      typeset -n "this_da_user_username"="DA_USER_USERNAME${count_x}"
      typeset -n "this_da_user_userpass"="DA_USER_USERPASS${count_x}"
      typeset -n "this_da_user_wildcard_domains"="DA_USER_WILDCARD_DOMAIN${count_x}"

      # Debug:
      echo "this_da_user_username: ${this_da_user_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_userpass: ${this_da_user_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_wildcard_domains: ${this_da_user_wildcard_domains[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      this_da_user_wildcard_domains_count="${#this_da_user_wildcard_domains[@]}"

      count_n=0
      while [ ${count_n} -le $((this_da_user_wildcard_domains_count - 1)) ]; do
        echo "------------------------" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Total count: ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"

        wildcard_domains=$(echo "${this_da_user_wildcard_domains}" | awk -F':' '{for (i=1;i<=NF;i++)print $i}') #or tr ":" "\n"
        count_o=0
        for wildcard_domain in ${wildcard_domains}; do
          echo "count_o: ${count_o}"
          # Debug
          echo "wildcard_domain is set for domain: ${wildcard_domain}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          echo "[${SCRIPT_NAME}]: Creating wildcard entry for domain ${wildcard_domain} for both IPv4 and IPv6 ..." 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          da_api_admin "signas+${this_da_user_username}+${this_da_user_userpass}"
          # By default DA don't create wildcard entry for this domain (unless wildcard option is enabled)
          # Note if record exist, it won't create in DA
          da_api_admin "create-dns-record" "${wildcard_domain}" "A" "*" "${IPV4_ADD0}"
          da_api_admin "create-dns-record" "${wildcard_domain}" "AAAA" "*" "$(ipv6calc --addr2uncompaddr "${IPV6_ADD0}")"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
            # In linode DNS record are duplicated, we don't want so must delete previous record first before adding new
            echo "[${SCRIPT_NAME}]: DNS provider is set to linode. Using linode API" 2>&1 | tee -a "${REPORT_FILE}"

            echo "[${SCRIPT_NAME}]: Deleting subdomain ${wildcard_domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            linode_api_admin "delete-dns-record" "${wildcard_domain}" "*" "A"
            linode_api_admin "delete-dns-record" "${wildcard_domain}" "*" "AAAA"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"

            # Also add wildcard domain for linode API here
            echo "[${SCRIPT_NAME}]: Adding wildcard domain ${wildcard_domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            #linode_api_admin "add-dns-record" "maxibi.com" "TXT" "x._domainkey" "*i..2uiu1KJM@#9IU@J()!@IJI92" "5"
            linode_api_admin "add-dns-record" "${wildcard_domain}" "A" "*" "${IPV4_ADD0}" "5"
            linode_api_admin "add-dns-record" "${wildcard_domain}" "AAAA" "*" "${IPV6_ADD0}" "5"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
          elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to digitalocean" 2>&1 | tee -a "${REPORT_FILE}"
            # Call digitalocean_api_admin
            #elif other provider
          elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to local (Internal DNS)" 2>&1 | tee -a "${REPORT_FILE}"
            # Do nothing
          fi
          ((count_o++))
        done
        ((count_n++))
      done
      ((count_x++))
    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_reseller_subdomains() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_reseller_subdomains da_reseller_subdomains_count this_da_reseller_username this_da_reseller_userpass \
      this_da_reseller_subdomains this_da_reseller_subdomains_count
    local count_x count_n count_o sub_domain sub_domains_raw sub_domains root_domain
    # Get list of all reseller subdomains
    da_reseller_subdomains="${!DA_RESELLER_SUBDOMAIN@}"
    # Count the total subdomains
    da_reseller_subdomains_count=$(echo "${da_reseller_subdomains}" | wc -w)
    # Debug:
    echo "da_reseller_subdomains: ${da_reseller_subdomains}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_reseller_subdomains_count ${da_reseller_subdomains_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # initial value to loop
    count_x=1
    while [[ ${count_x} -le ${da_reseller_subdomains_count} ]]; do
      echo "=~=~=~=~=~=~=~=~=~+~+~+~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_reseller_domain_loop = ${count_x}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      typeset -n "this_da_reseller_username"="DA_RESELLER_USERNAME${count_x}"
      typeset -n "this_da_reseller_userpass"="DA_RESELLER_USERPASS${count_x}"
      typeset -n "this_da_reseller_subdomains"="DA_RESELLER_SUBDOMAIN${count_x}"

      # Error checking:
      if [ -z "${this_da_reseller_username}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user name is set in config file for this reseller ${this_da_reseller_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_reseller_userpass}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user password is set in config file for this user ${this_da_reseller_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_reseller_subdomains}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user subdomains is set for this user ${this_da_reseller_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi

      # Debug:
      echo "this_da_reseller_username: ${this_da_reseller_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_userpass: ${this_da_reseller_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_subdomains: ${this_da_reseller_subdomains[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      this_da_reseller_subdomains_count="${#this_da_reseller_subdomains[@]}"

      count_n=0
      while [ ${count_n} -le $((this_da_reseller_subdomains_count - 1)) ]; do
        echo "------------------------" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Total count: ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"

        # Deprecated syntax
        #sub_domain=$(echo "${this_da_reseller_subdomains[count_n]}" | awk -F'+' '{ print $1 }')
        #root_domain=$(echo "${this_da_reseller_subdomains[count_n]}" | awk -F'+' '{ print $2 }')

        root_domain=$(echo "${this_da_reseller_subdomains[count_n]}" | awk -F':' '{ print $1 }')
        sub_domains_raw=$(echo "${this_da_reseller_subdomains[count_n]}" | awk -F':' '{ print $2 }')
        # Debug

        sub_domains=$(echo "${sub_domains_raw}" | awk -F'+' '{for (i=1;i<=NF;i++)print $i}')
        count_o=0
        for sub_domain in ${sub_domains}; do
          echo "count_o: ${count_o}"
          # Debug
          echo "Sub_domain is: ${sub_domain}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "Root_domain is: ${root_domain}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          # Now we got sub_domain and root_domain, call the da_api_admin:
          # reseller and user share the same API
          # da_api_admin "create-user-subdomain" "<root_domain>" "<subdomain>"
          # Start the user login authentication:
          echo "[${SCRIPT_NAME}]: Creating reseller ${this_da_reseller_username} subdomain ${sub_domain}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          da_api_admin "signas+${this_da_reseller_username}+${this_da_reseller_userpass}"
          da_api_admin "create-user-subdomain" "${root_domain}" "${sub_domain}"
          echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"
          if [ "${DNS_PROVIDER_NAME}" == "linode" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to linode. Using linode API" 2>&1 | tee -a "${REPORT_FILE}"
            # Also add subdomain for linode API here
            #linode_api_admin "delete-dns-record" <domain_name> <record_name> <record_type>
            echo "[${SCRIPT_NAME}]: Deleting subdomain ${sub_domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            linode_api_admin "delete-dns-record" "${root_domain}" "${sub_domain}" "A"
            linode_api_admin "delete-dns-record" "${root_domain}" "${sub_domain}" "AAAA"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
            echo "[${SCRIPT_NAME}]: Adding subdomain ${sub_domain} record for IPv4 and IPv6 from linode" 2>&1 | tee -a "${REPORT_FILE}"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            #linode_api_admin "add-dns-record" "maxibi.com" "TXT" "x._domainkey" "*i..2uiu1KJM@#9IU@J()!@IJI92" "5"
            linode_api_admin "add-dns-record" "${root_domain}" "A" "${sub_domain}" "${IPV4_ADD0}" "5"
            linode_api_admin "add-dns-record" "${root_domain}" "AAAA" "${sub_domain}" "${IPV6_ADD0}" "5"
            echo "~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
            echo "" 2>&1 | tee -a "${REPORT_FILE}"
          elif [ "${DNS_PROVIDER_NAME}" == "digitalocean" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to digitalocean" 2>&1 | tee -a "${REPORT_FILE}"
            # Call digitalocean_api_admin
            #elif other provider
          elif [ "${DNS_PROVIDER_NAME}" == "local" ]; then
            echo "[${SCRIPT_NAME}]: DNS provider is set to local (Internal DNS)" 2>&1 | tee -a "${REPORT_FILE}"
            # Do nothing
          fi
          ((count_o++))
        done
        ((count_n++))
      done
      ((count_x++))
    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_user_subdomains() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_subdomains da_user_subdomains_count this_da_user_username this_da_user_userpass this_da_user_subdomains
    local this_da_user_subdomains_count
    local count_x count_n sub_domain sub_domains sub_domains_raw root_domain
    # Get list of all user subdomains
    da_user_subdomains="${!DA_USER_SUBDOMAIN@}"
    # Count the total subdomains
    da_user_subdomains_count=$(echo "${da_user_subdomains}" | wc -w)
    # Debug:
    echo "da_user_subdomains: ${da_user_subdomains}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_user_subdomains_count ${da_user_subdomains_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # initial value to loop
    count_x=1
    while [[ ${count_x} -le ${da_user_subdomains_count} ]]; do
      echo "=~=~=~=~=~=~=~=~=~+~+~+~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_user_domain = ${count_x}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      typeset -n "this_da_user_username"="DA_USER_USERNAME${count_x}"
      typeset -n "this_da_user_userpass"="DA_USER_USERPASS${count_x}"
      #typeset -n "this_da_user_domains"="DA_USER_DOMAIN${count_x}"
      typeset -n "this_da_user_subdomains"="DA_USER_SUBDOMAIN${count_x}"

      # Error checking:
      if [ -z "${this_da_user_username}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_name is set in config file for this user ${this_da_user_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_user_userpass}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_password is set in config file for this user ${this_da_user_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      #elif [ -z "${this_da_user_domains}" ]; then
      #  echo "[${SCRIPT_NAME}]: [Skipped]: Warning, user domains not set for this user ${this_da_user_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
      #  _exit 147
      elif [ -z "${this_da_user_subdomains}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, user subdomains not set for this user ${this_da_user_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi

      # Debug:
      #this_da_user_domains="${this_da_user_domains[*]}"
      echo "this_da_user_username: ${this_da_user_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_userpass: ${this_da_user_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      #echo "this_da_user_domains: ${this_da_user_domains[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_subdomains: ${this_da_user_subdomains[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      this_da_user_subdomains_count="${#this_da_user_subdomains[@]}"

      count_n=0
      while [ ${count_n} -le $((this_da_user_subdomains_count - 1)) ]; do
        echo "------------------------" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Total count: ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"

        # sub_domain=$(echo "${this_da_user_subdomains[count_n]}" | awk -F'+' '{ print $1 }')
        # root_domain=$(echo "${this_da_user_subdomains[count_n]}" | awk -F'+' '{ print $2 }')

        root_domain=$(echo "${this_da_user_subdomains[count_n]}" | awk -F':' '{ print $1 }')
        sub_domains_raw=$(echo "${this_da_user_subdomains[count_n]}" | awk -F':' '{ print $2 }')

        sub_domains=$(echo "${sub_domains_raw}" | awk -F'+' '{for (i=1;i<=NF;i++)print $i}')
        count_o=0
        for sub_domain in ${sub_domains}; do
          echo "count_o: ${count_o}"
          # Debug
          echo "Sub_domain is: ${sub_domain}" 2>&1 | tee -a "${REPORT_FILE}"
          echo "Root_domain is: ${root_domain}" 2>&1 | tee -a "${REPORT_FILE}"
          # Now we got sub_domain and root_domain, call the da_api_admin:
          # da_api_admin "create-user-subdomain" "<root_domain>" "<subdomain>"
          # Start the user login authentication:
          da_api_admin "signas+${this_da_user_username}+${this_da_user_userpass}"
          da_api_admin "create-user-subdomain" "${root_domain}" "${sub_domain}"
          # Also add subdomain for linode API here

          #linode_api_admin "delete-dns-record" <domain_name> <record_name> <record_type>
          linode_api_admin "delete-dns-record" "${root_domain}" "${sub_domain}" "A"
          linode_api_admin "delete-dns-record" "${root_domain}" "${sub_domain}" "AAAA"

          #linode_api_admin "add-dns-record" "maxibi.com" "TXT" "x._domainkey" "*i..2uiu1KJM@#9IU@J()!@IJI92" "5"
          linode_api_admin "add-dns-record" "${root_domain}" "A" "${sub_domain}" "${IPV4_ADD0}" "5"
          linode_api_admin "add-dns-record" "${root_domain}" "AAAA" "${sub_domain}" "${IPV6_ADD0}" "5"
          echo "" 2>&1 | tee -a "${REPORT_FILE}"

          ((count_o++))
        done

        ((count_n++))
      done

      ((count_x++))
    done

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
function configure_da_reseller_emails() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_reseller_mail_users da_reseller_mail_users_count count_x
    local this_da_reseller_username this_da_reseller_userpass this_da_reseller_mail_users \
      this_da_reseller_mail_passwords this_da_reseller_mail_users_count this_da_reseller_mail_password_count
    local count_n mail_user mail_domain
    # Get all variables set for DA_RESELLER_MAIL_USER[index]:
    da_reseller_mail_users="${!DA_RESELLER_MAIL_USER@}"
    # Calculate the total for the total variable of DA_USER_MAIL_USER
    da_reseller_mail_users_count=$(echo "${da_reseller_mail_users}" | wc -w)
    # Debug:
    echo "DA_RESELLER_MAIL_USERS: ${da_reseller_mail_users}"
    echo "DA_RESELLER_MAIL_USERS_COUNT: ${da_reseller_mail_users_count}"
    # Initial value to start looping
    count_x=1
    while [[ ${count_x} -le ${da_reseller_mail_users_count} ]]; do
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
      echo "COUNT_MAIL_USER INDEX = ${count_x}"
      echo ""
      # Assign all variables from the config file as array index
      typeset -n "this_da_reseller_username"="DA_RESELLER_USERNAME${count_x}"
      typeset -n "this_da_reseller_userpass"="DA_RESELLER_USERPASS${count_x}"
      typeset -n "this_da_reseller_mail_users"="DA_RESELLER_MAIL_USER${count_x}"
      typeset -n "this_da_reseller_mail_passwords"="DA_RESELLER_MAIL_PASSWORD${count_x}"
      # Error checking for missing variable values:
      if [ -z "${this_da_reseller_username}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_name is set in config file for this reseller ${this_da_reseller_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_reseller_userpass}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_password is set in config file for this reseller ${this_da_reseller_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_reseller_mail_users}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_emails is set in config file for this reseller ${this_da_reseller_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_reseller_mail_passwords}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_email_passwords is set in config file for this reseller ${this_da_reseller_username}. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ ${#this_da_reseller_mail_users[@]} -ne ${#this_da_reseller_mail_passwords[@]} ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, mail users and mail passwords defined with different length of array" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      else
        this_da_reseller_mail_users_count="${#this_da_reseller_mail_users[@]}"
        this_da_reseller_mail_password_count="${#this_da_reseller_mail_passwords[@]}"
        # Debug
        echo "this_da_reseller_mail_users: ${this_da_reseller_mail_users[*]}"
        echo "this_da_reseller_mail_passwords: ${this_da_reseller_mail_passwords[*]}"
        echo "mail_reseller_count: ${this_da_reseller_mail_users_count}"
        echo "mail_password_count: ${this_da_reseller_mail_password_count}"
        count_n=0
        while [ ${count_n} -le $((this_da_reseller_mail_users_count - 1)) ]; do
          echo "=~=~=~=~+~Count: ${count_n}+~+~=~+~+~+~+"

          mail_user=$(echo "${this_da_reseller_mail_users[count_n]}" | awk -F'@' '{ print $1 }')
          mail_domain=$(echo "${this_da_reseller_mail_users[count_n]}" | awk -F'@' '{ print $2 }')
          mail_password=${this_da_reseller_mail_passwords[count_n]}

          echo "DA reseller_username: ${this_da_reseller_username}"
          echo "DA reseller_userpass: ${this_da_reseller_userpass}"
          echo "The full user email address: [${count_n}]: ${this_da_reseller_mail_users[count_n]}"
          echo "The mail_username (no @domain.com): ${mail_user}"
          echo "The mail_domain: ${mail_domain}"
          echo "The mail_password:[${count_n}]: ${this_da_reseller_mail_passwords[count_n]}"
          echo "=~=~=~=~+~+~+~=~+~+=~+~+=~+~+=~+~+=~+=~+~+"
          # Now we got all variables for creating email:
          # Call API here:
          da_api_admin "signas+${this_da_reseller_username}+${this_da_reseller_userpass}"
          # Reseller and user share the same API
          da_api_admin "create-user-email" "${mail_domain}" "${mail_user}" "${mail_password}" "0" "200"
          ((count_n++))
        done
        ((count_x++))
        echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
      fi
    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_user_emails() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_mail_users da_user_mail_users_count count_mail_user
    local this_da_user_username this_da_user_userpass this_da_user_mail_users this_da_user_mail_passwords
    local this_da_user_mail_users_count this_da_user_mail_password_count
    local count_n mail_user mail_domain
    # Get all variables set for DA_USER_MAIL_USER[index]:
    da_user_mail_users="${!DA_USER_MAIL_USER@}"
    # Calculate the total for the total variable of DA_USER_MAIL_USER
    da_user_mail_users_count=$(echo "${da_user_mail_users}" | wc -w)
    # Debug:
    echo "DA_USER_MAIL_USERS: ${da_user_mail_users}"
    echo "DA_USER_MAIL_USERS_COUNT: ${da_user_mail_users_count}"
    # Initial value to start looping
    count_mail_user=1
    while [[ ${count_mail_user} -le ${da_user_mail_users_count} ]]; do
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
      echo "COUNT_MAIL_USER INDEX = ${count_mail_user}"
      echo ""
      # Assign all variables from the config file as array index
      typeset -n "this_da_user_username"="DA_USER_USERNAME${count_mail_user}"
      typeset -n "this_da_user_userpass"="DA_USER_USERPASS${count_mail_user}"
      typeset -n "this_da_user_mail_users"="DA_USER_MAIL_USER${count_mail_user}"
      typeset -n "this_da_user_mail_passwords"="DA_USER_MAIL_PASSWORD${count_mail_user}"
      # Error checking for missing variable values:
      if [ -z "${this_da_user_username}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_name is set in config file for this mail_user. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_user_userpass}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_password is set in config file for this mail_user. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_user_mail_users}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_emails is set in config file for this mail_user. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ -z "${this_da_user_mail_passwords}" ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, no user_email_passwords is set in config file for this mail_user. Please check configuration file " 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      elif [ ${#this_da_user_mail_users[@]} -ne ${#this_da_user_mail_passwords[@]} ]; then
        echo "[${SCRIPT_NAME}]: [Skipped]: Warning, mail users and mail passwords defined with different length of array" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      else
        this_da_user_mail_users_count="${#this_da_user_mail_users[@]}"
        this_da_user_mail_password_count="${#this_da_user_mail_passwords[@]}"
        # Debug
        echo "this_da_user_mail_users: ${this_da_user_mail_users[*]}"
        echo "this_da_user_mail_passwords: ${this_da_user_mail_passwords[*]}"
        echo "mail_user_count: ${this_da_user_mail_users_count}"
        echo "mail_password_count: ${this_da_user_mail_password_count}"
        count_n=0
        while [ ${count_n} -le $((this_da_user_mail_users_count - 1)) ]; do
          echo "=~=~=~=~+~Count: ${count_n}+~+~=~+~+~+~+"

          mail_user=$(echo "${this_da_user_mail_users[count_n]}" | awk -F'@' '{ print $1 }')
          mail_domain=$(echo "${this_da_user_mail_users[count_n]}" | awk -F'@' '{ print $2 }')
          mail_password=${this_da_user_mail_passwords[count_n]}

          echo "DA user_username: ${this_da_user_username}"
          echo "DA user_userpass: ${this_da_user_userpass}"
          echo "The full user email address: [${count_n}]: ${this_da_user_mail_users[count_n]}"
          echo "The mail_username (no @domain.com): ${mail_user}"
          echo "The mail_domain: ${mail_domain}"
          echo "The mail_password:[${count_n}]: ${this_da_user_mail_passwords[count_n]}"
          echo "=~=~=~=~+~+~+~=~+~+=~+~+=~+~+=~+~+=~+=~+~+"
          # Now we got all variables for creating email:
          # Call API here:
          da_api_admin "signas+${this_da_user_username}+${this_da_user_userpass}"
          da_api_admin "create-user-email" "${mail_domain}" "${mail_user}" "${mail_password}" "0" "200"
          ((count_n++))
        done
        ((count_mail_user++))
        echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
      fi
    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_reseller_domain_ssl_pre() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_reseller_ssl_sub_names da_reseller_ssl_sub_names_count count_x count_n count_o
    local this_da_reseller_uname this_da_reseller_userpass this_da_reseller_enable_domain_ssl \
      this_da_reseller_ssl_sub_names retval le_select_query
    # Get all the reseller ssl_sub_names
    da_reseller_ssl_sub_names="${!DA_RESELLER_SSL_SUB_NAME@}"
    # Get the total count for reseller ssl_sub_names
    da_reseller_ssl_sub_names_count=$(echo "${da_reseller_ssl_sub_names}" | wc -w)
    count_x=1
    echo "[${SCRIPT_NAME}]: Creating acme-challenge file through custombuild rewrite_confs ..." 2>&1 | tee -a "${REPORT_FILE}"
    /usr/local/directadmin/custombuild/build rewrite_confs
    while [[ ${count_x} -le ${da_reseller_ssl_sub_names_count} ]]; do
      echo ""
      echo "===== Loop count: ${count_x} ========="
      typeset -n "this_da_reseller_username"="DA_RESELLER_USERNAME${count_x}"
      typeset -n "this_da_reseller_userpass"="DA_RESELLER_USERPASS${count_x}"
      typeset -n "this_da_reseller_enable_domain_ssl"="DA_RESELLER_ENABLE_DOMAIN_SSL${count_x}"
      typeset -n "this_da_reseller_ssl_sub_names"="DA_RESELLER_SSL_SUB_NAME${count_x}"

      echo "this_da_reseller_username: ${this_da_reseller_username}"
      echo "this_da_reseller_userpass: ${this_da_reseller_userpass}"
      echo "this_da_reseller_enable_domain_ssl: ${this_da_reseller_enable_domain_ssl}"
      echo "this_da_reseller_ssl_sub_names: ${this_da_reseller_ssl_sub_names[*]}"
      this_da_reseller_ssl_sub_names_count=${#this_da_reseller_ssl_sub_names[@]}
      echo "this_da_reseller_ssl_sub_names_count: ${this_da_reseller_ssl_sub_names_count}"
      echo "=========================================="

      if [[ ${this_da_reseller_enable_domain_ssl} == "yes" ]]; then
        echo ""
        echo "OK, This reseller is set to enable SSL"
        count_n=0
        while [ ${count_n} -le $((this_da_reseller_ssl_sub_names_count - 1)) ]; do
          echo ""

          ssl_provider=$(echo "${this_da_reseller_ssl_sub_names[count_n]}" | awk -F':' '{ print $1 }')
          ssl_domain=$(echo "${this_da_reseller_ssl_sub_names[count_n]}" | awk -F':' '{ print $2 }')
          ssl_subdomains_raw=$(echo "${this_da_reseller_ssl_sub_names[count_n]}" | awk -F':' '{ print $3 }')
          # Debug
          # echo "==============---count_n = ${count_n} ---==============="
          # echo "SSL_PROVIDER: ${ssl_provider}"
          # echo "SSL_DOMAIN: ${ssl_domain}"
          # echo "SSL_SUBDOMAINS_RAW: ${ssl_subdomains_raw}"

          if [ "${ssl_provider}" == "letsencrypt" ]; then
            echo "Testing, requesting letsencrypt SSL certificate for domain ${ssl_domain} in staging mode ..."
            staging=yes /usr/local/directadmin/scripts/letsencrypt.sh request_single "${ssl_domain}"
            retval=$?
            if [ ${retval} -ne 0 ]; then
              echo "Warning, this domain ${ssl_domain} has issue when requesting ssl certificate in staging mode"
            else
              echo "OK, this domain ${ssl_domain} has no issue when requesting ssl certificate in staging mode"
            fi

            count_o=0
            le_select_query=""
            for ssl_subdomain in ${ssl_subdomains}; do
              if [ ${count_o} = 0 ]; then
                le_select[${count_o}]="${ssl_domain}"
                echo "Count OO: ${le_select_query}"
              else
                le_select[${count_o}]="${ssl_subdomain}.${ssl_domain}"
                echo "Count > 00: ${le_select_query}"
              fi
              ((count_o++))
            done
          elif [ "${ssl_provider}" == "digicert" ]; then
            :
          fi
          ((count_n++))
        done
      elif [[ ${this_da_user_enable_domain_ssl} == "no" ]]; then
        echo "Warning This user is set to not enable SSL. Do nothing for this"
      fi
      echo ""
      ((count_x++))

    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_user_domain_ssl_pre() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_ssl_sub_names da_user_ssl_sub_names_count
    local this_da_user_uname this_da_user_userpass this_da_user_enable_domain_ssl \
      this_da_user_ssl_sub_names retval
    # Get all the user ssl_sub_names
    da_user_ssl_sub_names="${!DA_USER_SSL_SUB_NAME@}"
    # Get the total count for user ssl_sub_names
    da_user_ssl_sub_names_count=$(echo "${da_user_ssl_sub_names}" | wc -w)
    count_x=1
    echo "[${SCRIPT_NAME}]: Creating acme-challenge file through custombuild rewrite_confs ..." 2>&1 | tee -a "${REPORT_FILE}"
    /usr/local/directadmin/custombuild/build rewrite_confs
    while [[ ${count_x} -le ${da_user_ssl_sub_names_count} ]]; do
      echo ""
      echo "===== Loop count: ${count_x} ========="
      typeset -n "this_da_user_username"="DA_USER_USERNAME${count_x}"
      typeset -n "this_da_user_userpass"="DA_USER_USERPASS${count_x}"
      typeset -n "this_da_user_enable_domain_ssl"="DA_USER_ENABLE_DOMAIN_SSL${count_x}"
      typeset -n "this_da_user_ssl_sub_names"="DA_USER_SSL_SUB_NAME${count_x}"

      echo "this_da_user_username: ${this_da_user_username}"
      echo "this_da_user_userpass: ${this_da_user_userpass}"
      echo "this_da_user_enable_domain_ssl: ${this_da_user_enable_domain_ssl}"
      echo "this_da_user_ssl_sub_names: ${this_da_user_ssl_sub_names[*]}"
      this_da_user_ssl_sub_names_count=${#this_da_user_ssl_sub_names[@]}
      echo "=========================================="

      if [[ ${this_da_user_enable_domain_ssl} == "yes" ]]; then
        echo ""
        echo "OK, This user is set to enable SSL"
        count_n=0
        while [ ${count_n} -le $((this_da_user_ssl_sub_names_count - 1)) ]; do
          echo ""

          ssl_provider=$(echo "${this_da_user_ssl_sub_names[count_n]}" | awk -F':' '{ print $1 }')
          ssl_domain=$(echo "${this_da_user_ssl_sub_names[count_n]}" | awk -F':' '{ print $2 }')
          ssl_subdomains_raw=$(echo "${this_da_user_ssl_sub_names[count_n]}" | awk -F':' '{ print $3 }')
          # Debug
          # echo "==============---count_n = ${count_n} ---==============="
          # echo "SSL_PROVIDER: ${ssl_provider}"
          # echo "SSL_DOMAIN: ${ssl_domain}"
          # echo "SSL_SUBDOMAINS_RAW: ${ssl_subdomains_raw}"

          if [ "${ssl_provider}" == "letsencrypt" ]; then
            echo "Testing, requesting letsencrypt SSL certificate for domain ${ssl_domain} in staging mode ..."
            staging=yes /usr/local/directadmin/scripts/letsencrypt.sh request_single "${ssl_domain}"
            retval=$?
            if [ ${retval} -ne 0 ]; then
              echo "Warning, this domain ${ssl_domain} has issue when requesting ssl certificate in staging mode"
            else
              echo "OK, this domain ${ssl_domain} has no issue when requesting ssl certificate in staging mode"
            fi
          elif [ "${ssl_provider}" == "digicert" ]; then
            :
          fi
          ((count_n++))
        done
      elif [[ ${this_da_user_enable_domain_ssl} == "no" ]]; then
        echo "Warning This user is set to not enable SSL. Do nothing for this"
      fi
      echo ""
      ((count_x++))

    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_reseller_domain_ssl() {
  # Here we configure SSL for specific domains we want based on the config variable: DA_RESELLER_ENABLE_DOMAIN_SSL{?}
  # Where Domain can have 1 or more
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_reseller_ssl_sub_names da_reseller_ssl_sub_names_count
    local this_da_reseller_uname this_da_reseller_userpass this_da_reseller_enable_domain_ssl \
      this_da_reseller_ssl_sub_names retval
    # Get all the reseller ssl_sub_names
    da_reseller_ssl_sub_names="${!DA_RESELLER_SSL_SUB_NAME@}"
    # Get the total count for reseller ssl_sub_names
    da_reseller_ssl_sub_names_count=$(echo "${da_reseller_ssl_sub_names}" | wc -w)
    count_x=1
    echo "[${SCRIPT_NAME}]: Creating acme-challenge file through custombuild rewrite_confs ..." 2>&1 | tee -a "${REPORT_FILE}"
    /usr/local/directadmin/custombuild/build rewrite_confs
    while [[ ${count_x} -le ${da_reseller_ssl_sub_names_count} ]]; do
      echo ""
      echo "===== Loop count: ${count_x} ========="
      typeset -n "this_da_reseller_username"="DA_RESELLER_USERNAME${count_x}"
      typeset -n "this_da_reseller_userpass"="DA_RESELLER_USERPASS${count_x}"
      typeset -n "this_da_reseller_enable_domain_ssl"="DA_RESELLER_ENABLE_DOMAIN_SSL${count_x}"
      typeset -n "this_da_reseller_ssl_sub_names"="DA_RESELLER_SSL_SUB_NAME${count_x}"

      echo "this_da_reseller_username: ${this_da_reseller_username}"
      echo "this_da_reseller_userpass: ${this_da_reseller_userpass}"
      echo "this_da_reseller_enable_domain_ssl: ${this_da_reseller_enable_domain_ssl}"
      echo "this_da_reseller_ssl_sub_names: ${this_da_reseller_ssl_sub_names[*]}"
      this_da_reseller_ssl_sub_names_count=${#this_da_reseller_ssl_sub_names[@]}
      echo "=========================================="

      if [[ ${this_da_reseller_enable_domain_ssl} == "yes" ]]; then
        echo ""
        echo "OK, This reseller is set to enable SSL"
        count_n=0
        while [ ${count_n} -le $((this_da_reseller_ssl_sub_names_count - 1)) ]; do
          echo ""

          ssl_provider=$(echo "${this_da_reseller_ssl_sub_names[count_n]}" | awk -F':' '{ print $1 }')
          ssl_domain=$(echo "${this_da_reseller_ssl_sub_names[count_n]}" | awk -F':' '{ print $2 }')
          ssl_subdomains_raw=$(echo "${this_da_reseller_ssl_sub_names[count_n]}" | awk -F':' '{ print $3 }')
          # Debug
          echo "==============---count_n = ${count_n} ---==============="
          echo "SSL_PROVIDER: ${ssl_provider}"
          echo "SSL_DOMAIN: ${ssl_domain}"
          echo "SSL_SUBDOMAINS_RAW: ${ssl_subdomains_raw}"

          if [ "${ssl_provider}" == "letsencrypt" ]; then
            echo "Testing, requesting letsencrypt SSL certificate for domain ${ssl_domain} in staging mode ..."
            staging=yes /usr/local/directadmin/scripts/letsencrypt.sh request "${ssl_domain}"
            retval=$?
            if [ ${retval} -ne 0 ]; then
              echo "Warning, this domain ${ssl_domain} has issue when requesting ssl certificate in staging mode"
              # TODO add the ability to resume failed certificate request for reseller (when rerun this script)
            else
              echo "OK, this domain ${ssl_domain} has no issue when requesting ssl certificate in staging mode"
            fi
            ssl_subdomains=$(echo "${ssl_subdomains_raw}" | awk -F'+' '{for (i=0;i<=NF;i++)print $i}')
            count_o=0
            le_select_query=""
            for ssl_subdomain in ${ssl_subdomains}; do
              if [ ${count_o} = 0 ]; then
                le_select[${count_o}]="${ssl_domain}"
                ls="le_select${count_o}=${le_select[${count_o}]}"
              else
                le_select[${count_o}]="${ssl_subdomain}.${ssl_domain}"
                ls="&le_select${count_o}=${le_select[${count_o}]}"
              fi
              le_select_query="${le_select_query}${ls}"
              ((count_o++))
            done
            echo "LE_SELECT_QUERY: ${le_select_query}"
            echo "================-------------------======================="
            echo ""
            # Now we got all variables. Call API here:
            # da_api_admin "request-domain-ssl" <provider> <root_domain> <keysize> <encryption> <ssl_sub_domains_query>
            # Seems like DA admin or owner level also can use this authentication to request certificate for user (I will verify this again)
            da_api_admin "signas+${this_da_reseller_username}+${this_da_reseller_userpass}"
            # Most secure key now is secp521r1 and sha256
            echo "Requesting SSL for domain ${ssl_domain} with the following query: ${le_select_query}"
            echo "This might take sometimes ... (please wait)"
            da_api_admin "request-domain-ssl" "${ssl_provider}" "${ssl_domain}" "secp521r1" "sha256" "${le_select_query}"
          elif [ "${ssl_provider}" == "digicert" ]; then
            :
          fi
          ((count_n++))
        done
      elif [[ ${this_da_user_enable_domain_ssl} == "no" ]]; then
        echo "Warning This user is set to not enable SSL. Do nothing for this"
      fi
      echo ""
      ((count_x++))

    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
function configure_da_user_domain_ssl() {
  # Here we configure SSL for specific domains we want based on the config variable: DA_USER_ENABLE_DOMAIN_SSL{?}
  # Where Domain can have 1 or more
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_ssl_sub_names da_user_ssl_sub_names_count this_da_user_username this_da_user_userpass \
      this_da_user_enable_domain_ssl this_da_user_ssl_sub_names this_da_user_ssl_sub_names_count
    local ssl_provider ssl_domain ssl_subdomains_raw le_select_query le_s count_o count_n count_x retval
    # Get all the user ssl_sub_names
    da_user_ssl_sub_names="${!DA_USER_SSL_SUB_NAME@}"
    # Get the total count for user ssl_sub_names
    da_user_ssl_sub_names_count=$(echo "${da_user_ssl_sub_names}" | wc -w)
    count_x=1
    while [[ ${count_x} -le ${da_user_ssl_sub_names_count} ]]; do
      echo ""
      echo ""
      echo "===== countx = ${count_x} ========="
      typeset -n "this_da_user_username"="DA_USER_USERNAME${count_x}"
      typeset -n "this_da_user_userpass"="DA_USER_USERPASS${count_x}"
      typeset -n "this_da_user_enable_domain_ssl"="DA_USER_ENABLE_DOMAIN_SSL${count_x}"
      typeset -n "this_da_user_ssl_sub_names"="DA_USER_SSL_SUB_NAME${count_x}"

      echo "this_da_user_username: ${this_da_user_username}"
      echo "this_da_user_userpass: ${this_da_user_userpass}"
      echo "this_da_user_enable_domain_ssl: ${this_da_user_enable_domain_ssl}"
      echo "this_da_user_ssl_sub_names: ${this_da_user_ssl_sub_names[*]}"
      this_da_user_ssl_sub_names_count=${#this_da_user_ssl_sub_names[@]}

      if [[ ${this_da_user_enable_domain_ssl} == "yes" ]]; then
        echo ""
        echo "=========================================="
        echo "OK, This user is set to enable SSL"
        count_n=0
        while [ ${count_n} -le $((this_da_user_ssl_sub_names_count - 1)) ]; do
          echo ""
          echo "---count_n=${count_n} ---"
          ssl_provider=$(echo "${this_da_user_ssl_sub_names[count_n]}" | awk -F':' '{ print $1 }')
          ssl_domain=$(echo "${this_da_user_ssl_sub_names[count_n]}" | awk -F':' '{ print $2 }')
          ssl_subdomains_raw=$(echo "${this_da_user_ssl_sub_names[count_n]}" | awk -F':' '{ print $3 }')
          # Debug
          echo "SSL_PROVIDER: ${ssl_provider}"
          echo "SSL_DOMAIN: ${ssl_domain}"
          echo "SSL_SUBDOMAINS_RAW: ${ssl_subdomains_raw}"
          if [ "${ssl_provider}" == "letsencrypt" ]; then
            echo "Testing, requesting letsencrypt SSL certificate for domain ${ssl_domain} in staging mode ..."
            staging=yes /usr/local/directadmin/scripts/letsencrypt.sh request "${ssl_domain}"
            retval=$?
            if [ ${retval} -ne 0 ]; then
              echo "Warning, this domain ${ssl_domain} has issue when requesting ssl certificate in staging mode"
              # TODO add the ability to resume failed certificate request for user when rerun this script
            else
              echo "OK, this domain ${ssl_domain} has no issue when requesting ssl certificate in staging mode"
            fi
            ssl_subdomains=$(echo "${ssl_subdomains_raw}" | awk -F'+' '{for (i=0;i<=NF;i++)print $i}')
            count_o=0
            le_select_query=""
            for ssl_subdomain in ${ssl_subdomains}; do
              if [ ${count_o} = 0 ]; then
                le_select[${count_o}]="${ssl_domain}"
                le_s="le_select${count_o}=${le_select[${count_o}]}"
              else
                le_select[${count_o}]="${ssl_subdomain}.${ssl_domain}"
                le_s="&le_select${count_o}=${le_select[${count_o}]}"
              fi
              le_select_query="${le_select_query}${le_s}"
              ((count_o++))
            done
            echo "---------------"
            echo "LE_SELECT_QUERY: ${le_select_query}"
            echo ""
            # Now we got all variables. Call API here:
            # da_api_admin "request-domain-ssl" <provider> <root_domain> <keysize> <encryption> <ssl_sub_domains_query>
            da_api_admin "signas+${this_da_user_username}+${this_da_user_userpass}"
            # Most secure key now is secp521r1 and sha256
            echo "Requesting SSL for domain ${ssl_domain} with the following query: ${le_select_query}"
            da_api_admin "request-domain-ssl" "${ssl_provider}" "${ssl_domain}" "secp521r1" "sha256" "${le_select_query}"

          elif [ "${ssl_provider}" == "digicert" ]; then
            :
          fi

          ((count_n++))
        done

      elif [[ ${this_da_user_enable_domain_ssl} == "no" ]]; then
        echo "Warning This user is set to not enable SSL. Do nothing for this"
      fi
      echo "=========================================="
      ((count_x++))

    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_owner_security() {
  # Set owner security and answer questions:
  # da_admin_api "set-security-qna" "Sekolah menengah dulu aliran apa ?" "sains"
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_owner_usernames da_owner_usernames_count this_da_owner_username this_da_owner_userpass
    local this_da_owner_security_qs this_da_owner_security_as this_da_owner_security_qs_count count_n

    da_owner_usernames="${!DA_OWNER_USERNAME@}"
    da_owner_usernames_count=$(echo "${da_owner_usernames}" | wc -w)
    count_n=1
    echo "da_owner_usernames: ${da_owner_usernames}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_owner_usernames_count: ${da_owner_usernames_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # Debug:
    while [ ${count_n} -le "${da_owner_usernames_count}" ]; do

      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_n INDEX = ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      # Assign all variables from the config file as array index
      typeset -n "this_da_owner_username"="DA_OWNER_USERNAME${count_n}"
      typeset -n "this_da_owner_userpass"="DA_OWNER_USERPASS${count_n}"
      typeset -n "this_da_owner_security_qs"="DA_OWNER_SECURITY_Q${count_n}"
      typeset -n "this_da_owner_security_as"="DA_OWNER_SECURITY_A${count_n}"

      echo "this_da_owner_username: ${this_da_owner_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_owner_userpass: ${this_da_owner_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_owner_security_qs: ${this_da_owner_security_qs[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_owner_security_as: ${this_da_owner_security_as[*]}" 2>&1 | tee -a "${REPORT_FILE}"

      this_da_owner_security_qs_count="${#this_da_owner_security_qs[@]}"

      count_o=0

      while [ ${count_o} -le $((this_da_owner_security_qs_count - 1)) ]; do
        security_question=${this_da_owner_security_qs[count_o]}
        security_answer=${this_da_owner_security_as[count_o]}

        echo "Security question for owner: ${this_da_owner_username}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Security question: ${security_question}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Security answer: ${security_answer}" 2>&1 | tee -a "${REPORT_FILE}"
        if [[ "${#security_question}" == 0 || "${#security_answer}" == 0 ]]; then
          echo "[${SCRIPT_NAME}]: [skipped]: Value defined for security_question or security answer (or both) are empty"
          ((count_o++))
          continue
        fi
        echo "[${SCRIPT_NAME}]: Setting up security question and answer for owner ${this_da_owner_username}" 2>&1 | tee -a "${REPORT_FILE}"
        da_api_admin "signas+${this_da_owner_username}+${this_da_owner_userpass}"
        da_api_admin "set-security-qna" "${security_question}" "${security_answer}"

        ((count_o++))
      done

      ((count_n++))
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"

    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_admin_security() {
  # Set admin security and answer questions:
  # da_admin_api "set-security-qna" "Sekolah menengah dulu aliran apa ?" "sains"
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_admin_usernames da_admin_usernames_count this_da_admin_username this_da_admin_userpass
    local this_da_admin_security_qs this_da_admin_security_as this_da_admin_security_qs_count count_n

    da_admin_usernames="${!DA_ADMIN_USERNAME@}"
    da_admin_usernames_count=$(echo "${da_admin_usernames}" | wc -w)
    count_n=1
    echo "da_admin_usernames: ${da_admin_usernames}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_admin_usernames_count: ${da_admin_usernames_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # Debug:
    while [ ${count_n} -le "${da_admin_usernames_count}" ]; do

      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_n INDEX = ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      # Assign all variables from the config file as array index
      typeset -n "this_da_admin_username"="DA_ADMIN_USERNAME${count_n}"
      typeset -n "this_da_admin_userpass"="DA_ADMIN_USERPASS${count_n}"
      typeset -n "this_da_admin_security_qs"="DA_ADMIN_SECURITY_Q${count_n}"
      typeset -n "this_da_admin_security_as"="DA_ADMIN_SECURITY_A${count_n}"

      echo "this_da_admin_username: ${this_da_admin_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_admin_userpass: ${this_da_admin_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_admin_security_qs: ${this_da_admin_security_qs[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_admin_security_as: ${this_da_admin_security_as[*]}" 2>&1 | tee -a "${REPORT_FILE}"

      this_da_admin_security_qs_count="${#this_da_admin_security_qs[@]}"

      count_o=0

      while [ ${count_o} -le $((this_da_admin_security_qs_count - 1)) ]; do
        security_question=${this_da_admin_security_qs[count_o]}
        security_answer=${this_da_admin_security_as[count_o]}

        echo "Security question for admin: ${this_da_admin_username}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Security question: ${security_question}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Security answer: ${security_answer}" 2>&1 | tee -a "${REPORT_FILE}"
        if [[ "${#security_question}" == 0 || "${#security_answer}" == 0 ]]; then
          echo "[${SCRIPT_NAME}]: [skipped]: Value defined for security_question or security answer (or both) are empty"
          ((count_o++))
          continue
        fi
        echo "[${SCRIPT_NAME}]: Setting up security question and answer for admin ${this_da_admin_username}" 2>&1 | tee -a "${REPORT_FILE}"
        da_api_admin "signas+${this_da_admin_username}+${this_da_admin_userpass}"
        da_api_admin "set-security-qna" "${security_question}" "${security_answer}"

        ((count_o++))
      done

      ((count_n++))
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"

    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_reseller_security() {
  # Set reseller security and answer questions:
  # da_admin_api "set-security-qna" "Sekolah menengah dulu aliran apa ?" "sains"
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_reseller_usernames da_reseller_usernames_count this_da_reseller_username this_da_reseller_userpass
    local this_da_reseller_security_qs this_da_reseller_security_as this_da_reseller_security_qs_count count_n

    da_reseller_usernames="${!DA_RESELLER_USERNAME@}"
    da_reseller_usernames_count=$(echo "${da_reseller_usernames}" | wc -w)
    count_n=1
    echo "da_reseller_usernames: ${da_reseller_usernames}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_reseller_usernames_count: ${da_reseller_usernames_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # Debug:
    while [ ${count_n} -le "${da_reseller_usernames_count}" ]; do

      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_n INDEX = ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      # Assign all variables from the config file as array index
      typeset -n "this_da_reseller_username"="DA_RESELLER_USERNAME${count_n}"
      typeset -n "this_da_reseller_userpass"="DA_RESELLER_USERPASS${count_n}"
      typeset -n "this_da_reseller_security_qs"="DA_RESELLER_SECURITY_Q${count_n}"
      typeset -n "this_da_reseller_security_as"="DA_RESELLER_SECURITY_A${count_n}"

      echo "this_da_reseller_username: ${this_da_reseller_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_userpass: ${this_da_reseller_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_security_qs: ${this_da_reseller_security_qs[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_security_as: ${this_da_reseller_security_as[*]}" 2>&1 | tee -a "${REPORT_FILE}"

      this_da_reseller_security_qs_count="${#this_da_reseller_security_qs[@]}"

      count_o=0

      while [ ${count_o} -le $((this_da_reseller_security_qs_count - 1)) ]; do
        security_question=${this_da_reseller_security_qs[count_o]}
        security_answer=${this_da_reseller_security_as[count_o]}

        echo "Security question for reseller: ${this_da_reseller_username}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Security question: ${security_question}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Security answer: ${security_answer}" 2>&1 | tee -a "${REPORT_FILE}"
        if [[ "${#security_question}" == 0 || "${#security_answer}" == 0 ]]; then
          echo "[${SCRIPT_NAME}]: [skipped]: Value defined for security_question or security answer (or both) are empty"
          ((count_o++))
          continue
        fi
        echo "[${SCRIPT_NAME}]: Setting up security question and answer for reseller ${this_da_reseller_username}" 2>&1 | tee -a "${REPORT_FILE}"
        da_api_admin "signas+${this_da_reseller_username}+${this_da_reseller_userpass}"
        da_api_admin "set-security-qna" "${security_question}" "${security_answer}"

        ((count_o++))
      done

      ((count_n++))
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"

    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_da_user_security() {
  # Set user security and answer questions:
  # da_admin_api "set-security-qna" "Sekolah menengah dulu aliran apa ?" "sains"
  # Don't use 2 step authentication yet because of this:
  # https://forum.directadmin.com/threads/feature-request-dont-use-online-service-to-generate-otp-qr-code-for-security.63140/
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_usernames da_user_usernames_count this_da_user_username this_da_user_userpass
    local this_da_user_security_qs this_da_user_security_as this_da_user_security_qs_count count_n

    da_user_usernames="${!DA_USER_USERNAME@}"
    da_user_usernames_count=$(echo "${da_user_usernames}" | wc -w)
    count_n=1
    echo "da_user_usernames: ${da_user_usernames}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_user_usernames_count: ${da_user_usernames_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # Debug:
    while [ ${count_n} -le "${da_user_usernames_count}" ]; do

      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_n INDEX = ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      # Assign all variables from the config file as array index
      typeset -n "this_da_user_username"="DA_USER_USERNAME${count_n}"
      typeset -n "this_da_user_userpass"="DA_USER_USERPASS${count_n}"
      typeset -n "this_da_user_security_qs"="DA_USER_SECURITY_Q${count_n}"
      typeset -n "this_da_user_security_as"="DA_USER_SECURITY_A${count_n}"
      echo "this_da_user_username: ${this_da_user_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_userpass: ${this_da_user_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_security_qs: ${this_da_user_security_qs[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_security_as: ${this_da_user_security_as[*]}" 2>&1 | tee -a "${REPORT_FILE}"

      this_da_user_security_qs_count="${#this_da_user_security_qs[@]}"

      count_o=0

      while [ ${count_o} -le $((this_da_user_security_qs_count - 1)) ]; do
        security_question=${this_da_user_security_qs[count_o]}
        security_answer=${this_da_user_security_as[count_o]}

        echo "Security question for user: ${this_da_user_username}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Security question: ${security_question}" 2>&1 | tee -a "${REPORT_FILE}"
        echo "Security answer: ${security_answer}" 2>&1 | tee -a "${REPORT_FILE}"
        if [[ "${#security_question}" == 0 || "${#security_answer}" == 0 ]]; then
          echo "[${SCRIPT_NAME}]: [skipped]: Value defined for security_question or security answer (or both) are empty"
          ((count_o++))
          continue
        fi
        echo "[${SCRIPT_NAME}]: Setting up security question and answer for user ${this_da_user_username}" 2>&1 | tee -a "${REPORT_FILE}"
        da_api_admin "signas+${this_da_user_username}+${this_da_user_userpass}"
        da_api_admin "set-security-qna" "${security_question}" "${security_answer}"

        ((count_o++))
      done

      ((count_n++))
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"

    done
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Function to create all reseller databases
function configure_da_reseller_databases() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"

    local da_reseller_usernames da_reseller_usernames_count this_da_reseller_username this_da_reseller_userpass \
      this_da_reseller_dbs this_da_reseller_dbs_count count_n count_o db_name db_user db_password sql_users check_sql_user

    da_reseller_usernames="${!DA_RESELLER_USERNAME@}"
    da_reseller_usernames_count=$(echo "${da_reseller_usernames}" | wc -w)
    count_n=1
    echo "da_reseller_usernames: ${da_reseller_usernames}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_reseller_usernames_count: ${da_reseller_usernames_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # Debug:
    while [ ${count_n} -le "${da_reseller_usernames_count}" ]; do

      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_n INDEX = ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      # Assign all variables from the config file as array index
      typeset -n "this_da_reseller_username"="DA_RESELLER_USERNAME${count_n}"
      typeset -n "this_da_reseller_userpass"="DA_RESELLER_USERPASS${count_n}"
      typeset -n "this_da_reseller_dbs"="DA_RESELLER_DB${count_n}"

      echo "this_da_reseller_username: ${this_da_reseller_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_userpass: ${this_da_reseller_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_reseller_dbs: ${this_da_reseller_dbs[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      this_da_reseller_dbs_count="${#this_da_reseller_dbs[@]}"

      count_o=0

      while [ ${count_o} -le $((this_da_reseller_dbs_count - 1)) ]; do

        db_domain=$(echo "${this_da_reseller_dbs[count_o]}" | awk -F':' '{ print $1 }')
        db_name=$(echo "${this_da_reseller_dbs[count_o]}" | awk -F':' '{ print $2 }')
        db_user=$(echo "${this_da_reseller_dbs[count_o]}" | awk -F':' '{ print $3 }')
        db_password=$(echo "${this_da_reseller_dbs[count_o]}" | awk -F':' '{ print $4 }')

        if [[ "${#this_da_reseller_dbs}" == 0 ]]; then
          echo "[${SCRIPT_NAME}]: [skipped]: Value defined for this reseller database is empty"
          ((count_o++))
          continue
        fi

        sql_users=$(mysql -e "SELECT USER FROM mysql.user;" | jq -rR .)
        check_sql_user=$(echo "${sql_users}" | grep "${this_da_reseller_username}_${db_user}")

        echo "check_sql_user is: ${check_sql_user} (if empty it doesn't exist)"
        echo "api_user: ${this_da_reseller_username}"
        echo "api_password: ${this_da_reseller_userpass}"
        echo "db_domain: ${db_domain}"
        echo "db_name: ${db_name}"
        echo "db_user: ${db_user}"
        echo "db_password: ${db_password}"
        echo "========="
        # da_api_admin "create-user-database" <db_name> <db_username> <db_password> <domain>
        da_api_admin "signas+${this_da_reseller_username}+${this_da_reseller_userpass}"

        if [[ -z "${check_sql_user}" ]]; then
          echo "[${SCRIPT_NAME}]: Creating new database name ${db_name} for reseller ${this_da_reseller_username} on domain ${db_domain} ..."
          da_api_admin "create-database" "${db_name}" "${db_user}" "${db_password}" "${db_domain}"
        else
          echo "[${SCRIPT_NAME}]: Creating new database name ${db_name} for reseller ${this_da_reseller_username} on domain ${db_domain} using existing username ${db_user} ..."
          da_api_admin "create-user-database" "${db_name}" "${db_user}" "${db_domain}"
        fi

        ((count_o++))
      done

      ((count_n++))
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"

    done

    # da_admin_api "create-user-database" <db_name> <db_username> <db_password> <domain>
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# Function to create all user databases
function configure_da_user_databases() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    local da_user_usernames da_user_usernames_count this_da_user_username this_da_user_userpass \
      this_da_user_dbs this_da_user_dbs_count count_n count_o db_name db_user db_password

    da_user_usernames="${!DA_USER_USERNAME@}"
    da_user_usernames_count=$(echo "${da_user_usernames}" | wc -w)

    count_n=1
    echo "da_user_usernames: ${da_user_usernames}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "da_user_usernames_count: ${da_user_usernames_count}" 2>&1 | tee -a "${REPORT_FILE}"
    # Debug:
    while [ ${count_n} -le "${da_user_usernames_count}" ]; do

      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"
      echo "count_n INDEX = ${count_n}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "" 2>&1 | tee -a "${REPORT_FILE}"
      # Assign all variables from the config file as array index
      typeset -n "this_da_user_username"="DA_USER_USERNAME${count_n}"
      typeset -n "this_da_user_userpass"="DA_USER_USERPASS${count_n}"
      typeset -n "this_da_user_dbs"="DA_USER_DB${count_n}"

      echo "this_da_user_username: ${this_da_user_username}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_userpass: ${this_da_user_userpass}" 2>&1 | tee -a "${REPORT_FILE}"
      echo "this_da_user_dbs: ${this_da_user_dbs[*]}" 2>&1 | tee -a "${REPORT_FILE}"
      this_da_user_dbs_count="${#this_da_user_dbs[@]}"

      count_o=0

      while [ ${count_o} -le $((this_da_user_dbs_count - 1)) ]; do
        db_domain=$(echo "${this_da_user_dbs[count_o]}" | awk -F':' '{ print $1 }')
        db_name=$(echo "${this_da_user_dbs[count_o]}" | awk -F':' '{ print $2 }')
        db_user=$(echo "${this_da_user_dbs[count_o]}" | awk -F':' '{ print $3 }')
        db_password=$(echo "${this_da_user_dbs[count_o]}" | awk -F':' '{ print $4 }')

        if [[ "${#this_da_user_dbs}" == 0 ]]; then
          echo "[${SCRIPT_NAME}]: [skipped]: Value defined for this user database is empty"
          ((count_o++))
          continue
        fi

        sql_users=$(mysql -e "SELECT USER FROM mysql.user;" | jq -rR .)
        check_sql_user=$(echo "${sql_users}" | grep "${this_da_user_username}_${db_user}")

        echo "check_sql_user is: ${check_sql_user} (if empty it doesn't exist)"
        echo "api_user: ${this_da_user_username}"
        echo "api_password: ${this_da_user_userpass}"
        echo "db_domain: ${db_domain}"
        echo "db_name: ${db_name}"
        echo "db_user: ${db_user}"
        echo "db_password: ${db_password}"
        echo "========="
        # da_api_admin "create-user-database" <db_name> <db_username> <db_password> <domain>
        da_api_admin "signas+${this_da_user_username}+${this_da_user_userpass}"

        if [[ -z "${check_sql_user}" ]]; then
          echo "[${SCRIPT_NAME}]: Creating new database name ${db_name} for user ${this_da_user_username} on domain ${db_domain} ..."
          da_api_admin "create-database" "${db_name}" "${db_user}" "${db_password}" "${db_domain}"
        else
          echo "[${SCRIPT_NAME}]: Creating new database name ${db_name} for reseller ${this_da_user_username} on domain ${db_domain} using existing username ${db_user} ..."
          da_api_admin "create-user-database" "${db_name}" "${db_user}" "${db_domain}"
        fi

        # There is an issue, when creating Directadmin database, a duplicated username without underscore, will be created
        # Issue described here: https://forum.directadmin.com/threads/bug-duplicated-username-when-creating-database-from-directadmin.63167/#post-327493
        ((count_o++))
      done

      ((count_n++))
      echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" 2>&1 | tee -a "${REPORT_FILE}"

    done

    # da_admin_api "create-user-database" <db_name> <db_username> <db_password> <domain>
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
# This is a custom function used to modify user websites configuration
function configure_da_custom_webs() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    if [ "${ENABLE_CUSTOM_WEB_SETUP}" == "yes" ]; then
      local websetup_bin
      websetup_bin="${DATA_PATH}/maxinet/storage/webapps/websetup"
      if [ -f "${websetup_bin}" ]; then
        chmod +x "${websetup_bin}"
        cd_to_path "${DATA_PATH}/maxinet/storage/webapps"
        ./websetup
      else
        echo "[${SCRIPT_NAME}]: Unable to find websetup script at maxinet data storage" 2>&1 | tee -a "${REPORT_FILE}"
        _exit 147
      fi
    else
      echo "[${SCRIPT_NAME}]: [Skipped]: Custom websetup is not enabled in config file" 2>&1 | tee -a "${REPORT_FILE}"
    fi
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function harden_with_lynis() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # Suggested by lynis to disable core dump
    limitsconf="/etc/security/limits.conf"
    limit_append="*                hard    core          0"
    read -ra line_array <<<"${limit_append}"
    line_domain=${line_array[0]}
    line_type=${line_array[1]}
    line_item=${line_array[2]}
    line_value=${line_array[3]}
    gr=$(grep "$line_domain *$line_type  *$line_item *$line_value" "${limitsconf}")

    if [[ -z "${gr}" ]]; then
      echo "[${SCRIPT_NAME}]: Disabling core dump with the following options:"
      echo "${limit_append}"
      echo "${limit_append}" >>"${limitsconf}"
    else
      echo "[${SCRIPT_NAME}]: [Skipped]: Found core dump config is already disabled"
    fi

    echo "# This line disables core dumps for all users" >>/etc/profile
    echo "ulimit -S -c 0 > /dev/null 2>&1" >>/etc/profile
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

function configure_cronjobs() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    # Stopping some services to reduce memory usage like clamav:
    maxicron --stop-some-services

    # Add the above command in crontab so it will run on startup
    {
      echo "# Stop some high memory processes 180 seconds (3 minutes) after reboot"
      echo "@reboot sleep 180 && maxicron --stop-some-services"
    } >>/etc/crontab

    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi
  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}

# This is used to install extra packages like ncdu, htop and more
function setup_post() {
  local option executed_function run
  option="$1"
  run="no"
  executed_function="${CONF_PATH}/${FUNCNAME[0]}_executed"
  if [ "${option}" == "--skip-mark" ]; then
    cat /dev/null >"${executed_function}"
    #run="no"
    return 0
  elif [ "${option}" == "--skip" ]; then
    #run="no"
    return 0
  fi
  if [[ "${option}" == "--run-force" || "${option}" == "--run-force-exit" ]]; then
    rm -rf "${executed_function}"
    run="yes"
  elif [[ -z "${option}" || "${option}" == "--run" || "${option}" == "--run-exit" ]]; then
    run="yes"
  fi
  if [[ ! -f "${CONF_PATH}/${FUNCNAME[0]}_executed" && "${run}" == "yes" ]]; then
    echo "[${SCRIPT_NAME}]: Executing ${FUNCNAME[0]} ..." 2>&1 | tee -a "${REPORT_FILE}"
    if [ "${DISTRO_ID}" == "debian" ]; then
      # Install speedtest-cli
      curl -s https://install.speedtest.net/app/cli/install.deb.sh | sudo bash
      apt-get install speedtest
      apt-get -y install ncdu htop mailutils gpg vim mutt 2>&1 | tee -a "${REPORT_FILE}"
    else
      echo "Warning, check the setup_post installation for ${DISTRO_ID}, it's only available for debian!"
    fi
    # TODO: Audit system here with maxinis:
    # maxinis --audit system
    check_finish_reboot "${FUNCNAME[0]}"
  else
    echo "[${SCRIPT_NAME}]: [Skipped]: ${FUNCNAME[0]} has ran before" 2>&1 | tee -a "${REPORT_FILE}"
    echo "=~=~=~=~=~=~=~=~=~" 2>&1 | tee -a "${REPORT_FILE}"
  fi

  if [[ "${option}" == "--run-force-exit" || "${option}" == "--run-exit" ]]; then
    exit 0
  fi
}
function setup() {
  script_header
  option="$1"
  #if [ "${option}" == "remote" ];  then
  #  _echo 'yellow' "Notice, remote setup is set"
  #  :
  #else
  # ==== Locking mechanism ====
  PID=$(pidof -x "${SCRIPT_NAME}")
  # USE ATOMIC LOCK
  LOCK_DIR="/var/lock/${SCRIPT_NAME}"
  LOCK_PID="${LOCK_DIR}/pid"

  # THIS WILL CHECK ONLY ONE INSTANCE OF SCRIPT SHOULD RUN
  if ! mkdir "${LOCK_DIR}" 2>/dev/null; then
    PID=$(cat "${LOCK_PID}")
    if ! kill -0 "${PID}" 2>/dev/null; then
      echo "[${SCRIPT_NAME}]: Removing stale lock of nonexistent PID ${PID}" 2>&1 | tee -a "${REPORT_FILE}"
      rm -rf "${LOCK_DIR}"
      echo "[${SCRIPT_NAME}]: Restarting (${SCRIPT_NAME})" 2>&1 | tee -a "${REPORT_FILE}"
      exec "$0" "$@"
    fi
    echo "[${SCRIPT_NAME}]: Warning, another instance of this script is already running with PID [${PID}]" 2>&1 | tee -a "${REPORT_FILE}"
    echo "[${SCRIPT_NAME}]: Please wait or clear the current running session to re-run this script" 2>&1 | tee -a "${REPORT_FILE}"
    exit 147
  else
    # LOCK SUCCESS NOW SAVE INFORMATION IN PID
    echo $$ >"${LOCK_PID}"

    CTRL_C_COUNT=0
    # IF SCRIPT EXIT UNSUCCESSFULLY, THEN WE CALL cleanup function
    _traps _trap_cleanup QUIT INT TERM EXIT
  fi
  # ============End of locking===============
  #fi
  # TODO: this is deprecated will change soon:
  echo "Remember you can always resume installation with (--help for more information):"
  echo "For local installation: ${SCRIPT_NAME} --setup"
  echo "For remote installation: ${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"root:${ROOT_USERNAME}\" \"${CODE_PATH}/ssh_scripts/maxinet_setup.sh\""
  echo "To login as root user: ${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"user:root\""
  echo "To login as SSH user: ${SCRIPT_NAME} --ssh-login \"${BOX_HOSTNAME_FQDN}:${SSH_PORT}\" \"root:SSH_USERNAME\""
  echo "To unlock LUKS Disk encryption: ${SCRIPT_NAME} --ssh-luks-unlock ${DROP_BEAR_PORT} \"<LUKS_PASS>\""
  _pause 5
  validate_config

  if [[ ${DISTRO_ID} == "centos" || ${DISTRO_ID} == "debian" ]]; then
    #echo "[${SCRIPT_NAME}]: OK, this operating system [${DISTRO_ID}] is supported!" 2>&1 | tee -a "${REPORT_FILE}"
    :
  else
    echo "[${SCRIPT_NAME}]: Sorry, this operating system [${DISTRO_ID}] is not supported!" 2>&1 | tee -a "${REPORT_FILE}"
    _exit 147
  fi
  if compgen -G "${CONF_PATH}/*_executed" >/dev/null; then
    _echo "$(msg blue)Resuming from previous installation ...$(msg end)" --name
    START_OR_RESUME="Resuming"
    _pause 10
  else
    START_OR_RESUME="Starting"
  fi
  _echo "$(msg blue)${START_OR_RESUME} Installation for ${BOX_HOSTNAME_FQDN} ...$(msg end)" --name
  echo ""

  ############ Call function documentation ############
  # SYNTAX:
  # function_name +<option>
  # + means optional
  # EXAMPLE:
  # eg: secure_box --run-force
  # DESCRIPTION:
  # <option> lists:
  # --run - normal run, after it has finished executed, it is marked as executed and continue to the next function_name call
  # --run-exit - normal run, after it has finished executed, it is marked as executed and then exit or halt (no next function_name call)
  # --run--force - force run (even after being executed previously), after it has finished executed, it is marked as executed and continue to the next function_name call
  # --run--force-exit - force run (even after being executed previously), after it has finished executed, it is marked as executed and then exit or halt (no next function_name call)
  # --skip - do not run the current function_name and do not mark it as executed
  # --skip-mark - do not run the current function_name but mark it as executed
  # EXTRA INFO:
  # Without <option> argument it is similar to using --run
  # eg: configure_net is equivalent to configure_net --run
  #####################################################

  ############ Function call starts here ############
  # Note 1: setup_pre can be used to install screen, disable Selinux in CentOS or other necessary pre install components
  setup_pre --run
  # Note 1: Clone all setup script from git (recommend to run as --run-force instead of --run so we always get the latest security update)
  get_latest_maxinet --run-force
  # Note 1: Get the latest security codes from maxicode (recommend to run as --run-force instead of --run so we always get the latest security update)
  init_local_maxicode --run-force
  # Note 1: This call contains security hardening server
  secure_box --run-exit
  # Note 1: This will configure grub such as setting up password for grub bootloader
  # Note 2: Grub bootloader password can also be used in preseed file, but having preseed file during installation is a bad idea.
  configure_grub --run
  # TODO continue writing next documentation
  # Configure basic network 1
  configure_net --run
  # Must run configure_net first before running configure_net2 because we need interface to be ${NIC_INTERFACE_NAME} first #OK
  configure_net2 --run
  # This is where we can configure mount option for disk
  configure_fstab --run
  # Tweaking swap for production server
  configure_sysctl_swap --run
  # Tweaking kernel etc ..
  configure_sysctl_kernel_fs --run
  # Tweaking IPv4 or Ipv6
  configure_sysctl_ips --run
  # Upgrade system
  upgrade_os --run
  #exit 0
  if [ "${INSTALL_TYPE}" == "directadmin" ]; then
    install_da_pre --run
    install_da --run
    # Must run this after install_da and before install_da_post because install_da_post requires valid nginx directive which is fixed at rebuild_da_package
    rebuild_da_package --run
    install_da_post --run
    change_da_auth --run
    # Linking da ipv6 with ipv4 and vice versa
    link_da_ipv6 --run
  fi
  # FOR BOTH GENERAL AND DIRECTADMIN INSTALLATION TYPE:
  # Best to execute after install_da because CSF installer will detect if DA exist, it will install CSF in DA way.
  configure_csf --run
  configure_maxibox --run
  configure_maxicode_pre --run
  configure_maxicode --run
  configure_maxiperm --run
  configure_maxinis --run
  configure_maxigpg --run
  configure_maxida --run
  configure_maxicron --run
  configure_maxiaide --run-force
  configure_maxiwall --run-force-exit
  configure_maxicloud --run-exit
  configure_maxipass --run
  configure_maxify --skip #-- disable temporarily
  configure_logs --skip   #-- skip temporarily
  if [ "${INSTALL_TYPE}" == "directadmin" ]; then
    configure_da_sql --run
    configure_da_mail --run
    configure_da_ftp --run
    configure_nginx_apache --run
    configure_web_apps_html --run
    build_da_custom_conf --run
    configure_da --run
    configure_da_memcached --run
    configure_da_geoip --run
    # we configure dns template before creating admin, reseller and user accounts so they can use new DNS template
    configure_da_dns_templates --run
    configure_da_owner_accounts --run
    configure_da_admin_accounts --run
    configure_da_reseller_accounts --run
    configure_da_reseller_root_domains --run
    configure_da_reseller_wildcard_domains --run
    configure_da_reseller_subdomains --run
    configure_da_reseller_emails --run
    configure_da_user_accounts --run
    configure_da_user_root_domains --run
    configure_da_user_wildcard_domains --run
    configure_da_user_subdomains --run
    configure_da_user_emails --run
    configure_da_owner_skins --run
    configure_da_admin_skins --run
    configure_da_reseller_skins ""
    configure_da_owner_security --run
    configure_da_admin_security --run
    configure_da_reseller_security --run
    configure_da_user_security --run
    configure_da_reseller_databases --run
    configure_da_user_databases --run
    configure_da_custom_webs --run

    # Must run this functions (configure_da_ssl) after running CSF because we need to make sure all appropriate ports are opened to request certs
    # Warning do not overused configure_da_ssl function because when requesting the same cert for the same domain 7 times for a week, you will get blocked.
    # This will set the hosting to SSL:
    configure_da_ssl_pre --run
    # It's best to call SSL after domain propagation few hours later.

    # Call certificate request at the end because we want to create DNS entry and propagate first
    # Don't worry if some domains are not able to have SSL because of the propagation problem using external DNS
    configure_da_ssl --run
    configure_da_reseller_domain_ssl_pre --run
    configure_da_reseller_domain_ssl --run
    configure_da_user_domain_ssl_pre --run
    configure_da_user_domain_ssl --run
  fi
  # Still need to add more based on lynis suggestion
  harden_with_lynis --run
  configure_cronjobs --run
  setup_post --run

  echo "" 2>&1 | tee -a "${REPORT_FILE}"
  if [ "${INSTALL_TYPE}" == "directadmin" ]; then
    echo "==============" 2>&1 | tee -a "${REPORT_FILE}"
    echo "Directadmin now can be accessed through this URL: " 2>&1 | tee -a "${REPORT_FILE}"
    echo "http://${IPV4_ADD0}:${DA_PORT} or http://${BOX_HOSTNAME_FQDN}:${DA_PORT}" 2>&1 | tee -a "${REPORT_FILE}"
    echo "Username: DA_OWNER_USERNAME1" 2>&1 | tee -a "${REPORT_FILE}"
    echo "Password: *******" 2>&1 | tee -a "${REPORT_FILE}"
    echo "==============" 2>&1 | tee -a "${REPORT_FILE}"
    echo "" 2>&1 | tee -a "${REPORT_FILE}"
    echo ""
  fi
  script_time
  echo "========== Installation Completed ==========" 2>&1 | tee -a "${REPORT_FILE}"
  echo ""
  echo "[${SCRIPT_NAME}]: Destroying setup information in 120 seconds ..." 2>&1 | tee -a "${REPORT_FILE}"
  _pause 120
  # Destroy the setup config deeply
  shred -uvz "${CONFIG_FILE}"
  # Remove all setup information except CONF_PATH because CONF_PATH and CODE_PATH
  # CONF_PATH contains setup step information whereas CODE_PATH contains autogenerated file/script ending with _ag.extension
  rm -rf "${LOG_PATH}"
  #rm -rf "${CONF_PATH}"
  rm -rf "${DATA_PATH}"
  #rm -rf "${CODE_PATH}"
  rm -rf "${TEMP_PATH}"
  rm -rf "${INST_TEMP_DIR}"
  # Clear bash history
  history -c
}
temp1() {
  :
}

test1() {
  :
}

############# End of function #############

# -------------- MAIN FUNCTION --------------#
# Obtain current running script name. eg: maxinet
SCRIPT_NAME=$(basename -- "$0")
# Obtain current script path location eg: /root/execute/
SCRIPT_PATH="$(dirname "$(readlink -f "$0")")"

# Define date location to be executed eg: /usr/bin/date
DATE_BIN=$(command -v date)

# Location of an isoinfo
ISOINFO_BIN=$(command -v isoinfo)

if [ -z "${DATE_BIN}" ]; then
  # If binary for date is empty (does not exist),
  # we quit this script to prevent error because we need this binary for this script
  echo "$(msg -c red)Error, path for binary [date] does not exist!$(msg end)"
  exit 147
fi

# Define each directory's location to be created
LOG_PATH="${SCRIPT_PATH}/log"
CONF_PATH="${SCRIPT_PATH}/conf"
DATA_PATH="${SCRIPT_PATH}/data"
CODE_PATH="${SCRIPT_PATH}/code"
ISO_PATH="${SCRIPT_PATH}/iso"
SECURE_PATH="${SCRIPT_PATH}/secure"
TEMP_PATH="${SCRIPT_PATH}/temp"
INST_TEMP_DIR="${TEMP_PATH}/src"

# Create all important directories if they are not exist
mkdir -p "${LOG_PATH}"
mkdir -p "${CONF_PATH}"
mkdir -p "${DATA_PATH}"
mkdir -p "${CODE_PATH}"
mkdir -p "${ISO_PATH}"
mkdir -p "${SECURE_PATH}"
mkdir -p "${TEMP_PATH}"
mkdir -p "${INST_TEMP_DIR}"

# A global variable that holds the number of progress spin occurrences
SPIN_COUNT=0

# A global variable that temporarily holds initial seconds value
HOLD_SECONDS=0

# This global variable that temporarily hold the current execution time
EXEC_START=$(date +%s.%N)

# A global variable that temporarily holds the current path
PREPATH="${PWD}"

# Get the distro ID. eg: ubuntu
DISTRO_ID=$(get_linux_os "id")

# Get the distro Version. eg: 20.04
DISTRO_VERSION=$(get_linux_os "version")

#eg: 31-03-2020_11-56-16.12345
DATE_TIME_RANDSTR="$(${DATE_BIN} '+%d-%m-%Y_%H-%M-%S').${RANDOM}"
#eg: 31-03-2020_11-56-16
DATE_TIME_NOW="$(date '+%d-%m-%Y_%H-%M-%S')"

if [[ "${USE_MULTI_LOG_FILE}" == "yes" ]]; then
  # set to use multiple log files with different random date. eg: maxinet-31-03-2020_11-56-16.12345-report.log
  REPORT_FILE="${LOG_PATH}/${SCRIPT_NAME}-${DATE_TIME_RANDSTR}-report.log"
else
  # set to use one log file with only one name. eg: maxinet-report.log
  REPORT_FILE="${LOG_PATH}/${SCRIPT_NAME}-report.log"
fi

# This report path is for storing error report
# REPORT_FILE_ERROR="${LOG_PATH}/${SCRIPT_NAME}-${DATE_TIME_RANDSTR}-error-report.log"

CONFIG_FILE="${SCRIPT_PATH}/${SCRIPT_NAME}.conf"
CONFIG_TEST=""
if [ -s "${CONFIG_FILE}" ]; then
  # CONFIG file must follow this regex.
  # eg: 1) abc=2 #OK# 2) abc= #NOT-OK 3) abc #NOT-OK 4) @ok=abc #NOT-OK 5) .ok=abc #NOT-OK 6) _ok=abc #OK
  # It will ignore white spaces, blank-lines and comments.
  CONFIG_TEST=$(grep -Evn '^[A-Za-z0-9_].+=.+$|^[[:space:]]*$|^#' "${CONFIG_FILE}")
  if [ -n "${CONFIG_TEST}" ]; then
    LOG_VERBOSITY_LEVEL="3"
    _echo "$(msg red)Error, there is one or more problems found in config file in ${CONFIG_FILE}$(msg end)" --name --verbose 3
    _echo "" --plain
    _echo "$(msg red)Error lines:$(msg end)" --name --verbose 3
    _echo "$(msg red)${CONFIG_TEST}$(msg end)" --plain
  else
    source_errs=$(source "${CONFIG_FILE}" 2>&1 >/dev/null)
    # get the return code of the test source
    retval=$?
    if [ ${retval} = 0 ]; then
      # Let's do the weird thing on string:
      if [ -n "${source_errs}" ]; then
        # Need this LOG_VERBOSITY_LEVEL=3 here because if config file error, this will not have value to display error
        LOG_VERBOSITY_LEVEL="3"
        _echo "$(msg red)Error, there is one or more problems found in config file in ${CONFIG_FILE}$(msg end)" --name --verbose 3
        _echo "" --plain
        _echo "$(msg red)Error details:$(msg end)" --name --verbose 3
        _echo "$(msg red)${source_errs}\n$(msg end)" --plain
        _exit 147
      else
        #If no error then we source the environment file from ${CONFIG_FILE} ..."
        source "${CONFIG_FILE}"
        retval=$?
        if [ ${retval} = 0 ]; then
          #LOG_VERBOSITY_LEVEL="7" # Do not use this, because we are overwriting the log
          # We do not need to show if config is valid, just care about the error.
          :
          #_echo "$(msg green)[${retval}] OK, config file is valid$(msg end)" --name --verbose 7
        else
          # In case something is wrong when sourcing it then tell here
          # We need this LOG_VERBOSITY_LEVEL=4 here because if config file error, this will not have value to show warning
          LOG_VERBOSITY_LEVEL="4"
          _echo "$(msg yellow)Warning, config file is valid but it does not return valid code when sourcing it$(msg end)" --name --verbose 4
          _exit 147
        fi
        #_echo "" --plain
      fi
    else
      # Need this LOG_VERBOSITY_LEVEL=3 here because if config file error, this will not have value to display error
      LOG_VERBOSITY_LEVEL="3"
      _echo "$(msg red)Error, the source command returns an error code of ${retval} when sourcing ${CONFIG_FILE}$(msg end)" --name --verbose 3
      _echo "$(msg red)Error details:$(msg end)" --name --verbose 3
      _echo "$(msg red)${source_errs}\n$(msg end)" --plain
      _exit 147
    fi
  fi
else
  _echo "$(msg red)Error, ${CONFIG_FILE} does not exist or empty. Need this configuration file$(msg red)" --name --verbose 3
  _exit 147
fi

# Start logging here after successfully validated config if LOG_VERBOSITY_LEVEL from config file is set to 8
[[ ${LOG_VERBOSITY_LEVEL} == "8" ]] && set -x

# Configuring or creating autogenerate extra scripts and adding autogenerate setup readme
create_file "ssh-push-scripts setup-readme"

# Obtain DNS provider API information from config variable
DNS_PROVIDER_NAME=$(echo "${DNS_PROVIDER_API1}" | awk -F':' '{ print $1 }')
DNS_PROVIDER_USER=$(echo "${DNS_PROVIDER_API1}" | awk -F':' '{ print $2 }')
DNS_PROVIDER_API_KEY=$(echo "${DNS_PROVIDER_API1}" | awk -F':' '{ print $3 }')

ARGNUM="$#"
# Handle option arguments (this option handler method does not require getopt)
if [ $ARGNUM -eq 0 ]; then
  _echo "$(msg red)Error, no argument is supplied. Use $(msg yellow)[ ${SCRIPT_NAME} --help ]$(msg red) to see the valid options$(msg end)" --name --verbose 3
  _exit 1
fi

while [ "$#" -gt 0 ]; do
  case "$1" in
  -h | --help)
    help
    exit 0
    ;;
  # Display program version
  -V | --version)
    script_header
    break
    ;;
  --config-test)
    shift
    :
    break
    ;;
  # This one is for configuring script, for example supplying config file through terminal
  -c | --configure)
    shift
    _echo "Configuring ${APP_SPECIFIC_NAME} ..." --name
    :
    break
    ;;
  --setup | --install)
    shift
    setup "$@"
    exit 0
    break
    ;;
  # Clear all paths (dangerous)
  -cls | --clear)
    rm -rf "${LOG_PATH}"
    rm -rf "${CONF_PATH}"
    rm -rf "${DATA_PATH}"
    rm -rf "${CODE_PATH}"
    rm -rf "${TEMP_PATH}"
    rm -rf "${INST_TEMP_DIR}"
    echo "[${SCRIPT_NAME}]: Program path cleaned"
    exit 0
    break
    ;;
  # This option is the starting point for initializing server.
  # It will setup disk from scratch (eg: from linode), call necessary functions and you will get secured server
  # maxinet --init-server <options>
  # Deprecated documentation below (update later):
  # maxinet --init-server optional <init-all> optional <rebuild-iso>
  # Note 1: Only use init-all to remove and start re-creating all partitions
  # Note 2: If you run like this maxinet --init-server init-all
  #   :This will remove all existing partitions including rescue disk and profile. No rescue disk and profile is created
  # Note3: If you run like this (without argument): maxinet --init-server
  #   :This will remove and re-create system related partitions. It will not disturb the rescue option
  --init-server | --deploy-server | --build-server | --create-server)
    shift
    script_header
    init_server "$@"
    exit 0
    break
    ;;
  # Test or user linode API here
  # eg: maxinet --linode-api "get-linode-id" "sun.sofibox.com"
  --linode-api | --linode_api | --linode)
    shift
    linode_api_admin "$@"
    exit 0
    break
    ;;
  # This will list out what domain or subdomain that will have problem when request certificate
  -srt | --ssl-request-test | --request-ssl-test)
    # Beta test
    validate_config
    configure_da_reseller_domain_ssl_pre "--run-force"
    configure_da_user_domain_ssl_pre "--run-force"
    exit 0
    break
    ;;
  # This will request certificate
  -sr | --ssl-request | --request-ssl)
    validate_config
    configure_da_reseller_domain_ssl "--run-force"
    configure_da_user_domain_ssl "--run-force"
    exit 0
    break
    ;;

  -lui | --linode-upload-iso)
    # This is a way to upload iso file from local to remote using scp
    shift
    cp "${SCRIPT_PATH}"/secure/ssh/*.id_rsa* /root/.ssh/
    chmod -R 600 /root/.ssh/
    ssh -i /root/.ssh/linode_lish.id_rsa -tt "${DNS_PROVIDER_USER}@${DNS_PROVIDER_TERMINAL_SERVER}" "${BOX_HOSTNAME_FQDN}" <linode/permit_root.sh
    echo "Script executed"
    # sleep 30
    #exit 147
    echo "Uploading ISO file into ~/ at ${IPV4_ADD0} using SCP protocol ..."
    iso_file="${SCRIPT_PATH}/storage/os/debian/deb10mod-final.iso"
    scp "${iso_file}" root@"${IPV4_ADD0}":~/mini.iso
    echo "Cloning setup file mini.iso into /dev/sda"
    ssh "root@${IPV4_ADD0}" 'bash -s' <<"ENDSSH"
      dd if=mini.iso of=/dev/sda
ENDSSH
    exit 0
    break
    ;;

  -lu | --luks-unlock | --ssh-luks-unlock)
    shift
    ssh_api luks-unlock "$@"
    exit 0
    break
    ;;
    # ./maxinet --ssh-login <optional_hostname> <optional_port> <optional_user>
  # If hostname or port are not provided, they will use the default ones from config file
  --ssh-login)
    shift
    ssh_api login "$@"
    exit 0
    break
    ;;
  --ssh-api | --ssh)
    shift
    ssh_api "$@"
    exit 0
    break
    ;;
  --ssh-transfer)
    shift
    ssh_api transfer-files "$@"
    exit 0
    break
    ;;
  --check-server-port)
    shift
    check_server_port "$@"
    exit 0
    break
    ;;
  -rs | --shutdown-server)
    shift
    _shutdown "$@"
    exit 0
    break
    ;;
  # lish-login <option>
  -ll | --lish-console | --lish)
    shift
    lish_console "$@"
    exit 0
    break
    ;;
  --dropbox-api | --dropbox-api-admin | --dropbox)
    shift
    dropbox_api "$@"
    exit 0
    break
    ;;
  # This will generate a modified operating system ISO file that can be used to automatically install OS when booting.
  --iso-api | --iso-api-admin | --iso)
    shift
    iso_api "$@"
    exit 0
    break
    ;;
  -b | --build)
    shift
    package_name="$1"
    cd_to_path "${HOME}"
    if [ "${package_name}" == "go" ]; then
      apt-get -y install golang-go
    elif [ "${package_name}" == "dbxcli" ]; then
      install_required "apt:git" "apt:golang-go" "apt:gox"
      mkdir $HOME/go
      go get github.com/dropbox/dbxcli
      cd_to_path "$HOME/go/src/github.com/dropbox/dbxcli"
      # To be continued ...
    elif [ "${package_name}" == "dbx" ]; then
      :
    else
      echo "No known package!"
    fi
    exit 0
    break
    ;;
  -t | --test)

    #ssh_api lish-push-script --local-script-path "${CODE_PATH}/ssh_scripts/test_script.sh"
    ssh_api push-script --sp sun.sofibox.com:893 --gu root:root --local-script-path "${CODE_PATH}/ssh_scripts/test_script.sh"
    exit 1
    exec_time start "linode_reboot_api"
    linode_api_admin reboot-linode --linode-label "${BOX_HOSTNAME_FQDN}" --linode-config-label "${LINODE_OS_CONFIG_LABEL}" --log-level 6
    exec_time end "linode_reboot_api"
    exit 0
    break
    ;;
  --)
    break
    ;;
  -*)
    opt="$1"
    echo "Invalid option '${opt}'. Use --help to see the valid options"
    exit 147
    ;;
  *) ;;
  esac
  shift
done

[[ ${LOG_VERBOSITY_LEVEL} == "8" ]] && set +x
